/* MKDS (EU) ARM9 type definitions */
/* Generated by mkds-re: https://github.com/XorTroll/mkds-re, at January 24, 2025 07:10:43 PM */

#ifndef MKDS_RE_TYPES_GEN_H
#define MKDS_RE_TYPES_GEN_H

/* Basic IDA types and definitions */

#define int16_t short
#define int32_t int
#define int64_t long long
#define uint8_t unsigned char
#define uint16_t unsigned short
#define uint32_t unsigned int
#define uint64_t unsigned long long
#define u8 uint8_t
#define u16 uint16_t
#define u32 uint32_t
#define u64 uint64_t
#define i16 int16_t
#define i32 int32_t
#define fx16 i16
#define fx32 i32
#define _BYTE uint8_t
#define _WORD int16_t
#define _DWORD int32_t
#define _QWORD int64_t
#define BOOL int
#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long
#define __cdecl
#define __fastcall
#define __usercall

#define __noreturn __attribute__((noreturn))

#define __thumb __attribute__((target("thumb")))

_Static_assert(sizeof(u8) == 1, "u8 definition");
_Static_assert(sizeof(u16) == 2, "u16 definition");
_Static_assert(sizeof(u32) == 4, "u32 definition");
_Static_assert(sizeof(u64) == 8, "u64 definition");

/* Enums (76 total) */

enum DriverType {
    DriverType_Player = 0,
    DriverType_CPU = 1,
    DriverType_Ghost = 2,
    DriverType_Unk3MaybeNet = 3,
    DriverType_Invalid = 4,
};

enum CharacterId {
    CharacterId_Mario = 0,
    CharacterId_DK = 1,
    CharacterId_Kinopio_Toad = 2,
    CharacterId_Bowser = 3,
    CharacterId_Peach = 4,
    CharacterId_Wario = 5,
    CharacterId_Yoshi = 6,
    CharacterId_Luigi = 7,
    CharacterId_DryBones = 8,
    CharacterId_Daisy = 9,
    CharacterId_Waluigi = 10,
    CharacterId_ROB = 11,
    CharacterId_Heyho_ShyGuy = 12,
    CharacterId_Count = 13,
    CharacterId_Invalid = 4294967295,
};

enum Team {
    Team_Blue = 0,
    Team_Red = 1,
    Team_None = 4294967295,
};

enum InternalCourseId {
    InternalCourseId_UnkEmpty = 0,
    InternalCourseId_old_yoshi_gc = 1,
    InternalCourseId_old_mario_gc = 2,
    InternalCourseId_luigi_course = 3,
    InternalCourseId_dokan_course = 4,
    InternalCourseId_test1_course = 5,
    InternalCourseId_donkey_course = 6,
    InternalCourseId_wario_course = 7,
    InternalCourseId_nokonoko_course = 8,
    InternalCourseId_old_baby_gc = 9,
    InternalCourseId_old_mario_sfc = 10,
    InternalCourseId_old_momo_64 = 11,
    InternalCourseId_old_koopa_agb = 12,
    InternalCourseId_old_peach_agb = 13,
    InternalCourseId_old_luigi_gc = 14,
    InternalCourseId_old_noko_sfc = 15,
    InternalCourseId_old_frappe_64 = 16,
    InternalCourseId_clock_course = 17,
    InternalCourseId_mansion_course = 18,
    InternalCourseId_airship_course = 19,
    InternalCourseId_cross_course = 20,
    InternalCourseId_test_circle = 21,
    InternalCourseId_bank_course = 22,
    InternalCourseId_old_hyudoro_64 = 23,
    InternalCourseId_ridge_course = 24,
    InternalCourseId_mario_course = 25,
    InternalCourseId_garden_course = 26,
    InternalCourseId_desert_course = 27,
    InternalCourseId_town_course = 28,
    InternalCourseId_rainbow_course = 29,
    InternalCourseId_snow_course = 30,
    InternalCourseId_beach_course = 31,
    InternalCourseId_koopa_course = 32,
    InternalCourseId_pinball_course = 33,
    InternalCourseId_stadium_course = 34,
    InternalCourseId_old_donut_sfc = 35,
    InternalCourseId_old_choco_64 = 36,
    InternalCourseId_old_luigi_agb = 37,
    InternalCourseId_old_kinoko_gc = 38,
    InternalCourseId_old_choco_sfc = 39,
    InternalCourseId_old_sky_agb = 40,
    InternalCourseId_mini_block_course = 41,
    InternalCourseId_mini_block_64 = 42,
    InternalCourseId_mini_dokan_gc = 43,
    InternalCourseId_mini_stage1 = 44,
    InternalCourseId_mini_stage2 = 45,
    InternalCourseId_mini_stage3 = 46,
    InternalCourseId_mini_stage4 = 47,
    InternalCourseId_mr_stage1 = 48,
    InternalCourseId_mr_stage2 = 49,
    InternalCourseId_mr_stage3 = 50,
    InternalCourseId_mr_stage4 = 51,
    InternalCourseId_Award = 52,
    InternalCourseId_StaffRoll = 53,
    InternalCourseId_StaffRollTrue = 54,
};

enum CourseId {
    CourseId_cross_course = 0,
    CourseId_bank_course = 1,
    CourseId_beach_course = 2,
    CourseId_mansion_course = 3,
    CourseId_desert_course = 4,
    CourseId_town_course = 5,
    CourseId_pinball_course = 6,
    CourseId_ridge_course = 7,
    CourseId_snow_course = 8,
    CourseId_clock_course = 9,
    CourseId_mario_course = 10,
    CourseId_airship_course = 11,
    CourseId_stadium_course = 12,
    CourseId_garden_course = 13,
    CourseId_koopa_course = 14,
    CourseId_rainbow_course = 15,
    CourseId_old_mario_sfc = 16,
    CourseId_old_momo_64 = 17,
    CourseId_old_peach_agb = 18,
    CourseId_old_luigi_gc = 19,
    CourseId_old_donut_sfc = 20,
    CourseId_old_frappe_64 = 21,
    CourseId_old_koopa_agb = 22,
    CourseId_old_baby_gc = 23,
    CourseId_old_noko_sfc = 24,
    CourseId_old_choco_64 = 25,
    CourseId_old_luigi_agb = 26,
    CourseId_old_kinoko_gc = 27,
    CourseId_old_choco_sfc = 28,
    CourseId_old_hyudoro_64 = 29,
    CourseId_old_sky_agb = 30,
    CourseId_old_yoshi_gc = 31,
    CourseId_Count = 32,
};

enum SceneId {
    SceneId_Title = 0,
    SceneId_Menu = 1,
    SceneId_Race = 2,
    SceneId_Emblem = 3,
    SceneId_Menu2 = 4,
    SceneId_Test = 5,
    SceneId_WLMenu = 6,
    SceneId_Option = 7,
    SceneId_Record = 8,
    SceneId_Logo = 9,
    SceneId_Result = 10,
    SceneId_Nickname = 11,
    SceneId_WiFiMenu = 12,
    SceneId_Ghost = 13,
    SceneId_Keyboard = 14,
    SceneId_Ending = 15,
};

enum SecretFlags {
    SecretFlags_None = 0,
    SecretFlags_StarCupUnlock = 1,
    SecretFlags_SpecialCupUnlock = 2,
    SecretFlags_LeafCupUnlock = 4,
    SecretFlags_LightningCupUnlock = 8,
    SecretFlags_MirrorUnlocked = 16,
    SecretFlags_DryBonesUnlocked = 32,
    SecretFlags_DaisyUnlocked = 64,
    SecretFlags_WaluigiUnlocked = 128,
    SecretFlags_RobUnlocked = 256,
    SecretFlags_ExtraKartsBasicUnlocked = 512,
    SecretFlags_ExtraKartsMediumUnlocked = 1024,
    SecretFlags_ExtraKartsAllUnlocked = 2048,
};

enum BattleType {
    BattleType_BalloonBattle = 0,
    BattleType_ShineRunners = 1,
};

enum DisplayMode {
    DisplayMode_Race = 0,
    DisplayMode_TitleMenu = 1,
    DisplayMode_Replay = 2,
    DisplayMode_CourseIntro = 3,
    DisplayMode_BattleIntro = 4,
    DisplayMode_Award = 5,
    DisplayMode_StaffRoll = 6,
};

enum RaceMode {
    RaceMode_GrandPrix = 0,
    RaceMode_TimeAttack = 1,
    RaceMode_Battle = 2,
    RaceMode_VS = 3,
    RaceMode_MissionRun = 4,
    RaceMode_Net = 5,
};

enum NetErrorType {
    NetErrorType_Success = 0,
    NetErrorType_DataLoadFailure = 1,
    NetErrorType_DataWriteFailure = 2,
    NetErrorType_GamecardRemoved = 3,
    NetErrorType_Disconnected = 4,
    NetErrorType_Timeout = 5,
    NetErrorType_OpponentDisconnected = 6,
};

enum CcType {
    CcType_50cc = 0,
    CcType_100cc = 1,
    CcType_150cc = 2,
    CcType_150cc_Mirror = 3,
};

enum G2d_TextPrintFlags {
    G2d_TextPrintFlags_None = 0,
    G2d_TextPrintFlags_VerticalOriginTop = 1,
    G2d_TextPrintFlags_VerticalOriginCenter = 2,
    G2d_TextPrintFlags_VerticalOriginBottom = 4,
    G2d_TextPrintFlags_HorizontalOriginLeft = 8,
    G2d_TextPrintFlags_HorizontalOriginCenter = 16,
    G2d_TextPrintFlags_HorizontalOriginRight = 32,
    G2d_TextPrintFlags_VerticalAlignTop = 64,
    G2d_TextPrintFlags_VerticalAlignCenter = 128,
    G2d_TextPrintFlags_VerticalAlignBottom = 256,
    G2d_TextPrintFlags_HorizontalAlignLeft = 512,
    G2d_TextPrintFlags_HorizontalAlignCenter = 1024,
    G2d_TextPrintFlags_HorizontalAlignRight = 2048,
};

enum Bios_BootIndicatorType {
    Bios_BootIndicatorType_Invalid = 0,
    Bios_BootIndicatorType_Normal = 1,
    Bios_BootIndicatorType_MBChild = 2,
};

enum MountIndex {
    MountIndex_Unk0 = 0,
    MountIndex_MA2 = 1,
    MountIndex_M2L = 2,
    MountIndex_Unk3 = 3,
    MountIndex_Unk4 = 4,
    MountIndex_Unk5 = 5,
    MountIndex_KM1 = 6,
    MountIndex_KM2 = 7,
    MountIndex_KSB = 8,
    MountIndex_LOC = 9,
    MountIndex_Unk10 = 10,
    MountIndex_R2D = 11,
    MountIndex_R2L = 12,
    MountIndex_Unk13 = 13,
    MountIndex_CKS = 14,
    MountIndex_CKK = 15,
    MountIndex_GE2 = 16,
    MountIndex_G2L = 17,
    MountIndex_Unk18 = 18,
    MountIndex_Static2D = 19,
};

enum MountDataFlags {
    MountDataFlags_None = 0,
    MountDataFlags_Unk20000000 = 536870912,
};

enum OverlayStatus {
    OverlayStatus_NotLoaded = 0,
    OverlayStatus_Loaded = 1,
    OverlayStatus_Started = 2,
    OverlayStatus_Unk3 = 3,
};

enum Fs_OverlayInfoFlags {
    Fs_OverlayInfoFlags_None = 0,
    Fs_OverlayInfoFlags_Compressed = 16777216,
    Fs_OverlayInfoFlags_CheckDigest = 33554432,
};

enum BrightnessContextState {
    BrightnessContextState_FadedOut = 0,
    BrightnessContextState_FadingIn = 1,
    BrightnessContextState_FadedIn = 2,
    BrightnessContextState_FadingOut = 3,
};

enum BootMode {
    BootMode_Normal = 0,
    BootMode_Unk1 = 1,
    BootMode_Dwc = 2,
};

enum RacerAnimationType {
    RacerAnimationType_Drive = 0,
    RacerAnimationType_Spin = 1,
    RacerAnimationType_Win = 2,
    RacerAnimationType_Lose = 3,
};

enum FontType {
    FontType_LC_Font_s = 0,
    FontType_LC_Font_m = 1,
    FontType_MarioFont = 2,
};

enum SomeRaceState {
    SomeRaceState_CountdownStart = 0,
    SomeRaceState_CountdownEnd = 1,
    SomeRaceState_Unk2 = 2,
    SomeRaceState_Unk3 = 3,
    SomeRaceState_Unk4 = 4,
    SomeRaceState_Unk5 = 5,
    SomeRaceState_Unk6 = 6,
    SomeRaceState_Unk7 = 7,
    SomeRaceState_Unk8 = 8,
    SomeRaceState_Unk9 = 9,
};

enum StructP_MaybeState {
    StructP_MaybeState_Unk0 = 0,
    StructP_MaybeState_Unk1 = 1,
    StructP_MaybeState_Unk2_MaybeDownloadPlay = 2,
    StructP_MaybeState_Unk3 = 3,
};

enum ExtraKartUnlockState {
    ExtraKartUnlockState_Invalid = 0,
    ExtraKartUnlockState_NothingUnlocked = 1,
    ExtraKartUnlockState_BasicUnlock = 2,
    ExtraKartUnlockState_MediumUnlock = 3,
    ExtraKartUnlockState_TotalUnlock = 4,
};

enum CharacterKartUnlockFlags {
    CharacterKartUnlockFlags_None = 0,
    CharacterKartUnlockFlags_ExtraKartsBasicUnlock = 2,
    CharacterKartUnlockFlags_ExtraKartsMediumUnlock = 4,
    CharacterKartUnlockFlags_ExtraKartsTotalUnlock = 8,
};

enum CupResult {
    CupResult_Gold = 0,
    CupResult_Silver = 1,
    CupResult_Bronze = 2,
    CupResult_Lost = 3,
};

enum CupId {
    CupId_Nitro_Mushroom = 0,
    CupId_Nitro_Flower = 1,
    CupId_Nitro_Star = 2,
    CupId_Nitro_Special = 3,
    CupId_Retro_Shell = 4,
    CupId_Retro_Banana = 5,
    CupId_Retro_Leaf = 6,
    CupId_Retro_Lightning = 7,
    CupId_Count = 8,
};

enum PackedSecretFlag {
    PackedSecretFlag_Cup_MushroomFlowerCups_50cc = 0,
    PackedSecretFlag_Cup_MushroomFlowerCups_100cc = 1,
    PackedSecretFlag_Cup_MushroomFlowerCups_150cc = 2,
    PackedSecretFlag_Cup_MushroomFlowerCups_150cc_Mirror = 3,
    PackedSecretFlag_Cup_StarCup_50cc = 4,
    PackedSecretFlag_Cup_StarCup_100cc = 5,
    PackedSecretFlag_Cup_StarCup_150cc = 6,
    PackedSecretFlag_Cup_StarCup_150cc_Mirror = 7,
    PackedSecretFlag_Cup_ShellBananaCups_50cc = 8,
    PackedSecretFlag_Cup_ShellBananaCups_100cc = 9,
    PackedSecretFlag_Cup_ShellBananaCups_150cc = 10,
    PackedSecretFlag_Cup_ShellBananaCups_150cc_Mirror = 11,
    PackedSecretFlag_Cup_LeafCup_50cc = 12,
    PackedSecretFlag_Cup_LeafCup_100cc = 13,
    PackedSecretFlag_Cup_LeafCup_150cc = 14,
    PackedSecretFlag_Cup_LeafCup_150cc_Mirror = 15,
    PackedSecretFlag_Cup_SpecialLightningCups_150cc = 16,
    PackedSecretFlag_CharacterKart_ExtraKartBasicUnlock = 17,
    PackedSecretFlag_CharacterKart_ExtraKartMediumUnlock = 18,
    PackedSecretFlag_CharacterKart_ExtraKartTotalUnlock = 19,
    PackedSecretFlag_CharacterKart_DryBonesUnlocked = 20,
    PackedSecretFlag_CharacterKart_DaisyUnlocked = 21,
    PackedSecretFlag_CharacterKart_WaluigiUnlocked = 22,
    PackedSecretFlag_CharacterKart_RobUnlocked = 23,
    PackedSecretFlag_CategoryUnk_Unk24 = 24,
    PackedSecretFlag_Ending_AllCups = 25,
    PackedSecretFlag_Ending_AllMissions = 26,
};

enum SaveDataHeader_Flags2 {
    SaveDataHeader_Flags2_None = 0,
    SaveDataHeader_Flags2_HasUserName = 1,
    SaveDataHeader_Flags2_Unk2 = 2,
    SaveDataHeader_Flags2_Unk4 = 4,
    SaveDataHeader_Flags2_Unk8 = 8,
    SaveDataHeader_Flags2_Unk16 = 16,
};

enum EmblemColor {
    EmblemColor_Transparent = 0,
    EmblemColor_Black = 1,
    EmblemColor_White = 2,
    EmblemColor_Gray = 3,
    EmblemColor_Brown = 4,
    EmblemColor_Red = 5,
    EmblemColor_Orange = 6,
    EmblemColor_LightOrange = 7,
    EmblemColor_Yellow = 8,
    EmblemColor_LightGreen = 9,
    EmblemColor_DarkGreen = 10,
    EmblemColor_LightBlue = 11,
    EmblemColor_DarkBlue = 12,
    EmblemColor_Purple = 13,
    EmblemColor_Crimson = 14,
    EmblemColor_Pink = 15,
};

enum StructOI_Flags {
    StructOI_Flags_None = 0,
    StructOI_Flags_Initialized = 1,
    StructOI_Flags_Unk2 = 2,
    StructOI_Flags_Unk4 = 4,
    StructOI_Flags_Unk8 = 8,
};

enum KartId {
    KartId_StandardMR = 0,
    KartId_ShootingStar = 1,
    KartId_BDasher = 2,
    KartId_StandardDK = 3,
    KartId_Wildlife = 4,
    KartId_RambiRider = 5,
    KartId_StandardTD = 6,
    KartId_Mushmellow = 7,
    KartId_4WheelCradle = 8,
    KartId_StandardBW = 9,
    KartId_Hurricane = 10,
    KartId_Tyrant = 11,
    KartId_StandardPC = 12,
    KartId_LightTrippler = 13,
    KartId_Royale = 14,
    KartId_StandardWR = 15,
    KartId_Brute = 16,
    KartId_Dragonfly = 17,
    KartId_StandardYS = 18,
    KartId_Egg1 = 19,
    KartId_Cucumber = 20,
    KartId_StandardLG = 21,
    KartId_Poltergust4000 = 22,
    KartId_Streamliner = 23,
    KartId_StandardDB = 24,
    KartId_DryBomber = 25,
    KartId_Banisher = 26,
    KartId_StandardDS = 27,
    KartId_LightDancer = 28,
    KartId_PowerFlower = 29,
    KartId_StandardWL = 30,
    KartId_GoldMantis = 31,
    KartId_Zipper = 32,
    KartId_StandardRB = 33,
    KartId_ROBBLS = 34,
    KartId_ROBLGS = 35,
    KartId_StandardHH = 36,
    KartId_Count = 37,
};

enum LogoContext_Flags {
    LogoContext_Flags_None = 0,
    LogoContext_Flags_SaveDataEraseRequested = 1,
    LogoContext_Flags_SaveDataRead = 2,
};

enum FriendCodeRegisteredStatus {
    FriendCodeRegisteredStatus_NotRegistered = 0,
    FriendCodeRegisteredStatus_InvalidCode = 1,
    FriendCodeRegisteredStatus_AlreadyRegistered = 2,
};

enum ExplosionKind {
    ExplosionKind_Bombcore = 0,
    ExplosionKind_Bombcore2 = 1,
    ExplosionKind_Splash = 2,
    ExplosionKind_BakubakuWave = 3,
    ExplosionKind_MissionSplash = 4,
    ExplosionKind_Count = 5,
};

enum BrightnessContextFadeType {
    BrightnessContextFadeType_Black = 0,
    BrightnessContextFadeType_White = 1,
};

enum SaveDataIoStatus {
    SaveDataIoStatus_Unk0 = 0,
    SaveDataIoStatus_Unk1 = 1,
    SaveDataIoStatus_Unk2 = 2,
    SaveDataIoStatus_Unk3 = 3,
    SaveDataIoStatus_Unk4 = 4,
};

enum SaveDataIoError {
    SaveDataIoError_Success = 0,
    SaveDataIoError_Unk1 = 1,
    SaveDataIoError_Unk2 = 2,
    SaveDataIoError_InvalidSection = 3,
    SaveDataIoError_InvalidHeaderMagic = 4,
};

enum SaveDataIoTransferType {
    SaveDataIoTransferType_Direct = 0,
    SaveDataIoTransferType_WithBackup = 1,
    SaveDataIoTransferType_WithBackupAndRetry = 2,
};

enum SaveDataHolder_SectionFlags {
    SaveDataHolder_SectionFlags_None = 0,
    SaveDataHolder_SectionFlags_Header = 1,
    SaveDataHolder_SectionFlags_Emblem = 2,
    SaveDataHolder_SectionFlags_GrandPrix = 4,
    SaveDataHolder_SectionFlags_TimeTrials = 8,
    SaveDataHolder_SectionFlags_MissionRun = 16,
    SaveDataHolder_SectionFlags_FriendList = 32,
};

enum Rank {
    Rank_E = 0,
    Rank_D = 1,
    Rank_C = 2,
    Rank_B = 3,
    Rank_A = 4,
    Rank_Star1 = 5,
    Rank_Star2 = 6,
    Rank_Star3 = 7,
    Rank_Invalid = 9,
};

enum GhostType {
    GhostType_Personal = 0,
    GhostType_Download = 1,
    GhostType_Staff = 2,
    GhostType_Invalid = 3,
};

enum AnimationFormat {
    AnimationFormat_BCA_JNT = 0,
    AnimationFormat_BTA_SRT = 1,
    AnimationFormat_BTP_PAT = 2,
    AnimationFormat_BVA_VIS = 3,
    AnimationFormat_BMA_MAT = 4,
};

enum Wm_Result {
    Wm_Result_Ok = 0,
    Wm_Result_Unk2 = 2,
    Wm_Result_InitializationIssue = 3,
    Wm_Result_FifoHandlerNotReady = 4,
    Wm_Result_InvalidParams = 6,
};

enum OverlayKind {
    OverlayKind_Unk0 = 0,
    OverlayKind_Unk1 = 1,
    OverlayKind_Unk2 = 2,
    OverlayKind_Unk3 = 3,
    OverlayKind_Invalid = 4,
};

enum RaceFinishStatus {
    RaceFinishStatus_NotFinished = 0,
    RaceFinishStatus_FinishedSuccess = 1,
    RaceFinishStatus_Unk2SomeFinished = 2,
    RaceFinishStatus_FinishedFailure = 3,
    RaceFinishStatus_Unk4 = 4,
};

enum CourseMode {
    CourseMode_Choose = 0,
    CourseMode_InOrder = 1,
    CourseMode_Random = 2,
};

enum CourseRules {
    CourseRules_Free = 0,
    CourseRules_WinAmount = 1,
    CourseRules_RaceAmount = 2,
};

enum RaceOptionMenuKind {
    RaceOptionMenuKind_Unk0 = 0,
    RaceOptionMenuKind_Unk1 = 1,
    RaceOptionMenuKind_Unk2 = 2,
    RaceOptionMenuKind_OnDisplay = 3,
};

enum TextSystemContext_Kind {
    TextSystemContext_Kind_Progress = 0,
    TextSystemContext_Kind_SingleButton = 1,
    TextSystemContext_Kind_DoubleButton = 2,
};

enum SaveDataReadResult {
    SaveDataReadResult_Failure = 0,
    SaveDataReadResult_Corrupted = 3,
    SaveDataReadResult_FailureMagicError = 4,
};

enum PlayerProfileInfo_Flag {
    PlayerProfileInfo_Flag_None = 0,
    PlayerProfileInfo_Flag_Unk1 = 1,
};

enum FriendCodeState {
    FriendCodeState_Unk0 = 0,
    FriendCodeState_Unk1 = 1,
    FriendCodeState_Unk2 = 2,
    FriendCodeState_Unk3 = 3,
};

enum LogoContext_State {
    LogoContext_State_ReadSaveData = 0,
    LogoContext_State_WaitCheckSaveData = 1,
    LogoContext_State_NotifySaveDataCorrupted = 2,
    LogoContext_State_EraseCorruptedSaveData = 3,
    LogoContext_State_NotifyCorruptedSaveDataErased = 4,
    LogoContext_State_AskEraseSaveData = 5,
    LogoContext_State_EraseSaveData = 6,
    LogoContext_State_NotifySaveDataErased = 7,
    LogoContext_State_CheckWiFiStatus = 8,
    LogoContext_State_NotifyWiFiIdIssue = 9,
    LogoContext_State_NotifyWiFiHelp = 10,
    LogoContext_State_Done = 11,
};

enum TextSystem_FadeY {
    TextSystem_FadeY_160 = 0,
    TextSystem_FadeY_Neg176 = 1,
};

enum InterpolationKind {
    InterpolationKind_Linear = 0,
    InterpolationKind_SmoothTrig = 1,
};

enum SceneState {
    SceneState_Initializing = 0,
    SceneState_FadingIn = 1,
    SceneState_Running = 2,
    SceneState_FadingOut = 3,
    SceneState_WaitingForFinalize = 4,
    SceneState_Finalizing = 5,
    SceneState_Idle = 6,
};

enum DisplayConfigFlags {
    DisplayConfigFlags_None = 0,
    DisplayConfigFlags_BeforeVblank = 1,
    DisplayConfigFlags_FrameTimeExceeded = 2,
};

enum DisplayBg23Mode {
    DisplayBg23Mode_Text = 1,
    DisplayBg23Mode_Affine = 2,
    DisplayBg23Mode_AffineEx = 3,
    DisplayBg23Mode_256Bmp = 4,
    DisplayBg23Mode_DcBmp = 5,
};

enum PortraitKind {
    PortraitKind_Medium = 0,
    PortraitKind_Large = 1,
};

enum InputUnitMode {
    InputUnitMode_Disabled = 0,
    InputUnitMode_Replayer = 1,
    InputUnitMode_Recorder = 2,
    InputUnitMode_Virtual = 3,
    InputUnitMode_Unk4 = 4,
    InputUnitMode_Master = 5,
    InputUnitMode_Direct = 6,
    InputUnitMode_WiFi = 7,
};

enum SystemContext_Flags {
    SystemContext_Flags_None = 0,
    SystemContext_Flags_IsSeqPlaying = 1,
    SystemContext_Flags_IsSeqLoaded = 2,
    SystemContext_Flags_IsMBChild = 4,
    SystemContext_Flags_UseG3dFastDma = 8,
};

enum SystemContext_OverlayState {
    SystemContext_OverlayState_Unk0 = 0,
    SystemContext_OverlayState_Unk1 = 1,
    SystemContext_OverlayState_Multiplayer = 2,
    SystemContext_OverlayState_WiFi = 3,
    SystemContext_OverlayState_WiFiUtil = 4,
};

enum CpuMode {
    CpuMode_None = 0,
    CpuMode_Easy = 1,
    CpuMode_Normal = 2,
    CpuMode_Hard = 3,
};

enum DriverStatus_Flags {
    DriverStatus_Flags_None = 0,
    DriverStatus_Flags_IsPlayer = 1,
    DriverStatus_Flags_Unk1 = 2,
    DriverStatus_Flags_WrongDirection = 4,
    DriverStatus_Flags_Unk3 = 8,
    DriverStatus_Flags_MissionRunWinDelay = 16,
    DriverStatus_Flags_MissionRunLoseDelay = 32,
    DriverStatus_Flags_PerformFinish = 64,
};

enum DriverCollisionReaction {
    DriverCollisionReaction_None = 0,
    DriverCollisionReaction_Unk1 = 1,
    DriverCollisionReaction_SpinOut = 2,
    DriverCollisionReaction_ForwardFlip = 3,
    DriverCollisionReaction_BackwardFlip = 4,
    DriverCollisionReaction_DoubleBackwardFlip = 5,
    DriverCollisionReaction_ThrowUp = 6,
};

enum DriverCollisionType {
    DriverCollisionType_Road = 0,
    DriverCollisionType_Unk1 = 1,
    DriverCollisionType_OffRoadWeak = 2,
    DriverCollisionType_OffRoad = 3,
    DriverCollisionType_OffRoadHeavy = 4,
    DriverCollisionType_SlipperyRoad1 = 5,
    DriverCollisionType_SlipperyRoad2 = 6,
    DriverCollisionType_Unk7 = 7,
    DriverCollisionType_Boost = 8,
    DriverCollisionType_CannonActivator = 9,
    DriverCollisionType_FallsWater = 10,
    DriverCollisionType_Looping = 11,
};

enum DriverNetworkFlags {
    DriverNetworkFlags_None = 0,
    DriverNetworkFlags_MiniJump = 1,
    DriverNetworkFlags_Bit1 = 2,
    DriverNetworkFlags_SingleSpinoutStart = 4,
    DriverNetworkFlags_DoubleSpinoutStart = 8,
    DriverNetworkFlags_ForwardFlipStart = 16,
    DriverNetworkFlags_SingleBackwardFlipStart = 32,
    DriverNetworkFlags_DoubleBackwardFlipStart = 64,
    DriverNetworkFlags_Unk7 = 128,
    DriverNetworkFlags_Unk8 = 256,
    DriverNetworkFlags_Unk9 = 512,
    DriverNetworkFlags_Unk10 = 1024,
    DriverNetworkFlags_Unk11 = 2048,
    DriverNetworkFlags_Unk12 = 4096,
    DriverNetworkFlags_StarInvincibleStart = 8192,
    DriverNetworkFlags_ThunderInvoke = 16384,
    DriverNetworkFlags_ThunderShrinkStart = 32768,
    DriverNetworkFlags_Unk16 = 65536,
    DriverNetworkFlags_ThrowUpStart = 131072,
    DriverNetworkFlags_SlipstreamStart = 262144,
    DriverNetworkFlags_GessoInkStart = 524288,
    DriverNetworkFlags_KillerStart = 1048576,
    DriverNetworkFlags_KillerFinish = 2097152,
    DriverNetworkFlags_Unk22 = 4194304,
    DriverNetworkFlags_Unk23 = 8388608,
    DriverNetworkFlags_Unk24 = 16777216,
    DriverNetworkFlags_Unk25 = 33554432,
    DriverNetworkFlags_TeresaStart = 67108864,
    DriverNetworkFlags_Unk27 = 134217728,
    DriverNetworkFlags_Unk28 = 268435456,
    DriverNetworkFlags_Unk29 = 536870912,
    DriverNetworkFlags_Unk30 = 1073741824,
};

enum Driver_FlagsB {
    Driver_FlagsB_None = 0,
    Driver_FlagsB_InLoop = 1,
    Driver_FlagsB_AButton = 2,
    Driver_FlagsB_BButton = 4,
    Driver_FlagsB_DpadLeft = 8,
    Driver_FlagsB_DpadRight = 16,
    Driver_FlagsB_Boost = 32,
    Driver_FlagsB_Respawning = 64,
    Driver_FlagsB_WheelSpinning = 128,
    Driver_FlagsB_Unk8 = 256,
    Driver_FlagsB_Unk9 = 512,
    Driver_FlagsB_Unk10 = 1024,
    Driver_FlagsB_Unk11 = 2048,
    Driver_FlagsB_Unk12 = 4096,
    Driver_FlagsB_ForceStop = 8192,
    Driver_FlagsB_Unk14 = 16384,
    Driver_FlagsB_StartBoost = 32768,
    Driver_FlagsB_Cannon = 65536,
    Driver_FlagsB_Unk17 = 131072,
    Driver_FlagsB_Unk18 = 262144,
    Driver_FlagsB_DriftBoost = 524288,
    Driver_FlagsB_ShroomBoost = 1048576,
    Driver_FlagsB_SfxTriggerHandled = 2097152,
    Driver_FlagsB_MinSpeedBoost = 4194304,
    Driver_FlagsB_WaterRespawn = 8388608,
    Driver_FlagsB_YouganRespawn = 16777216,
    Driver_FlagsB_RespawnStart = 33554432,
    Driver_FlagsB_DossunSmashCam = 67108864,
    Driver_FlagsB_Unk27 = 134217728,
    Driver_FlagsB_OnJumpPad = 268435456,
    Driver_FlagsB_Unk29 = 536870912,
    Driver_FlagsB_AntiGravityCam = 1073741824,
    Driver_FlagsB_Unk31InvertUnk100Quaternion = 2147483648,
};

enum Driver_FlagsA {
    Driver_FlagsA_None = 0,
    Driver_FlagsA_Unk0 = 1,
    Driver_FlagsA_Unk1 = 2,
    Driver_FlagsA_Unk2 = 4,
    Driver_FlagsA_IsDrifting = 8,
    Driver_FlagsA_IsOnFloor = 16,
    Driver_FlagsA_IsTouchingDriver = 32,
    Driver_FlagsA_IsTouchingMapObjectWall = 64,
    Driver_FlagsA_IsTouchingWall = 128,
    Driver_FlagsA_IsGoingBackwards = 256,
    Driver_FlagsA_Unk9 = 512,
    Driver_FlagsA_Unk10 = 1024,
    Driver_FlagsA_Unk11 = 2048,
    Driver_FlagsA_Unk12 = 4096,
    Driver_FlagsA_Unk13 = 8192,
    Driver_FlagsA_Unk14 = 16384,
    Driver_FlagsA_Unk15 = 32768,
    Driver_FlagsA_Unk16 = 65536,
    Driver_FlagsA_Unk17 = 131072,
    Driver_FlagsA_Unk18 = 262144,
    Driver_FlagsA_Unk19 = 524288,
    Driver_FlagsA_IsOnFallsWater = 1048576,
    Driver_FlagsA_Unk21 = 2097152,
    Driver_FlagsA_Unk22 = 4194304,
    Driver_FlagsA_Unk23 = 8388608,
    Driver_FlagsA_IsAwardOrStaffRoll = 16777216,
    Driver_FlagsA_Unk25 = 33554432,
    Driver_FlagsA_Unk26 = 67108864,
    Driver_FlagsA_Unk27 = 134217728,
    Driver_FlagsA_Unk28 = 268435456,
    Driver_FlagsA_Unk29 = 536870912,
    Driver_FlagsA_Unk30 = 1073741824,
    Driver_FlagsA_Unk31 = 2147483648,
};

enum Driver_FlagsC {
    Driver_FlagsC_None = 0,
    Driver_FlagsC_Unk0 = 1,
    Driver_FlagsC_Unk1 = 2,
    Driver_FlagsC_Unk2 = 4,
    Driver_FlagsC_Unk3 = 8,
    Driver_FlagsC_Unk4 = 16,
    Driver_FlagsC_SpinOut = 32,
    Driver_FlagsC_StarInvincible = 64,
    Driver_FlagsC_ThunderShrink = 128,
    Driver_FlagsC_Growing = 256,
    Driver_FlagsC_Unk9 = 512,
    Driver_FlagsC_Unk10 = 1024,
    Driver_FlagsC_Unk11 = 2048,
    Driver_FlagsC_Unk12 = 4096,
    Driver_FlagsC_SlipstreamFull = 8192,
    Driver_FlagsC_SlipstreamBegin = 16384,
    Driver_FlagsC_Unk15 = 32768,
    Driver_FlagsC_DossunFlat = 65536,
    Driver_FlagsC_GessoInkFadingOut = 131072,
    Driver_FlagsC_Unk18 = 262144,
    Driver_FlagsC_Unk19 = 524288,
    Driver_FlagsC_Unk20 = 1048576,
    Driver_FlagsC_Unk21 = 2097152,
    Driver_FlagsC_Unk22 = 4194304,
    Driver_FlagsC_Unk23 = 8388608,
    Driver_FlagsC_Unk24 = 16777216,
    Driver_FlagsC_Unk25 = 33554432,
    Driver_FlagsC_Unk26 = 67108864,
    Driver_FlagsC_GessoInk = 134217728,
    Driver_FlagsC_KillerMode = 268435456,
    Driver_FlagsC_StartFailure = 536870912,
    Driver_FlagsC_FallsWater = 1073741824,
    Driver_FlagsC_Unk31 = 2147483648,
};

enum Driver_FlagsD {
    Driver_FlagsD_None = 0,
    Driver_FlagsD_IsPlayer = 1,
    Driver_FlagsD_IsEnemy = 2,
    Driver_FlagsD_IsGhost = 4,
    Driver_FlagsD_Unk3 = 8,
    Driver_FlagsD_CharacterHasNsbcaAnimation = 16,
    Driver_FlagsD_IsBeingKilled = 32,
    Driver_FlagsD_IsKilled = 64,
    Driver_FlagsD_Unk7 = 128,
    Driver_FlagsD_Unk8 = 256,
    Driver_FlagsD_IsNetworkPlayer = 512,
    Driver_FlagsD_IsNetworkNonPlayer = 1024,
    Driver_FlagsD_Unk11 = 2048,
    Driver_FlagsD_Unk12 = 4096,
    Driver_FlagsD_TeresaEffectActive = 8192,
    Driver_FlagsD_TeresaFlicker = 16384,
    Driver_FlagsD_TeresaRenderingOff = 32768,
    Driver_FlagsD_Unk16 = 65536,
    Driver_FlagsD_Unk17 = 131072,
    Driver_FlagsD_MgKill = 262144,
    Driver_FlagsD_Unk19 = 524288,
    Driver_FlagsD_Unk20 = 1048576,
    Driver_FlagsD_Unk21 = 2097152,
    Driver_FlagsD_MgKillGhost = 4194304,
    Driver_FlagsD_Unk23 = 8388608,
    Driver_FlagsD_Unk24 = 16777216,
    Driver_FlagsD_Unk25 = 33554432,
    Driver_FlagsD_Unk26 = 67108864,
    Driver_FlagsD_Unk27_InTimeAttackAwardOrStaffRoll = 134217728,
    Driver_FlagsD_Unk28 = 268435456,
    Driver_FlagsD_Unk29 = 536870912,
};

enum DriverCollisionMode {
    DriverCollisionMode_Normal = 0,
    DriverCollisionMode_Star = 1,
    DriverCollisionMode_Teresa = 2,
    DriverCollisionMode_Killer = 3,
};

enum DriverVoiceId {
    DriverVoiceId_DK = 0,
    DriverVoiceId_Kinopio_Toad = 1,
    DriverVoiceId_Bowser = 2,
    DriverVoiceId_Luigi = 3,
    DriverVoiceId_Mario = 4,
    DriverVoiceId_Peach = 5,
    DriverVoiceId_Wario = 6,
    DriverVoiceId_Yoshi = 7,
    DriverVoiceId_Daisy = 8,
    DriverVoiceId_Waluigi = 9,
    DriverVoiceId_DryBones = 10,
    DriverVoiceId_ROB = 11,
    DriverVoiceId_Heyho_ShyGuy = 12,
};

enum Pm_BacklightFlags {
    None = 0,
};

/* Structs (404 total) */

typedef struct Os_Thread Os_Thread;

typedef struct Fs_File Fs_File;

typedef struct MemFRMHeapSub MemFRMHeapSub;

typedef struct Mem_FrameHeapHead Mem_FrameHeapHead;

typedef struct Fs_Archive Fs_Archive;

typedef struct Fs_OverlayInfo Fs_OverlayInfo;

typedef struct GammaFuncsStruct GammaFuncsStruct;

typedef struct SigmaStruct SigmaStruct;

typedef struct Fs_FileId Fs_FileId;

typedef struct BetaStruct BetaStruct;

typedef struct Os_ThreadQueue Os_ThreadQueue;

typedef struct StructG StructG;

typedef struct ExecutionContext ExecutionContext;

typedef struct CarcNames CarcNames;

typedef struct SceneOverlayConfig SceneOverlayConfig;

typedef struct VecFx32 VecFx32;

typedef struct SystemContext SystemContext;

typedef struct Mem_HeapHead Mem_HeapHead;

typedef struct Mem_ExpHeapHead Mem_ExpHeapHead;

typedef struct NARC_FNTFIMGBlock NARC_FNTFIMGBlock;

typedef struct StructH StructH;

typedef struct CommonBlockHeader CommonBlockHeader;

typedef struct MountArchiveEntry MountArchiveEntry;

typedef struct MountData MountData;

typedef struct PaletteBlock PaletteBlock;

typedef struct MountArchiveLoader MountArchiveLoader;

typedef struct LzDecompressContext LzDecompressContext;

typedef struct DisplayConfig DisplayConfig;

typedef struct Display3DConfig Display3DConfig;

typedef struct Mem_ExpHeapMemoryBlockHead Mem_ExpHeapMemoryBlockHead;

typedef struct Mem_MemoryRegion Mem_MemoryRegion;

typedef struct Mem_HeapHead_Frame Mem_HeapHead_Frame;

typedef struct NNSFndList NNSFndList;

typedef struct GlobalHeapHolder GlobalHeapHolder;

typedef struct File_FatEntry File_FatEntry;

typedef struct Os_ThreadInfo Os_ThreadInfo;

typedef struct Os_Mutex Os_Mutex;

typedef struct Arm_MathContext Arm_MathContext;

typedef struct Mem_FrameHeapState Mem_FrameHeapState;

typedef struct IntrusiveListNode IntrusiveListNode;

typedef struct SaveDataHolder SaveDataHolder;

typedef struct GhostHeader GhostHeader;

typedef struct GhostHolder GhostHolder;

typedef struct File_FntEntry File_FntEntry;

typedef struct Fs_SyncReader Fs_SyncReader;

typedef struct File_ProcessedFntEntry File_ProcessedFntEntry;

typedef struct Struct2D Struct2D;

typedef struct Mem_ExpHeapMemoryBlockList Mem_ExpHeapMemoryBlockList;

typedef union Mem_CommonHeapHead Mem_CommonHeapHead;

typedef union File_OperationContext File_OperationContext;

typedef struct File_OperationContext_Op01 File_OperationContext_Op01;

typedef struct File_OperationContext_Op6 File_OperationContext_Op6;

typedef struct File_OperationContext_Op2 File_OperationContext_Op2;

typedef struct File_OperationContext_Op2_1 File_OperationContext_Op2_1;

typedef struct File_OperationContext_Op2_2 File_OperationContext_Op2_2;

typedef struct File_OperationContext_Op3 File_OperationContext_Op3;

typedef struct File_OperationContext_Op5 File_OperationContext_Op5;

typedef struct File_OperationContext_Op5_1 File_OperationContext_Op5_1;

typedef struct File_OperationContext_Op5_2 File_OperationContext_Op5_2;

typedef struct BrightnessContext BrightnessContext;

typedef struct MountExtra MountExtra;

typedef struct File_OperationContext_Op7 File_OperationContext_Op7;

typedef struct Os_PersonalData Os_PersonalData;

typedef struct Bios_PersonalData Bios_PersonalData;

typedef struct Os_Lock Os_Lock;

typedef struct LogoContext LogoContext;

typedef struct NavigationContext NavigationContext;

typedef struct StateDualHandler StateDualHandler;

typedef struct StructM StructM;

typedef struct DisplayEngineConfig DisplayEngineConfig;

typedef struct StructV StructV;

typedef struct Os_Alarm Os_Alarm;

typedef struct WorkerContext WorkerContext;

typedef struct SaveDataSection_FriendList SaveDataSection_FriendList;

typedef struct SaveDataSection_Header SaveDataSection_Header;

typedef struct SaveDataSection_PersonalGhost SaveDataSection_PersonalGhost;

typedef struct SaveDataSection_GrandPrix SaveDataSection_GrandPrix;

typedef struct SaveDataSection_MissionRun SaveDataSection_MissionRun;

typedef struct SaveDataIoManager SaveDataIoManager;

typedef struct StructOI StructOI;

typedef struct Card_Context Card_Context;

typedef struct Card_Command Card_Command;

typedef struct StructMTM StructMTM;

typedef struct StructTM StructTM;

typedef struct Bios_CardHeaderStart Bios_CardHeaderStart;

typedef struct StructCH StructCH;

typedef struct StructZE StructZE;

typedef struct StructDW StructDW;

typedef struct SaveDataSection_Emblem SaveDataSection_Emblem;

typedef struct Bios_CardHeader Bios_CardHeader;

typedef struct LogoScreenGraphics LogoScreenGraphics;

typedef struct CharGraphicsBlock CharGraphicsBlock;

typedef struct SelectChoisesContext SelectChoisesContext;

typedef struct G2d_Font G2d_Font;

typedef struct NFTR_FNIFBlock NFTR_FNIFBlock;

typedef struct CommonHeader CommonHeader;

typedef struct NavigationContextParams NavigationContextParams;

typedef struct PlayerGfxData PlayerGfxData;

typedef struct SceneExecutionContext SceneExecutionContext;

typedef struct SceneInfo SceneInfo;

typedef struct StructPK StructPK;

typedef struct FriendCode FriendCode;

typedef struct StructCA StructCA;

typedef struct OverlayManager OverlayManager;

typedef struct DTCMRegion DTCMRegion;

typedef struct RaceConfigManager RaceConfigManager;

typedef struct Fs_OverlayTable Fs_OverlayTable;

typedef struct StructBin StructBin;

typedef struct RaceStatus RaceStatus;

typedef struct StructPE StructPE;

typedef struct StructRT StructRT;

typedef struct ExplosionManager ExplosionManager;

typedef struct StructHN StructHN;

typedef struct Crt0_StartModuleParams Crt0_StartModuleParams;

typedef struct FFData FFData;

typedef struct Card_RomContext Card_RomContext;

typedef struct Crt0_RegionCopyInfo Crt0_RegionCopyInfo;

typedef struct Os_IrqSpecialHandlerList Os_IrqSpecialHandlerList;

typedef struct Os_IrqSpecialHandlerEntry Os_IrqSpecialHandlerEntry;

typedef struct Bios_PersonalDataPacked Bios_PersonalDataPacked;

typedef struct StructRacer StructRacer;

typedef struct StructStaffRoll StructStaffRoll;

typedef struct StructCE StructCE;

typedef struct StructCESub StructCESub;

typedef struct Model Model;

typedef struct StructYE StructYE;

typedef struct StructYH StructYH;

typedef struct StructFX StructFX;

typedef struct StructFY StructFY;

typedef struct StructTK StructTK;

typedef struct NkmKTPJ NkmKTPJ;

typedef struct NkmCPOI NkmCPOI;

typedef struct Vector2 Vector2;

typedef struct NkmCPAT NkmCPAT;

typedef struct NkmAREA NkmAREA;

typedef struct NkmCAME NkmCAME;

typedef struct NkmPATH NkmPATH;

typedef struct NkmPathEntry NkmPathEntry;

typedef struct NkmIPAT NkmIPAT;

typedef struct NkmIpatEntry NkmIpatEntry;

typedef struct NkmIPOI NkmIPOI;

typedef struct StructTD StructTD;

typedef struct SceneExecutionStatus SceneExecutionStatus;

typedef struct StructCESex StructCESex;

typedef struct StructN StructN;

typedef struct TitleContext TitleContext;

typedef struct StructAA StructAA;

typedef struct StructRE StructRE;

typedef struct KclHeader KclHeader;

typedef struct StructRaceIntro StructRaceIntro;

typedef struct StructMapObject StructMapObject;

typedef struct BillboardModel BillboardModel;

typedef struct StructAA04 StructAA04;

typedef struct ModelResource ModelResource;

typedef struct StructB4A4 StructB4A4;

typedef struct StructAD00 StructAD00;

typedef struct CharacterKartContext CharacterKartContext;

typedef struct Animation Animation;

typedef struct NkmPOIT NkmPOIT;

typedef struct StructAD00Sh StructAD00Sh;

typedef struct StructB488 StructB488;

typedef struct DisplayBg01Config DisplayBg01Config;

typedef struct Arm_Context Arm_Context;

typedef struct Os_AlarmQueue Os_AlarmQueue;

typedef struct Arm_ExceptionContext Arm_ExceptionContext;

typedef struct Bios_SharedRegion Bios_SharedRegion;

typedef struct Gfx_State Gfx_State;

typedef struct NNSG3dResTex_Tex0Block NNSG3dResTex_Tex0Block;

typedef struct StructLU StructLU;

typedef struct StructNS StructNS;

typedef struct StructTP StructTP;

typedef struct CalibrationData CalibrationData;

typedef struct Dict_Header Dict_Header;

typedef struct StructAR StructAR;

typedef struct StructARSub StructARSub;

typedef struct Rtc_Context Rtc_Context;

typedef struct OverlayEntry OverlayEntry;

typedef struct NkmKTPS NkmKTPS;

typedef struct NkmAreaListEntry NkmAreaListEntry;

typedef struct StructB43C StructB43C;

typedef struct Fs_FileList Fs_FileList;

typedef struct Fs_DirectoryPosition Fs_DirectoryPosition;

typedef union Fs_File_OperationArg Fs_File_OperationArg;

typedef struct Fs_File_OperationArg_Read Fs_File_OperationArg_Read;

typedef struct Fs_File_OperationArg_Write Fs_File_OperationArg_Write;

typedef struct Fs_File_OperationArg_FindPath Fs_File_OperationArg_FindPath;

typedef struct Fs_File_OperationArg_SeekDirectory Fs_File_OperationArg_SeekDirectory;

typedef struct Fs_File_OperationArg_OpenFileRaw Fs_File_OperationArg_OpenFileRaw;

typedef struct Fs_File_OperationArg_OpenFileById Fs_File_OperationArg_OpenFileById;

typedef union Fs_File_Entry Fs_File_Entry;

typedef struct Fs_File_Entry_File Fs_File_Entry_File;

typedef struct Fs_File_Entry_Directory Fs_File_Entry_Directory;

typedef struct PhysicalParamContext PhysicalParamContext;

typedef struct Nkm_STAG Nkm_STAG;

typedef struct StructAED0 StructAED0;

typedef struct StructB3F0 StructB3F0;

typedef struct Struct59C4 Struct59C4;

typedef struct Struct5624 Struct5624;

typedef struct Struct59C4Sub Struct59C4Sub;

typedef struct StructTEQ StructTEQ;

typedef struct StructStaffRollStuff StructStaffRollStuff;

typedef struct G2d_Sprite G2d_Sprite;

typedef struct StructB350 StructB350;

typedef struct Os_CartridgeModuleInfo Os_CartridgeModuleInfo;

typedef struct Struct1A44 Struct1A44;

typedef struct StructTEQSub StructTEQSub;

typedef struct G2d_Text G2d_Text;

typedef struct StructB3C4 StructB3C4;

typedef struct SaveDataSection_TimeTrial SaveDataSection_TimeTrial;

typedef struct TextSystemParams TextSystemParams;

typedef struct SaveDataGrandPrixCcEntry SaveDataGrandPrixCcEntry;

typedef struct SaveDataGrandPrixCupRecordEntry SaveDataGrandPrixCupRecordEntry;

typedef struct StructCP StructCP;

typedef struct StructBAN StructBAN;

typedef struct SaveDataMissionRunLevelEntry SaveDataMissionRunLevelEntry;

typedef struct StructMissionLevelStageInfo StructMissionLevelStageInfo;

typedef struct DriverStatus DriverStatus;

typedef struct Mdl0_BlockDictHeader Mdl0_BlockDictHeader;

typedef struct StructPA StructPA;

typedef struct NFTR_CharacterWidthBlockImpl NFTR_CharacterWidthBlockImpl;

typedef struct StructFON StructFON;

typedef struct NFTR_CharacterMapBlockImpl NFTR_CharacterMapBlockImpl;

typedef struct NFTR_CharacterWidthBlockTileEntry NFTR_CharacterWidthBlockTileEntry;

typedef struct StructHD StructHD;

typedef struct TimeTrialRecordEntry TimeTrialRecordEntry;

typedef struct SaveDataTimeTrialRecordListEntry SaveDataTimeTrialRecordListEntry;

typedef struct StructE8 StructE8;

typedef struct SaveDataTimeTrialCourseRecordEntry SaveDataTimeTrialCourseRecordEntry;

typedef struct StructEC StructEC;

typedef struct StructZESub40 StructZESub40;

typedef struct RaceTime RaceTime;

typedef struct Sound_Sdat Sound_Sdat;

typedef struct Sound_SdatHeader Sound_SdatHeader;

typedef struct Sound_Context Sound_Context;

typedef struct Sound_AllocationEntryHeader Sound_AllocationEntryHeader;

typedef struct StructGO StructGO;

typedef struct StructGA StructGA;

typedef struct StructCX StructCX;

typedef struct Sound_InfoBlockHeader Sound_InfoBlockHeader;

typedef struct Sound_InfoRecord Sound_InfoRecord;

typedef struct Sound_SwarInfo Sound_SwarInfo;

typedef struct Sound_FatEntry Sound_FatEntry;

typedef struct Sound_FatBlockHeader Sound_FatBlockHeader;

typedef struct Sound_SbnkInfo Sound_SbnkInfo;

typedef struct Sound_SwarHeader Sound_SwarHeader;

typedef struct Sound_SseqInfo Sound_SseqInfo;

typedef struct Sound_SarcInfo Sound_SarcInfo;

typedef struct StructVA StructVA;

typedef struct StructVO StructVO;

typedef struct Sound_GroupInfoFile Sound_GroupInfoFile;

typedef struct Os_MutexQueue Os_MutexQueue;

typedef struct Sound_Alarm Sound_Alarm;

typedef struct StructIG StructIG;

typedef struct Rtc_Date Rtc_Date;

typedef struct Util_PrintContext Util_PrintContext;

typedef struct StructAN StructAN;

typedef struct StructANN StructANN;

typedef struct StructDWW StructDWW;

typedef struct PlayerProfileInfo PlayerProfileInfo;

typedef struct BMG_Header BMG_Header;

typedef struct KartOffsetDataEntry KartOffsetDataEntry;

typedef struct CharacterKartContextSub54 CharacterKartContextSub54;

typedef struct CharacterKartContextSub54Sub0 CharacterKartContextSub54Sub0;

typedef struct StructCAS StructCAS;

typedef struct StructKTB StructKTB;

typedef struct Os_MessageQueue Os_MessageQueue;

typedef struct DriverConfig DriverConfig;

typedef struct OamBuffer OamBuffer;

typedef struct StructB358 StructB358;

typedef struct RaceOptionMenuManager RaceOptionMenuManager;

typedef struct RaceOptionMenuEntryDrawContext RaceOptionMenuEntryDrawContext;

typedef struct RaceOptionMenuEntry RaceOptionMenuEntry;

typedef struct StructCL StructCL;

typedef struct G2d_Glyph G2d_Glyph;

typedef struct StructRCX StructRCX;

typedef struct MountManager MountManager;

typedef struct StructNKPGFlags StructNKPGFlags;

typedef struct NkmOBJI NkmOBJI;

typedef struct DriverList DriverList;

typedef struct DriverContext DriverContext;

typedef struct StructRK StructRK;

typedef struct SkillRankpoints SkillRankpoints;

typedef struct RanktimeGp RanktimeGp;

typedef struct RanktimeCourseEntry RanktimeCourseEntry;

typedef struct NkmKTPM NkmKTPM;

typedef struct StructBO StructBO;

typedef struct StructBOA StructBOA;

typedef struct StructBOC StructBOC;

typedef struct StructMD StructMD;

typedef struct StructBM StructBM;

typedef struct StructA StructA;

typedef struct Sound_SymbHeader Sound_SymbHeader;

typedef struct Sound_FileBlockHeader Sound_FileBlockHeader;

typedef struct Sound_GroupInfo Sound_GroupInfo;

typedef struct Sound_Command Sound_Command;

typedef struct Rtc_Time Rtc_Time;

typedef struct Bmg_Inf1Block Bmg_Inf1Block;

typedef struct Bmg_Dat1Block Bmg_Dat1Block;

typedef struct NARC_FATBlock NARC_FATBlock;

typedef struct KartPhysicalParam KartPhysicalParam;

typedef struct StructB3EC StructB3EC;

typedef struct StructDP StructDP;

typedef struct NkmKTPC NkmKTPC;

typedef struct NkmEPOI NkmEPOI;

typedef struct NkmEPAT NkmEPAT;

typedef struct KartCrsmat KartCrsmat;

typedef struct NsbtxHeader NsbtxHeader;

typedef struct NsbcaHeader NsbcaHeader;

typedef struct Jnt0Block Jnt0Block;

typedef struct StructT5 StructT5;

typedef struct StructVC StructVC;

typedef struct StructB StructB;

typedef struct TextSystemContext TextSystemContext;

typedef struct StructPR StructPR;

typedef struct InputUnit InputUnit;

typedef struct StructCYT StructCYT;

typedef struct KeyboardContext KeyboardContext;

typedef struct StructKeyboardOam StructKeyboardOam;

typedef struct StructNN StructNN;

typedef struct StructLUSub StructLUSub;

typedef struct StructLUMax StructLUMax;

typedef struct StructCE0 StructCE0;

typedef struct GXOamAttr GXOamAttr;

typedef struct DisplayBg23Config DisplayBg23Config;

typedef struct GhostTime GhostTime;

typedef struct Quaternion Quaternion;

typedef struct RaceConfig RaceConfig;

typedef struct GhostHeaderEx GhostHeaderEx;

typedef struct SaveDataSection_NKFE SaveDataSection_NKFE;

typedef struct SaveDataMissionRunLevelStageEntry SaveDataMissionRunLevelStageEntry;

typedef struct InputRecorder InputRecorder;

typedef struct CellBank CellBank;

typedef struct CellBankMetatileEntry CellBankMetatileEntry;

typedef struct InputTouchUnit InputTouchUnit;

typedef struct StructCYB StructCYB;

typedef struct StructEPOIX StructEPOIX;

typedef struct StructLUEntry StructLUEntry;

typedef struct StructMLSub StructMLSub;

typedef struct Dict_DataInfoBlockHeader Dict_DataInfoBlockHeader;

typedef struct NNSG3dResMdl_Mdl0ModelBlock NNSG3dResMdl_Mdl0ModelBlock;

typedef struct StructItemHolder StructItemHolder;

typedef struct Matrix4x3 Matrix4x3;

typedef struct StructDC StructDC;

typedef struct StructDCSub StructDCSub;

typedef struct StructDCInner StructDCInner;

typedef struct StructPRSub StructPRSub;

typedef struct StaffGhost StaffGhost;

typedef struct StructExplosionInstance StructExplosionInstance;

typedef struct StructTrophyResult StructTrophyResult;

typedef struct NNSG3dAnmObj NNSG3dAnmObj;

typedef struct Jnt0Joint Jnt0Joint;

typedef struct StructAER StructAER;

typedef struct StructAERSub StructAERSub;

typedef struct StructAERSubSub StructAERSubSub;

typedef struct StructG3 StructG3;

typedef struct VecFx16 VecFx16;

typedef struct KartAIParamEntry KartAIParamEntry;

typedef struct KartAIParamCcEntry KartAIParamCcEntry;

typedef struct KartAIParam KartAIParam;

typedef struct Matrix3x3 Matrix3x3;

typedef struct Matrix4x4 Matrix4x4;

typedef struct StructAEBC StructAEBC;

typedef struct StructZESubX StructZESubX;

typedef struct StructZESub20 StructZESub20;

typedef struct NitroKartRaw NitroKartRaw;

typedef struct StructWM StructWM;

typedef struct WMMessage WMMessage;

typedef struct CourseBgmEntry CourseBgmEntry;

typedef struct CharacterKartContextSub24 CharacterKartContextSub24;

typedef struct CharacterPhysicalParam CharacterPhysicalParam;

typedef struct InputRecordEntry InputRecordEntry;

typedef struct InputRecord InputRecord;

typedef struct StructDTT StructDTT;

typedef struct Matrix2x2 Matrix2x2;

typedef struct StructZESubC0 StructZESubC0;

typedef struct DriverNetworkState DriverNetworkState;

typedef struct StructCourseHolder StructCourseHolder;

typedef struct StructMQChild StructMQChild;

typedef struct Struct78 Struct78;

typedef struct Struct78Sub Struct78Sub;

typedef struct SelectReturn SelectReturn;

typedef struct StructNBSub StructNBSub;

typedef struct StructTC StructTC;

typedef struct DriverTimerState DriverTimerState;

typedef struct DisplayBaseConfig DisplayBaseConfig;

typedef struct Animator Animator;

typedef struct NNSG3dRenderObj NNSG3dRenderObj;

typedef struct MATHRandContext32 MATHRandContext32;

typedef struct SequenceHandle SequenceHandle;

typedef struct SequenceLoadInfo SequenceLoadInfo;

typedef struct TestContent TestContent;

typedef struct SfxEmitter SfxEmitter;

typedef struct DriverSub450 DriverSub450;

typedef struct DriverSub450Sub40 DriverSub450Sub40;

typedef struct SfxEmitterParamsEx SfxEmitterParamsEx;

typedef struct CharacterKartColors CharacterKartColors;

typedef struct GXRgb GXRgb;

typedef struct LightInfo LightInfo;

typedef struct DriverContextSub208 DriverContextSub208;

typedef struct EnemyState EnemyState;

typedef struct SequenceHeapState SequenceHeapState;

typedef struct SaveDataSection_DownloadGhost SaveDataSection_DownloadGhost;

/* size 0xA */
struct MemFRMHeapSub {
    /* off 0x0 size 0xA */
    u8 bb[10];

} __attribute__((packed));
_Static_assert(sizeof(MemFRMHeapSub) == 0xA, "MemFRMHeapSub definition");

/* size 0x2C */
struct Fs_OverlayInfo {
    /* off 0x0 size 0x4 */
    u32 id;

    /* off 0x4 size 0x4 */
    void *ram_addr;

    /* off 0x8 size 0x4 */
    u32 ram_size;

    /* off 0xC size 0x4 */
    u32 bss_size;

    /* off 0x10 size 0x4 */
    void (**init_fns_start)(void);

    /* off 0x14 size 0x4 */
    void (**init_fns_end)(void);

    /* off 0x18 size 0x4 */
    u32 fat_file_id;

    /* off 0x1C size 0x4 */
    u32 compressed_size_and_flag;

    /* off 0x20 size 0x4 */
    u32 processor;

    /* off 0x24 size 0x4 */
    u32 file_start_offset;

    /* off 0x28 size 0x4 */
    u32 file_size;

} __attribute__((packed));
_Static_assert(sizeof(Fs_OverlayInfo) == 0x2C, "Fs_OverlayInfo definition");

/* size 0x18 */
struct GammaFuncsStruct {
    /* off 0x0 size 0x4 */
    int (__fastcall *fn1)(int, int, int, int, int, int);

    /* off 0x4 size 0x4 */
    int (__fastcall *fn2)(int, int, int, int, int, int);

    /* off 0x8 size 0x4 */
    int (__fastcall *fn3)(int, int, int, int, int, int);

    /* off 0xC size 0x4 */
    int (__fastcall *fn4)(int, int, int, int, int, int);

    /* off 0x10 size 0x4 */
    int (__fastcall *fn5)(int, int, int, int, int, int);

    /* off 0x14 size 0x4 */
    int (__fastcall *fn6)(int, int, int, int, int, int);

} __attribute__((packed));
_Static_assert(sizeof(GammaFuncsStruct) == 0x18, "GammaFuncsStruct definition");

/* size 0xC */
struct SigmaStruct {
    /* off 0x0 size 0x4 */
    Fs_Archive *some_unkss;

    /* off 0x4 size 0x4 */
    u32 some_fat_entry_idx;

    /* off 0x8 size 0x4 */
    void *sub_table_abs_offset;

} __attribute__((packed));
_Static_assert(sizeof(SigmaStruct) == 0xC, "SigmaStruct definition");

/* size 0x8 */
struct Fs_FileId {
    /* off 0x0 size 0x4 */
    Fs_Archive *arc;

    /* off 0x4 size 0x4 */
    u32 fat_entry_idx;

} __attribute__((packed));
_Static_assert(sizeof(Fs_FileId) == 0x8, "Fs_FileId definition");

/* size 0x18 */
struct BetaStruct {
    /* off 0x0 size 0x4 */
    Fs_File *some_file;

    /* off 0x4 size 0x4 */
    u32 *fimg_data_start;

    /* off 0x8 size 0x4 */
    u32 fat_start_ptr_rel;

    /* off 0xC size 0x4 */
    u32 fat_size;

    /* off 0x10 size 0x4 */
    u32 fnt_start_ptr_rel;

    /* off 0x14 size 0x4 */
    u32 fnt_size;

} __attribute__((packed));
_Static_assert(sizeof(BetaStruct) == 0x18, "BetaStruct definition");

/* size 0x8 */
struct Os_ThreadQueue {
    /* off 0x0 size 0x4 */
    Os_Thread *prev_thr;

    /* off 0x4 size 0x4 */
    Os_Thread *next_thr;

} __attribute__((packed));
_Static_assert(sizeof(Os_ThreadQueue) == 0x8, "Os_ThreadQueue definition");

/* size 0x28 */
struct StructG {
    /* off 0x0 size 0x2 */
    _WORD some_input;

    /* off 0x2 size 0x2 */
    _WORD held_input;

    /* off 0x4 size 0x2 */
    _WORD g3;

    /* off 0x6 size 0x2 */
    _WORD keys_repeat;

    /* off 0x8 size 0x2 */
    u16 g5;

    /* off 0xA size 0x2 */
    u16 counter;

    /* off 0xC size 0x2 */
    _WORD maybe_keys_old;

    /* off 0xE size 0x2 */
    u16 count_max_2;

    /* off 0x10 size 0x2 */
    u16 count_max;

    /* off 0x12 size 0x2 */
    u16 last_time_diff;

    /* off 0x14 size 0x2 */
    _WORD do_check_if_l_r_start_select;

    /* off 0x16 size 0x2 */
    _WORD g12pad;

    /* off 0x18 size 0x8 */
    _QWORD time_val;

    /* off 0x20 size 0x4 */
    u32 some_flag;

    /* off 0x24 size 0x4 */
    u32 flag_use_some_input;

} __attribute__((packed));
_Static_assert(sizeof(StructG) == 0x28, "StructG definition");

/* size 0x14 */
struct ExecutionContext {
    /* off 0x0 size 0x4 */
    u32 unk_unused;

    /* off 0x4 size 0x4 */
    int (__fastcall *exec_fn_ptr)(void *);

    /* off 0x8 size 0x4 */
    void (__cdecl *exit_fn_fn)(int);

    /* off 0xC size 0x4 */
    Mem_HeapHead *cur_heap_hnd;

    /* off 0x10 size 0x4 */
    ExecutionContext *prev_active_ctx;

} __attribute__((packed));
_Static_assert(sizeof(ExecutionContext) == 0x14, "ExecutionContext definition");

/* size 0x428 */
struct CarcNames {
    /* off 0x0 size 0x4 */
    u32 magic;

    /* off 0x4 size 0x70 */
    char names8[14][8];

    /* off 0x74 size 0xE4 */
    char names12[19][12];

    /* off 0x158 size 0x250 */
    char names16[37][16];

    /* off 0x3A8 size 0x50 */
    char names20[4][20];

    /* off 0x3F8 size 0x30 */
    char names24[2][24];

} __attribute__((packed));
_Static_assert(sizeof(CarcNames) == 0x428, "CarcNames definition");

/* size 0x10 */
struct SceneOverlayConfig {
    /* off 0x0 size 0x4 */
    u32 maybe_ovl_id;

    /* off 0x4 size 0x4 */
    u32 maybe_next_ovl_id;

    /* off 0x8 size 0x2 */
    u16 cur_scene_id;

    /* off 0xA size 0x2 */
    u16 unk_pad;

    /* off 0xC size 0x4 */
    void *some_audio_rel_ptr;

} __attribute__((packed));
_Static_assert(sizeof(SceneOverlayConfig) == 0x10, "SceneOverlayConfig definition");

/* size 0xC */
struct VecFx32 {
    /* off 0x0 size 0x4 */
    fx32 x;

    /* off 0x4 size 0x4 */
    fx32 y;

    /* off 0x8 size 0x4 */
    fx32 z;

} __attribute__((packed));
_Static_assert(sizeof(VecFx32) == 0xC, "VecFx32 definition");

/* size 0x8 */
struct NARC_FNTFIMGBlock {
    /* off 0x0 size 0x4 */
    u32 magic;

    /* off 0x4 size 0x4 */
    u32 block_size;

} __attribute__((packed));
_Static_assert(sizeof(NARC_FNTFIMGBlock) == 0x8, "NARC_FNTFIMGBlock definition");

/* size 0x58 */
struct StructH {
    /* off 0x0 size 0x58 */
    u32 unkh[22];

} __attribute__((packed));
_Static_assert(sizeof(StructH) == 0x58, "StructH definition");

/* size 0x8 */
struct CommonBlockHeader {
    /* off 0x0 size 0x4 */
    u32 block_magic;

    /* off 0x4 size 0x4 */
    u32 block_size;

} __attribute__((packed));
_Static_assert(sizeof(CommonBlockHeader) == 0x8, "CommonBlockHeader definition");

/* size 0xC */
struct MountData {
    /* off 0x0 size 0x4 */
    Mem_HeapHead *frm_heap_hnd;

    /* off 0x4 size 0x4 */
    void *some_ptr;

    /* off 0x8 size 0x4 */
    u32 flags;

} __attribute__((packed));
_Static_assert(sizeof(MountData) == 0xC, "MountData definition");

/* size 0x10 */
struct PaletteBlock {
    /* off 0x0 size 0x4 */
    u32 color_depth_bpp;

    /* off 0x4 size 0x4 */
    u32 zero;

    /* off 0x8 size 0x4 */
    u32 palette_data_size;

    /* off 0xC size 0x4 */
    void *palette_data_offset;

} __attribute__((packed));
_Static_assert(sizeof(PaletteBlock) == 0x10, "PaletteBlock definition");

/* size 0xA0 */
struct MountArchiveLoader {
    /* off 0x0 size 0x80 */
    char mount_path[128];

    /* off 0x80 size 0x4 */
    void *enc_ptr;

    /* off 0x84 size 0x4 */
    void *dec_buf;

    /* off 0x88 size 0x4 */
    void *tmp_buf;

    /* off 0x8C size 0x4 */
    u32 cur_mount_idx;

    /* off 0x90 size 0x4 */
    u32 alloc_from_tail;

    /* off 0x94 size 0x4 */
    u32 is_enc;

    /* off 0x98 size 0x4 */
    u32 unk98;

    /* off 0x9C size 0x4 */
    u32 unk9C;

} __attribute__((packed));
_Static_assert(sizeof(MountArchiveLoader) == 0xA0, "MountArchiveLoader definition");

/* size 0x10 */
struct LzDecompressContext {
    /* off 0x0 size 0x4 */
    void *dec_buf;

    /* off 0x4 size 0x4 */
    u32 dec_size;

    /* off 0x8 size 0x2 */
    _WORD _x3;

    /* off 0xA size 0x1 */
    _BYTE _x4;

    /* off 0xB size 0x1 */
    _BYTE _x5;

    /* off 0xC size 0x1 */
    _BYTE _x6;

    /* off 0xD size 0x1 */
    _BYTE _x7;

    /* off 0xE size 0x1 */
    _BYTE _x8;

    /* off 0xF size 0x1 */
    _BYTE _x9;

} __attribute__((packed));
_Static_assert(sizeof(LzDecompressContext) == 0x10, "LzDecompressContext definition");

/* size 0x4 */
struct Display3DConfig {
    /* off 0x0 size 0x2 */
    u16 clear_clr_and_alpha;

    /* off 0x2 size 0x1 */
    u8 swap_bufs_translucent_poly_y_sort_manual;

    /* off 0x3 size 0x1 */
    u8 swap_bufs_depth_buffering;

} __attribute__((packed));
_Static_assert(sizeof(Display3DConfig) == 0x4, "Display3DConfig definition");

/* size 0x10 */
struct Mem_ExpHeapMemoryBlockHead {
    /* off 0x0 size 0x2 */
    _WORD magic;

    /* off 0x2 size 0x2 */
    _WORD attrs;

    /* off 0x4 size 0x4 */
    u32 block_size;

    /* off 0x8 size 0x4 */
    Mem_ExpHeapMemoryBlockHead *prev_block;

    /* off 0xC size 0x4 */
    Mem_ExpHeapMemoryBlockHead *next_block;

} __attribute__((packed));
_Static_assert(sizeof(Mem_ExpHeapMemoryBlockHead) == 0x10, "Mem_ExpHeapMemoryBlockHead definition");

/* size 0x8 */
struct Mem_MemoryRegion {
    /* off 0x0 size 0x4 */
    void *start;

    /* off 0x4 size 0x4 */
    void *end;

} __attribute__((packed));
_Static_assert(sizeof(Mem_MemoryRegion) == 0x8, "Mem_MemoryRegion definition");

/* size 0xC */
struct NNSFndList {
    /* off 0x0 size 0x4 */
    void *item_list_head;

    /* off 0x4 size 0x4 */
    void *item_list_tail;

    /* off 0x8 size 0x2 */
    _WORD item_count;

    /* off 0xA size 0x2 */
    _WORD item_head_tail_offset;

} __attribute__((packed));
_Static_assert(sizeof(NNSFndList) == 0xC, "NNSFndList definition");

/* size 0x14 */
struct GlobalHeapHolder {
    /* off 0x0 size 0x4 */
    u32 unk0_maybe_some_fn;

    /* off 0x4 size 0x4 */
    void *mem_region_start_ptr;

    /* off 0x8 size 0x4 */
    void *heap_start_ptr;

    /* off 0xC size 0x4 */
    Mem_HeapHead *global_mem_heap;

    /* off 0x10 size 0x4 */
    char *str_main_proc;

} __attribute__((packed));
_Static_assert(sizeof(GlobalHeapHolder) == 0x14, "GlobalHeapHolder definition");

/* size 0x8 */
struct File_FatEntry {
    /* off 0x0 size 0x4 */
    u32 fimg_rel_offset;

    /* off 0x4 size 0x4 */
    u32 file_size;

} __attribute__((packed));
_Static_assert(sizeof(File_FatEntry) == 0x8, "File_FatEntry definition");

/* size 0x10 */
struct Os_ThreadInfo {
    /* off 0x0 size 0x2 */
    u16 needs_rescheduling;

    /* off 0x2 size 0x2 */
    u16 irq_depth;

    /* off 0x4 size 0x4 */
    Os_Thread *cur_thr;

    /* off 0x8 size 0x4 */
    Os_Thread *prio_thr_list;

    /* off 0xC size 0x4 */
    void (__fastcall *thr_switch_fn)(Os_Thread *, Os_Thread *);

} __attribute__((packed));
_Static_assert(sizeof(Os_ThreadInfo) == 0x10, "Os_ThreadInfo definition");

/* size 0x1C */
struct Arm_MathContext {
    /* off 0x0 size 0x4 */
    u32 div_numer_param;

    /* off 0x4 size 0x4 */
    u32 div_numer_param_l;

    /* off 0x8 size 0x4 */
    u32 div_denom_param;

    /* off 0xC size 0x4 */
    u32 div_denom_param_2;

    /* off 0x10 size 0x4 */
    u32 sqrt_param;

    /* off 0x14 size 0x4 */
    u32 sqrt_param_2;

    /* off 0x18 size 0x2 */
    u16 divcnt_val;

    /* off 0x1A size 0x2 */
    u16 sqrtcnt;

} __attribute__((packed));
_Static_assert(sizeof(Arm_MathContext) == 0x1C, "Arm_MathContext definition");

/* size 0x10 */
struct Mem_FrameHeapState {
    /* off 0x0 size 0x4 */
    u32 id;

    /* off 0x4 size 0x8 */
    Mem_MemoryRegion heap_region;

    /* off 0xC size 0x4 */
    Mem_FrameHeapState *next_state;

} __attribute__((packed));
_Static_assert(sizeof(Mem_FrameHeapState) == 0x10, "Mem_FrameHeapState definition");

/* size 0x8 */
struct IntrusiveListNode {
    /* off 0x0 size 0x4 */
    void *item_prev;

    /* off 0x4 size 0x4 */
    void *item_next;

} __attribute__((packed));
_Static_assert(sizeof(IntrusiveListNode) == 0x8, "IntrusiveListNode definition");

/* size 0x48 */
struct SaveDataHolder {
    /* off 0x0 size 0x4 */
    SaveDataSection_Header *sv_header;

    /* off 0x4 size 0x4 */
    SaveDataSection_Emblem *sv_em;

    /* off 0x8 size 0x4 */
    SaveDataSection_GrandPrix *sv_gp;

    /* off 0xC size 0x4 */
    SaveDataSection_TimeTrial *sv_tt;

    /* off 0x10 size 0x4 */
    SaveDataSection_MissionRun *sv_mr;

    /* off 0x14 size 0x4 */
    SaveDataSection_PersonalGhost *sv_pg;

    /* off 0x18 size 0x4 */
    SaveDataSection_DownloadGhost *sv_dg;

    /* off 0x1C size 0x4 */
    StaffGhost *some_staff_ghost;

    /* off 0x20 size 0x4 */
    SaveDataSection_FriendList *sv_fl;

    /* off 0x24 size 0x4 */
    SaveDataSection_NKFE *str_nkfe;

    /* off 0x28 size 0x1 */
    u8 is_busy;

    /* off 0x29 size 0x1 */
    u8 unk29_pad;

    /* off 0x2A size 0x2 */
    u16 section_error_flags;

    /* off 0x2C size 0x4 */
    u32 read_result;

    /* off 0x30 size 0x4 */
    u8 unk_bits[4];

    /* off 0x34 size 0x4 */
    u8 other_secret_bits[4];

    /* off 0x38 size 0x4 */
    u32 unk38;

    /* off 0x3C size 0x4 */
    u32 unk3C;

    /* off 0x40 size 0x4 */
    void *task_fn_obj_ptr;

    /* off 0x44 size 0x4 */
    u32 unk44_maybe_flags;

} __attribute__((packed));
_Static_assert(sizeof(SaveDataHolder) == 0x48, "SaveDataHolder definition");

/* size 0x8 */
struct File_FntEntry {
    /* off 0x0 size 0x4 */
    u32 sub_table_offset;

    /* off 0x4 size 0x2 */
    _WORD first_file_idx;

    /* off 0x6 size 0x2 */
    _WORD dir_count_or_parent_dir;

} __attribute__((packed));
_Static_assert(sizeof(File_FntEntry) == 0x8, "File_FntEntry definition");

/* size 0x18 */
struct Fs_SyncReader {
    /* off 0x0 size 0x4 */
    Fs_Archive *arc;

    /* off 0x4 size 0x4 */
    void *read_buf;

    /* off 0x8 size 0x4 */
    u32 u3;

    /* off 0xC size 0x4 */
    u32 u4;

    /* off 0x10 size 0x4 */
    u32 u5;

    /* off 0x14 size 0x4 */
    u32 u6;

} __attribute__((packed));
_Static_assert(sizeof(Fs_SyncReader) == 0x18, "Fs_SyncReader definition");

/* size 0x94 */
struct File_ProcessedFntEntry {
    /* off 0x0 size 0x4 */
    Fs_Archive *some_buf_start;

    /* off 0x4 size 0x2 */
    _WORD entry_id_1;

    /* off 0x6 size 0x2 */
    _WORD entry_id_2;

    /* off 0x8 size 0x4 */
    u32 _s3;

    /* off 0xC size 0x4 */
    u32 is_dir;

    /* off 0x10 size 0x4 */
    u32 name_len;

    /* off 0x14 size 0x80 */
    char name_ptr[128];

} __attribute__((packed));
_Static_assert(sizeof(File_ProcessedFntEntry) == 0x94, "File_ProcessedFntEntry definition");

/* size 0x8 */
struct Mem_ExpHeapMemoryBlockList {
    /* off 0x0 size 0x4 */
    Mem_ExpHeapMemoryBlockHead *list_head;

    /* off 0x4 size 0x4 */
    Mem_ExpHeapMemoryBlockHead *list_tail;

} __attribute__((packed));
_Static_assert(sizeof(Mem_ExpHeapMemoryBlockList) == 0x8, "Mem_ExpHeapMemoryBlockList definition");

/* size 0x1C */
struct File_OperationContext_Op01 {
    /* off 0x0 size 0x4 */
    u32 unk_ff_op7;

    /* off 0x4 size 0x4 */
    int start_offset;

    /* off 0x8 size 0x4 */
    int end_offset;

    /* off 0xC size 0x4 */
    u32 cur_offset;

    /* off 0x10 size 0x4 */
    void *read_ptr;

    /* off 0x14 size 0x4 */
    u32 actual_rw_len;

    /* off 0x18 size 0x4 */
    u32 size;

} __attribute__((packed));
_Static_assert(sizeof(File_OperationContext_Op01) == 0x1C, "File_OperationContext_Op01 definition");

/* size 0x1C */
struct File_OperationContext_Op6 {
    /* off 0x0 size 0x4 */
    u32 op60;

    /* off 0x4 size 0x4 */
    u32 op61;

    /* off 0x8 size 0x4 */
    u32 op62;

    /* off 0xC size 0x4 */
    u32 op63;

    /* off 0x10 size 0x4 */
    Fs_Archive *some_unks;

    /* off 0x14 size 0x4 */
    u32 fat_entry_idx;

    /* off 0x18 size 0x4 */
    u32 op66;

} __attribute__((packed));
_Static_assert(sizeof(File_OperationContext_Op6) == 0x1C, "File_OperationContext_Op6 definition");

/* size 0x10 */
struct File_OperationContext_Op2_1 {
    /* off 0x0 size 0x4 */
    Fs_Archive *some_unks;

    /* off 0x4 size 0x2 */
    _WORD in_fnt_idx;

    /* off 0x6 size 0x2 */
    _WORD some_file_idx;

    /* off 0x8 size 0x4 */
    void *sub_table_abs_offset;

    /* off 0xC size 0x4 */
    u32 parent_dir_id;

} __attribute__((packed));
_Static_assert(sizeof(File_OperationContext_Op2_1) == 0x10, "File_OperationContext_Op2_1 definition");

/* size 0xC */
struct File_OperationContext_Op2_2 {
    /* off 0x0 size 0x4 */
    Fs_Archive *arc;

    /* off 0x4 size 0x2 */
    _WORD in_fnt_idx;

    /* off 0x6 size 0x2 */
    _WORD in_file_idx;

    /* off 0x8 size 0x4 */
    void *sub_table_abs_offset;

} __attribute__((packed));
_Static_assert(sizeof(File_OperationContext_Op2_2) == 0xC, "File_OperationContext_Op2_2 definition");

/* size 0x1C */
struct File_OperationContext_Op3 {
    /* off 0x0 size 0x4 */
    u32 p30;

    /* off 0x4 size 0x2 */
    _WORD some_entry_id;

    /* off 0x6 size 0x2 */
    _WORD cur_file_id_counter;

    /* off 0x8 size 0x4 */
    void *some_read_buf;

    /* off 0xC size 0x4 */
    u32 a3;

    /* off 0x10 size 0x4 */
    File_ProcessedFntEntry *fnt_entry_p;

    /* off 0x14 size 0x4 */
    int skip_name_read;

    /* off 0x18 size 0x4 */
    u32 a6;

} __attribute__((packed));
_Static_assert(sizeof(File_OperationContext_Op3) == 0x1C, "File_OperationContext_Op3 definition");

/* size 0x10 */
struct File_OperationContext_Op5_1 {
    /* off 0x0 size 0x4 */
    u32 p50;

    /* off 0x4 size 0x2 */
    _WORD some_entry_id;

    /* off 0x6 size 0x2 */
    _WORD a6112;

    /* off 0x8 size 0x4 */
    u32 a612;

    /* off 0xC size 0x4 */
    u32 a613;

} __attribute__((packed));
_Static_assert(sizeof(File_OperationContext_Op5_1) == 0x10, "File_OperationContext_Op5_1 definition");

/* size 0xC */
struct File_OperationContext_Op5_2 {
    /* off 0x0 size 0x4 */
    char *some_str;

    /* off 0x4 size 0x4 */
    u32 a622;

    /* off 0x8 size 0x2 */
    _WORD some_len;

    /* off 0xA size 0x2 */
    _WORD some_entry_id;

} __attribute__((packed));
_Static_assert(sizeof(File_OperationContext_Op5_2) == 0xC, "File_OperationContext_Op5_2 definition");

/* size 0xA */
struct BrightnessContext {
    /* off 0x0 size 0x2 */
    u16 state;

    /* off 0x2 size 0x2 */
    u16 fade_type;

    /* off 0x4 size 0x2 */
    u16 cur_frame;

    /* off 0x6 size 0x2 */
    u16 frame_count;

    /* off 0x8 size 0x2 */
    u16 brightness;

} __attribute__((packed));
_Static_assert(sizeof(BrightnessContext) == 0xA, "BrightnessContext definition");

/* size 0x18 */
struct MountExtra {
    /* off 0x0 size 0x4 */
    u32 next_mount_idx;

    /* off 0x4 size 0x1 */
    u8 mount_data_idx;

    /* off 0x5 size 0x3 */
    u8 unk_pad[3];

    /* off 0x8 size 0x4 */
    u32 arc3;

    /* off 0xC size 0x4 */
    u32 alloc_from_tail;

    /* off 0x10 size 0x4 */
    u32 is_enc;

    /* off 0x14 size 0x4 */
    char *mount_path;

} __attribute__((packed));
_Static_assert(sizeof(MountExtra) == 0x18, "MountExtra definition");

/* size 0x1C */
struct File_OperationContext_Op7 {
    /* off 0x0 size 0x4 */
    u32 op70;

    /* off 0x4 size 0x4 */
    u32 op71;

    /* off 0x8 size 0x4 */
    u32 op72;

    /* off 0xC size 0x4 */
    u32 op73;

    /* off 0x10 size 0x4 */
    void *start_offset;

    /* off 0x14 size 0x4 */
    void *end_offset;

    /* off 0x18 size 0x4 */
    u32 unk_ff;

} __attribute__((packed));
_Static_assert(sizeof(File_OperationContext_Op7) == 0x1C, "File_OperationContext_Op7 definition");

/* size 0x50 */
struct Os_PersonalData {
    /* off 0x0 size 0x1 */
    _BYTE lang;

    /* off 0x1 size 0x1 */
    _BYTE theme;

    /* off 0x2 size 0x1 */
    _BYTE birthday_month;

    /* off 0x3 size 0x1 */
    _BYTE birthday_day;

    /* off 0x4 size 0x14 */
    _WORD name[10];

    /* off 0x18 size 0x2 */
    _WORD name_len;

    /* off 0x1A size 0x34 */
    _WORD msg[26];

    /* off 0x4E size 0x2 */
    _WORD msg_len;

} __attribute__((packed));
_Static_assert(sizeof(Os_PersonalData) == 0x50, "Os_PersonalData definition");

/* size 0x8 */
struct Os_Lock {
    /* off 0x0 size 0x4 */
    u32 lock_flag;

    /* off 0x4 size 0x2 */
    u16 owner_id;

    /* off 0x6 size 0x2 */
    u16 ext;

} __attribute__((packed));
_Static_assert(sizeof(Os_Lock) == 0x8, "Os_Lock definition");

/* size 0x814 */
struct NavigationContext {
    /* off 0x0 size 0x4 */
    u32 has_text_system;

    /* off 0x4 size 0x4 */
    u32 has_select_choises;

    /* off 0x8 size 0x4 */
    u32 has_select_return;

    /* off 0xC size 0x4 */
    u32 back_screen_some_flag;

    /* off 0x10 size 0x800 */
    u32 qs[512];

    /* off 0x810 size 0x4 */
    u32 some_available_tile_size;

} __attribute__((packed));
_Static_assert(sizeof(NavigationContext) == 0x814, "NavigationContext definition");

/* size 0x14 */
struct StateDualHandler {
    /* off 0x0 size 0x4 */
    void (__cdecl **handler_fn_pair_table)(void *);

    /* off 0x4 size 0x4 */
    u32 cur_state_handler_execution_count;

    /* off 0x8 size 0x4 */
    void *handler_fn_arg;

    /* off 0xC size 0x2 */
    u16 handler_fn_pair_count;

    /* off 0xE size 0x2 */
    u16 cur_state;

    /* off 0x10 size 0x2 */
    u16 next_state;

    /* off 0x12 size 0x2 */
    u16 run_state_first_handler_fn;

} __attribute__((packed));
_Static_assert(sizeof(StateDualHandler) == 0x14, "StateDualHandler definition");

/* size 0x70 */
struct SaveDataIoManager {
    /* off 0x0 size 0x4 */
    u32 status;

    /* off 0x4 size 0x4 */
    u32 error;

    /* off 0x8 size 0x4 */
    u32 bak_lock_id;

    /* off 0xC size 0x4 */
    u32 is_enabled;

    /* off 0x10 size 0x4 */
    u32 is_busy;

    /* off 0x14 size 0x4 */
    u32 transfer_type;

    /* off 0x18 size 0x4 */
    u32 backup_src_dst;

    /* off 0x1C size 0x4 */
    u32 orig_error;

    /* off 0x20 size 0x4 */
    void *orig_src_dst;

    /* off 0x24 size 0x2 */
    u16 orig_timestamp;

    /* off 0x26 size 0x2 */
    u16 unk26_pad;

    /* off 0x28 size 0x4 */
    void *read_dst;

    /* off 0x2C size 0x4 */
    u32 read_src;

    /* off 0x30 size 0x4 */
    u32 read_len;

    /* off 0x34 size 0x4 */
    u32 read_section_magic;

    /* off 0x38 size 0x4 */
    u32 read_section_is_header;

    /* off 0x3C size 0x4 */
    u32 unk3C;

    /* off 0x40 size 0x4 */
    void *write_src;

    /* off 0x44 size 0x4 */
    u32 write_dst;

    /* off 0x48 size 0x4 */
    u32 write_len;

    /* off 0x4C size 0x4 */
    u32 unk4C;

    /* off 0x50 size 0x4 */
    u32 write_block_is_header;

    /* off 0x54 size 0x4 */
    u32 callback_arg;

    /* off 0x58 size 0x4 */
    u32 unk58;

    /* off 0x5C size 0x4 */
    u32 unk5C_some_val_m1;

    /* off 0x60 size 0x4 */
    void *tmp_buf;

    /* off 0x64 size 0x4 */
    void *test_byte;

    /* off 0x68 size 0x4 */
    void *real_dst;

    /* off 0x6C size 0x1 */
    u8 unk6C_download_ghost_related;

    /* off 0x6D size 0x1 */
    u8 unk6D;

    /* off 0x6E size 0x1 */
    u8 unk6E;

    /* off 0x6F size 0x1 */
    u8 unk6F;

} __attribute__((packed));
_Static_assert(sizeof(SaveDataIoManager) == 0x70, "SaveDataIoManager definition");

/* size 0x24 */
struct StructOI {
    /* off 0x0 size 0x2 */
    u16 a1;

    /* off 0x2 size 0x2 */
    u16 b1;

    /* off 0x4 size 0x2 */
    u16 a2;

    /* off 0x6 size 0x2 */
    u16 b2;

    /* off 0x8 size 0x2 */
    u16 a3;

    /* off 0xA size 0x2 */
    u16 b3;

    /* off 0xC size 0x2 */
    u16 flags_2;

    /* off 0xE size 0x14 */
    u8 driver_name[20];

    /* off 0x22 size 0x2 */
    u16 flags;

} __attribute__((packed));
_Static_assert(sizeof(StructOI) == 0x24, "StructOI definition");

/* size 0x40 */
struct Card_Command {
    /* off 0x0 size 0x4 */
    u32 result;

    /* off 0x4 size 0x4 */
    u32 sa2;

    /* off 0x8 size 0x4 */
    u32 sa3;

    /* off 0xC size 0x4 */
    u32 some_ptr_1;

    /* off 0x10 size 0x4 */
    u32 some_ptr_2;

    /* off 0x14 size 0x4 */
    u32 some_copy_size;

    /* off 0x18 size 0x4 */
    u32 sa7;

    /* off 0x1C size 0x4 */
    u32 sa8;

    /* off 0x20 size 0x4 */
    u32 sa9;

    /* off 0x24 size 0x4 */
    u32 sa10;

    /* off 0x28 size 0x4 */
    u32 sa11;

    /* off 0x2C size 0x4 */
    u32 sa12;

    /* off 0x30 size 0x4 */
    u32 sa13;

    /* off 0x34 size 0x4 */
    u32 sa14;

    /* off 0x38 size 0x4 */
    u32 sa15;

    /* off 0x3C size 0x4 */
    u32 sa16;

} __attribute__((packed));
_Static_assert(sizeof(Card_Command) == 0x40, "Card_Command definition");

/* size 0xC */
struct StructTM {
    /* off 0x0 size 0x4 */
    u32 maybe_handler;

    /* off 0x4 size 0x4 */
    u32 unk;

    /* off 0x8 size 0x4 */
    u32 maybe_init;

} __attribute__((packed));
_Static_assert(sizeof(StructTM) == 0xC, "StructTM definition");

/* size 0x60 */
struct Bios_CardHeaderStart {
    /* off 0x0 size 0xC */
    char gameTitle[12];

    /* off 0xC size 0x4 */
    char gameCode[4];

    /* off 0x10 size 0x2 */
    char makercode[2];

    /* off 0x12 size 0x1 */
    u8 unitCode;

    /* off 0x13 size 0x1 */
    u8 deviceType;

    /* off 0x14 size 0x1 */
    u8 deviceSize;

    /* off 0x15 size 0x9 */
    u8 reserved1[9];

    /* off 0x1E size 0x1 */
    u8 romversion;

    /* off 0x1F size 0x1 */
    u8 flags;

    /* off 0x20 size 0x4 */
    u32 arm9romOffset;

    /* off 0x24 size 0x4 */
    void *arm9executeAddress;

    /* off 0x28 size 0x4 */
    void *arm9destination;

    /* off 0x2C size 0x4 */
    u32 arm9binarySize;

    /* off 0x30 size 0x4 */
    u32 arm7romOffset;

    /* off 0x34 size 0x4 */
    void *arm7executeAddress;

    /* off 0x38 size 0x4 */
    void *arm7destination;

    /* off 0x3C size 0x4 */
    u32 arm7binarySize;

    /* off 0x40 size 0x4 */
    u32 fntOffset;

    /* off 0x44 size 0x4 */
    u32 fntSize;

    /* off 0x48 size 0x4 */
    u32 fatOffset;

    /* off 0x4C size 0x4 */
    u32 fatSize;

    /* off 0x50 size 0x4 */
    u32 arm9overlaySource;

    /* off 0x54 size 0x4 */
    u32 arm9overlaySize;

    /* off 0x58 size 0x4 */
    u32 arm7overlaySource;

    /* off 0x5C size 0x4 */
    u32 arm7overlaySize;

} __attribute__((packed));
_Static_assert(sizeof(Bios_CardHeaderStart) == 0x60, "Bios_CardHeaderStart definition");

/* size 0x20 */
struct StructCH {
    /* off 0x0 size 0x4 */
    u32 ch1;

    /* off 0x4 size 0x4 */
    u32 ch2;

    /* off 0x8 size 0x4 */
    u32 ch3;

    /* off 0xC size 0x4 */
    u32 ch4;

    /* off 0x10 size 0x4 */
    u32 ch5;

    /* off 0x14 size 0x4 */
    u32 arm9_ovl_size;

    /* off 0x18 size 0x4 */
    u32 ch7;

    /* off 0x1C size 0x4 */
    u32 arm7_ovl_size;

} __attribute__((packed));
_Static_assert(sizeof(StructCH) == 0x20, "StructCH definition");

/* size 0x300 */
struct SaveDataSection_Emblem {
    /* off 0x0 size 0x4 */
    u32 magic_NKEM;

    /* off 0x4 size 0x4 */
    u32 has_emblem;

    /* off 0x8 size 0x200 */
    u8 emblem_data[512];

    /* off 0x208 size 0xF8 */
    u32 unk208[62];

} __attribute__((packed));
_Static_assert(sizeof(SaveDataSection_Emblem) == 0x300, "SaveDataSection_Emblem definition");

/* size 0x160 */
struct Bios_CardHeader {
    /* off 0x0 size 0x60 */
    Bios_CardHeaderStart start_h;

    /* off 0x60 size 0x4 */
    u32 cardControl13;

    /* off 0x64 size 0x4 */
    u32 cardControlBF;

    /* off 0x68 size 0x4 */
    u32 bannerOffset;

    /* off 0x6C size 0x2 */
    u16 secureCRC16;

    /* off 0x6E size 0x2 */
    u16 readTimeout;

    /* off 0x70 size 0x4 */
    u32 unknownRAM1;

    /* off 0x74 size 0x4 */
    u32 unknownRAM2;

    /* off 0x78 size 0x4 */
    u32 bfPrime1;

    /* off 0x7C size 0x4 */
    u32 bfPrime2;

    /* off 0x80 size 0x4 */
    u32 romSize;

    /* off 0x84 size 0x4 */
    u32 headerSize;

    /* off 0x88 size 0x38 */
    u32 zeros88[14];

    /* off 0xC0 size 0x9C */
    u8 gbaLogo[156];

    /* off 0x15C size 0x2 */
    u16 logoCRC16;

    /* off 0x15E size 0x2 */
    u16 headerCRC16;

} __attribute__((packed));
_Static_assert(sizeof(Bios_CardHeader) == 0x160, "Bios_CardHeader definition");

/* size 0xC */
struct LogoScreenGraphics {
    /* off 0x0 size 0x4 */
    PaletteBlock *gfx_plt;

    /* off 0x4 size 0x4 */
    CharGraphicsBlock *gfx_char;

    /* off 0x8 size 0x4 */
    void *gfx_scrn;

} __attribute__((packed));
_Static_assert(sizeof(LogoScreenGraphics) == 0xC, "LogoScreenGraphics definition");

/* size 0x18 */
struct CharGraphicsBlock {
    /* off 0x0 size 0x2 */
    _WORD tile_data_size_kb;

    /* off 0x2 size 0x2 */
    _WORD unk_20;

    /* off 0x4 size 0x4 */
    u32 color_bpp;

    /* off 0x8 size 0x2 */
    _WORD zero_1;

    /* off 0xA size 0x2 */
    _WORD zero_2;

    /* off 0xC size 0x4 */
    u32 zero_3;

    /* off 0x10 size 0x4 */
    u32 tile_data_size;

    /* off 0x14 size 0x4 */
    void *tile_data_offset;

} __attribute__((packed));
_Static_assert(sizeof(CharGraphicsBlock) == 0x18, "CharGraphicsBlock definition");

/* size 0xC */
struct G2d_Font {
    /* off 0x0 size 0x4 */
    NFTR_FNIFBlock *fnif_data;

    /* off 0x4 size 0x4 */
    int (__cdecl *next_char_fn_ptr)(StructFON *);

    /* off 0x8 size 0x2 */
    u16 ver_is_old;

    /* off 0xA size 0x2 */
    u16 char_width_entry_size;

} __attribute__((packed));
_Static_assert(sizeof(G2d_Font) == 0xC, "G2d_Font definition");

/* size 0x14 */
struct NFTR_FNIFBlock {
    /* off 0x0 size 0x1 */
    u8 unk_zero1;

    /* off 0x1 size 0x1 */
    u8 height;

    /* off 0x2 size 0x2 */
    u16 unk_some_dyn_tile_idx;

    /* off 0x4 size 0x1 */
    u8 unk_zero4;

    /* off 0x5 size 0x1 */
    u8 width;

    /* off 0x6 size 0x1 */
    u8 width2;

    /* off 0x7 size 0x1 */
    u8 encoding;

    /* off 0x8 size 0x4 */
    u32 offset_charglyph_p8;

    /* off 0xC size 0x4 */
    u32 char_width_block_post_header_offset;

    /* off 0x10 size 0x4 */
    u32 offset_charmap1_p8;

} __attribute__((packed));
_Static_assert(sizeof(NFTR_FNIFBlock) == 0x14, "NFTR_FNIFBlock definition");

/* size 0x10 */
struct CommonHeader {
    /* off 0x0 size 0x4 */
    u32 magic;

    /* off 0x4 size 0x2 */
    u16 byte_order;

    /* off 0x6 size 0x2 */
    u16 version;

    /* off 0x8 size 0x4 */
    u32 total_size;

    /* off 0xC size 0x2 */
    u16 header_size;

    /* off 0xE size 0x2 */
    u16 block_count;

} __attribute__((packed));
_Static_assert(sizeof(CommonHeader) == 0x10, "CommonHeader definition");

/* size 0x28 */
struct NavigationContextParams {
    /* off 0x0 size 0x4 */
    u32 load_text_system;

    /* off 0x4 size 0x4 */
    G2d_Font *text_system_font;

    /* off 0x8 size 0x4 */
    u32 text_system_load_bg_1_flag;

    /* off 0xC size 0x4 */
    u32 text_system_load_bg_2_flag;

    /* off 0x10 size 0x4 */
    u32 text_system_load_bg_3_flag;

    /* off 0x14 size 0x4 */
    u32 load_select_choises;

    /* off 0x18 size 0x4 */
    G2d_Font *nb_font;

    /* off 0x1C size 0x4 */
    u32 load_select_return;

    /* off 0x20 size 0x4 */
    u32 load_back_screen;

    /* off 0x24 size 0x4 */
    u32 back_screen_some_flag;

} __attribute__((packed));
_Static_assert(sizeof(NavigationContextParams) == 0x28, "NavigationContextParams definition");

/* size 0x1C */
struct PlayerGfxData {
    /* off 0x0 size 0x4 */
    CharGraphicsBlock *nce_ncgr;

    /* off 0x4 size 0x4 */
    PaletteBlock *plt_data;

    /* off 0x8 size 0x4 */
    void *nce_ncer;

    /* off 0xC size 0x4 */
    void *bncl_data;

    /* off 0x10 size 0x4 */
    u32 unk_3;

    /* off 0x14 size 0x4 */
    void *bnll_data;

    /* off 0x18 size 0x4 */
    u32 unk_5;

} __attribute__((packed));
_Static_assert(sizeof(PlayerGfxData) == 0x1C, "PlayerGfxData definition");

/* size 0x6 */
struct SceneExecutionContext {
    /* off 0x0 size 0x2 */
    u16 prev_scene_id;

    /* off 0x2 size 0x2 */
    u16 cur_scene_id;

    /* off 0x4 size 0x2 */
    u16 next_scene_id;

} __attribute__((packed));
_Static_assert(sizeof(SceneExecutionContext) == 0x6, "SceneExecutionContext definition");

/* size 0x20 */
struct SceneInfo {
    /* off 0x0 size 0x4 */
    void (__fastcall *init_fn)(SceneExecutionContext *);

    /* off 0x4 size 0x4 */
    void (__fastcall *update_fn)(SceneExecutionContext *, u32);

    /* off 0x8 size 0x4 */
    void (__fastcall *fini_fn)(SceneExecutionContext *);

    /* off 0xC size 0x4 */
    void (__fastcall *vblank_fn)(SceneExecutionContext *, u32);

    /* off 0x10 size 0x4 */
    void (__fastcall *pre_sleep_fn)(SceneExecutionContext *);

    /* off 0x14 size 0x4 */
    void (__fastcall *post_sleep_fn)(SceneExecutionContext *);

    /* off 0x18 size 0x2 */
    u16 fade_in_frame_count;

    /* off 0x1A size 0x2 */
    u16 fade_out_frame_count;

    /* off 0x1C size 0x4 */
    u32 unk;

} __attribute__((packed));
_Static_assert(sizeof(SceneInfo) == 0x20, "SceneInfo definition");

/* size 0x14 */
struct StructPK {
    /* off 0x0 size 0x4 */
    StructYE *strye;

    /* off 0x4 size 0x4 */
    StructFX *strfx;

    /* off 0x8 size 0x4 */
    GhostHolder *ghost_holder;

    /* off 0xC size 0x4 */
    u32 pk4;

    /* off 0x10 size 0x4 */
    u32 pk5;

} __attribute__((packed));
_Static_assert(sizeof(StructPK) == 0x14, "StructPK definition");

/* size 0xC */
struct FriendCode {
    /* off 0x0 size 0x4 */
    u32 unk_and_flags;

    /* off 0x4 size 0x4 */
    u32 profile_id;

    /* off 0x8 size 0x4 */
    u32 crc_checksum;

} __attribute__((packed));
_Static_assert(sizeof(FriendCode) == 0xC, "FriendCode definition");

/* size 0x4000 */
struct DTCMRegion {
    /* off 0x0 size 0x8 */
    Os_ThreadQueue irq_tlst;

    /* off 0x8 size 0x58 */
    void *irq_handlers[22];

    /* off 0x60 size 0x68 */
    u32 unk0[26];

    /* off 0xC8 size 0x4 */
    StructPR *prs;

    /* off 0xCC size 0xAB4 */
    u32 shs1[685];

    /* off 0xB80 size 0x2800 */
    u8 stack_2[10240];

    /* off 0x3380 size 0xC00 */
    u8 svc_stack[3072];

    /* off 0x3F80 size 0x4 */
    u32 stack_p_c00;

    /* off 0x3F84 size 0x4 */
    u32 sh30;

    /* off 0x3F88 size 0x4 */
    u32 sh29;

    /* off 0x3F8C size 0x4 */
    u32 sh28;

    /* off 0x3F90 size 0x4 */
    u32 sh27;

    /* off 0x3F94 size 0x4 */
    u32 sh26;

    /* off 0x3F98 size 0x4 */
    u32 sh25;

    /* off 0x3F9C size 0x4 */
    u32 sh24;

    /* off 0x3FA0 size 0x4 */
    u32 sh23;

    /* off 0x3FA4 size 0x4 */
    u32 sh22;

    /* off 0x3FA8 size 0x4 */
    u32 sh21;

    /* off 0x3FAC size 0x4 */
    u32 sh20;

    /* off 0x3FB0 size 0x4 */
    u32 sh19;

    /* off 0x3FB4 size 0x4 */
    u32 sh18;

    /* off 0x3FB8 size 0x4 */
    u32 sh17;

    /* off 0x3FBC size 0x4 */
    u32 sh16;

    /* off 0x3FC0 size 0x4 */
    u32 some_sp_related;

    /* off 0x3FC4 size 0x4 */
    u32 sh15;

    /* off 0x3FC8 size 0x4 */
    u32 sh14;

    /* off 0x3FCC size 0x4 */
    u32 sh13;

    /* off 0x3FD0 size 0x4 */
    u32 sh12;

    /* off 0x3FD4 size 0x4 */
    u32 sh11;

    /* off 0x3FD8 size 0x4 */
    u32 sh10;

    /* off 0x3FDC size 0x4 */
    u32 sh9;

    /* off 0x3FE0 size 0x4 */
    u32 sh8;

    /* off 0x3FE4 size 0x4 */
    u32 sh7;

    /* off 0x3FE8 size 0x4 */
    u32 sh6;

    /* off 0x3FEC size 0x4 */
    u32 sh5;

    /* off 0x3FF0 size 0x4 */
    u32 sh4;

    /* off 0x3FF4 size 0x4 */
    u32 sh3;

    /* off 0x3FF8 size 0x4 */
    u32 irq_flags;

    /* off 0x3FFC size 0x4 */
    u32 sh1;

} __attribute__((packed));
_Static_assert(sizeof(DTCMRegion) == 0x4000, "DTCMRegion definition");

/* size 0x8 */
struct Fs_OverlayTable {
    /* off 0x0 size 0x4 */
    void *ptr;

    /* off 0x4 size 0x4 */
    u32 size;

} __attribute__((packed));
_Static_assert(sizeof(Fs_OverlayTable) == 0x8, "Fs_OverlayTable definition");

/* size 0x268 */
struct StructBin {
    /* off 0x0 size 0x4 */
    u32 b1;

    /* off 0x4 size 0x4 */
    u32 b2;

    /* off 0x8 size 0x4 */
    u32 b3;

    /* off 0xC size 0x4 */
    u32 b4;

    /* off 0x10 size 0x4 */
    u32 b5;

    /* off 0x14 size 0x20 */
    u32 bs[8];

    /* off 0x34 size 0x4 */
    u32 b14;

    /* off 0x38 size 0x4 */
    u32 b15;

    /* off 0x3C size 0x4 */
    u32 b16;

    /* off 0x40 size 0x1 */
    u8 buuu1;

    /* off 0x41 size 0x1 */
    u8 buuu2;

    /* off 0x42 size 0x1 */
    u8 buuu3;

    /* off 0x43 size 0x1 */
    u8 buuu4;

    /* off 0x44 size 0x4 */
    u32 baaa;

    /* off 0x48 size 0x220 */
    u32 bins[136];

} __attribute__((packed));
_Static_assert(sizeof(StructBin) == 0x268, "StructBin definition");

/* size 0x10 */
struct StructHN {
    /* off 0x0 size 0x2 */
    u16 h1;

    /* off 0x2 size 0x2 */
    u16 h2;

    /* off 0x4 size 0x2 */
    u16 h3;

    /* off 0x6 size 0x2 */
    u16 h4;

    /* off 0x8 size 0x2 */
    u16 h5;

    /* off 0xA size 0x2 */
    u16 h6;

    /* off 0xC size 0x2 */
    u16 h7;

    /* off 0xE size 0x2 */
    u16 h8;

} __attribute__((packed));
_Static_assert(sizeof(StructHN) == 0x10, "StructHN definition");

/* size 0x24 */
struct Crt0_StartModuleParams {
    /* off 0x0 size 0x4 */
    void *autoload_list_start;

    /* off 0x4 size 0x4 */
    void *autoload_list_end;

    /* off 0x8 size 0x4 */
    u32 autoload_dst_start;

    /* off 0xC size 0x4 */
    void *static_bss_start;

    /* off 0x10 size 0x4 */
    void *static_bss_end;

    /* off 0x14 size 0x4 */
    void *compressed_code_end;

    /* off 0x18 size 0x4 */
    u32 sdk_version;

    /* off 0x1C size 0x4 */
    u32 nitro_code_le;

    /* off 0x20 size 0x4 */
    u32 nitro_code_be;

} __attribute__((packed));
_Static_assert(sizeof(Crt0_StartModuleParams) == 0x24, "Crt0_StartModuleParams definition");

/* size 0x220 */
struct Card_RomContext {
    /* off 0x0 size 0x4 */
    void (__fastcall *read_fn)(Card_RomContext *);

    /* off 0x4 size 0x4 */
    u32 romctrl_val;

    /* off 0x8 size 0x4 */
    void *cache_page;

    /* off 0xC size 0x4 */
    u32 unk1;

    /* off 0x10 size 0x4 */
    u32 unk2;

    /* off 0x14 size 0x4 */
    u32 unk3;

    /* off 0x18 size 0x4 */
    u32 unk4;

    /* off 0x1C size 0x4 */
    u32 unk5;

    /* off 0x20 size 0x200 */
    u8 cache_buf[512];

} __attribute__((packed));
_Static_assert(sizeof(Card_RomContext) == 0x220, "Card_RomContext definition");

/* size 0xC */
struct Crt0_RegionCopyInfo {
    /* off 0x0 size 0x4 */
    void *dst_addr;

    /* off 0x4 size 0x4 */
    u32 dst_copy_size;

    /* off 0x8 size 0x4 */
    u32 dst_rem_zero_size;

} __attribute__((packed));
_Static_assert(sizeof(Crt0_RegionCopyInfo) == 0xC, "Crt0_RegionCopyInfo definition");

/* size 0xC */
struct Os_IrqSpecialHandlerEntry {
    /* off 0x0 size 0x4 */
    void (__cdecl *fn)(void *);

    /* off 0x4 size 0x4 */
    u32 is_enabled;

    /* off 0x8 size 0x4 */
    void *fn_arg;

} __attribute__((packed));
_Static_assert(sizeof(Os_IrqSpecialHandlerEntry) == 0xC, "Os_IrqSpecialHandlerEntry definition");

/* size 0x2 */
struct Bios_PersonalDataPacked {
    /* off 0x0 size 0x1 */
    __int8 _bf_0;

    /* off 0x1 size 0x1 */
    __int8 _bf_1;

} __attribute__((packed));
_Static_assert(sizeof(Bios_PersonalDataPacked) == 0x2, "Bios_PersonalDataPacked definition");

/* size 0x30 */
struct StructRacer {
    /* off 0x0 size 0x4 */
    u32 ci1;

    /* off 0x4 size 0x4 */
    u32 ci2;

    /* off 0x8 size 0x4 */
    u32 ci3;

    /* off 0xC size 0x4 */
    u32 ci4;

    /* off 0x10 size 0x4 */
    u32 ci5;

    /* off 0x14 size 0x1 */
    u8 ci61;

    /* off 0x15 size 0x1 */
    u8 ci62;

    /* off 0x16 size 0x1 */
    u8 cpu_id;

    /* off 0x17 size 0x1 */
    u8 ci64;

    /* off 0x18 size 0x4 */
    u16 *racer_name;

    /* off 0x1C size 0x4 */
    u32 ci8;

    /* off 0x20 size 0x4 */
    FriendCode *striu;

    /* off 0x24 size 0x4 */
    u32 ci10;

    /* off 0x28 size 0x4 */
    u32 maybe_kart_id;

    /* off 0x2C size 0x4 */
    u32 maybe_cup_id;

} __attribute__((packed));
_Static_assert(sizeof(StructRacer) == 0x30, "StructRacer definition");

/* size 0x414 */
struct StructStaffRoll {
    /* off 0x0 size 0x4 */
    u32 maybe_frame_count;

    /* off 0x4 size 0x4 */
    PaletteBlock *ending_st_roll_m_o_00_nclr;

    /* off 0x8 size 0x4 */
    CharGraphicsBlock *ending_st_roll_m_o_00_nce_ncgr;

    /* off 0xC size 0x4 */
    u32 ending_st_roll_m_o_00_nce_ncer_related;

    /* off 0x10 size 0x400 */
    u32 oam_top_data[256];

    /* off 0x410 size 0x2 */
    u16 some_oam_idx;

    /* off 0x412 size 0x2 */
    u16 unk4;

} __attribute__((packed));
_Static_assert(sizeof(StructStaffRoll) == 0x414, "StructStaffRoll definition");

/* size 0x30 */
struct StructYH {
    /* off 0x0 size 0x4 */
    u32 y0;

    /* off 0x4 size 0x4 */
    u32 y1;

    /* off 0x8 size 0x4 */
    u32 flags;

    /* off 0xC size 0x24 */
    u32 ys[9];

} __attribute__((packed));
_Static_assert(sizeof(StructYH) == 0x30, "StructYH definition");

/* size 0x230 */
struct StructFY {
    /* off 0x0 size 0x4 */
    u32 f0;

    /* off 0x4 size 0x4 */
    u32 f1;

    /* off 0x8 size 0x4 */
    u32 flags;

    /* off 0xC size 0x224 */
    u32 fs[137];

} __attribute__((packed));
_Static_assert(sizeof(StructFY) == 0x230, "StructFY definition");

/* size 0x244 */
struct StructTK {
    /* off 0x0 size 0x14 */
    u16 nickname[10];

    /* off 0x14 size 0x200 */
    u8 emblem_data[512];

    /* off 0x214 size 0x1 */
    u8 use_custom_emblem;

    /* off 0x215 size 0x1 */
    u8 pad;

    /* off 0x216 size 0x2 */
    u16 some_size;

    /* off 0x218 size 0xC */
    FriendCode some_friend_code;

    /* off 0x224 size 0x4 */
    u32 mkdssv_fl1;

    /* off 0x228 size 0x1 */
    u8 some_flag_2;

    /* off 0x229 size 0x1 */
    u8 worst_rank_star_val;

    /* off 0x22A size 0x2 */
    u8 unk[2];

    /* off 0x22C size 0x4 */
    u32 yuyu3;

    /* off 0x230 size 0x4 */
    u32 yuyu4;

    /* off 0x234 size 0x4 */
    u32 tick_lo;

    /* off 0x238 size 0x4 */
    u32 yuyu6;

    /* off 0x23C size 0x4 */
    u32 yuyu7;

    /* off 0x240 size 0x4 */
    u32 yuyu8;

} __attribute__((packed));
_Static_assert(sizeof(StructTK) == 0x244, "StructTK definition");

/* size 0x20 */
struct NkmKTPJ {
    /* off 0x0 size 0xC */
    VecFx32 pos_v;

    /* off 0xC size 0xC */
    VecFx32 rot_v;

    /* off 0x18 size 0x2 */
    u16 enemy_pos_id;

    /* off 0x1A size 0x2 */
    u16 item_pos_id;

    /* off 0x1C size 0x4 */
    u32 respawn_id;

} __attribute__((packed));
_Static_assert(sizeof(NkmKTPJ) == 0x20, "NkmKTPJ definition");

/* size 0x8 */
struct Vector2 {
    /* off 0x0 size 0x4 */
    u32 x;

    /* off 0x4 size 0x4 */
    u32 y;

} __attribute__((packed));
_Static_assert(sizeof(Vector2) == 0x8, "Vector2 definition");

/* size 0xC */
struct NkmCPAT {
    /* off 0x0 size 0x2 */
    u16 point_start;

    /* off 0x2 size 0x2 */
    u16 point_len;

    /* off 0x4 size 0x3 */
    u8 next_group[3];

    /* off 0x7 size 0x3 */
    u8 prev_group[3];

    /* off 0xA size 0x1 */
    u8 section_order_a;

    /* off 0xB size 0x1 */
    u8 section_order_b;

} __attribute__((packed));
_Static_assert(sizeof(NkmCPAT) == 0xC, "NkmCPAT definition");

/* size 0x48 */
struct NkmAREA {
    /* off 0x0 size 0xC */
    VecFx32 pos_v;

    /* off 0xC size 0xC */
    VecFx32 len_v;

    /* off 0x18 size 0xC */
    VecFx32 unk_v;

    /* off 0x24 size 0xC */
    VecFx32 unk_v2;

    /* off 0x30 size 0xC */
    VecFx32 unk_v3;

    /* off 0x3C size 0x2 */
    u16 some_area3_idx;

    /* off 0x3E size 0x2 */
    u16 unk2;

    /* off 0x40 size 0x2 */
    u16 unk3;

    /* off 0x42 size 0x1 */
    u8 unk4;

    /* off 0x43 size 0x1 */
    u8 cam_id;

    /* off 0x44 size 0x1 */
    u8 area_type;

    /* off 0x45 size 0x2 */
    u16 unk5;

    /* off 0x47 size 0x1 */
    u8 unk6;

} __attribute__((packed));
_Static_assert(sizeof(NkmAREA) == 0x48, "NkmAREA definition");

/* size 0x4C */
struct NkmCAME {
    /* off 0x0 size 0xC */
    VecFx32 pos1_v;

    /* off 0xC size 0xC */
    VecFx32 rot_v;

    /* off 0x18 size 0xC */
    VecFx32 pos2_v;

    /* off 0x24 size 0xC */
    VecFx32 pos3_v;

    /* off 0x30 size 0x2 */
    u16 fov_begin;

    /* off 0x32 size 0x2 */
    u16 fov_begin_sine;

    /* off 0x34 size 0x2 */
    u16 fov_begin_cosine;

    /* off 0x36 size 0x2 */
    u16 fov_end;

    /* off 0x38 size 0x2 */
    u16 fov_end_sine;

    /* off 0x3A size 0x2 */
    u16 fov_end_cosine;

    /* off 0x3C size 0x2 */
    u16 cam_zoom;

    /* off 0x3E size 0x2 */
    u16 cam_type;

    /* off 0x40 size 0x2 */
    u16 linked_route;

    /* off 0x42 size 0x2 */
    u16 route_speed;

    /* off 0x44 size 0x2 */
    u16 point_speed;

    /* off 0x46 size 0x2 */
    u16 cam_duration;

    /* off 0x48 size 0x2 */
    u16 next_cam;

    /* off 0x4A size 0x1 */
    u8 intro_pan_1st_cam_indicator;

    /* off 0x4B size 0x1 */
    u8 unk;

} __attribute__((packed));
_Static_assert(sizeof(NkmCAME) == 0x4C, "NkmCAME definition");

/* size 0x4 */
struct NkmPATH {
    /* off 0x0 size 0x1 */
    u8 route_id;

    /* off 0x1 size 0x1 */
    u8 route_loop_flag;

    /* off 0x2 size 0x2 */
    u16 poit_count;

} __attribute__((packed));
_Static_assert(sizeof(NkmPATH) == 0x4, "NkmPATH definition");

/* size 0x8 */
struct NkmPathEntry {
    /* off 0x0 size 0x4 */
    NkmPATH *path_ptr;

    /* off 0x4 size 0x4 */
    NkmPOIT *poits_ptr;

} __attribute__((packed));
_Static_assert(sizeof(NkmPathEntry) == 0x8, "NkmPathEntry definition");

/* size 0xC */
struct NkmIPAT {
    /* off 0x0 size 0x2 */
    u16 point_start;

    /* off 0x2 size 0x2 */
    u16 point_len;

    /* off 0x4 size 0x3 */
    u8 next_group[3];

    /* off 0x7 size 0x3 */
    u8 prev_group[3];

    /* off 0xA size 0x2 */
    u16 section_order;

} __attribute__((packed));
_Static_assert(sizeof(NkmIPAT) == 0xC, "NkmIPAT definition");

/* size 0x28 */
struct NkmIpatEntry {
    /* off 0x0 size 0x4 */
    u32 t1;

    /* off 0x4 size 0x4 */
    NkmIpatEntry *another_entry;

    /* off 0x8 size 0x4 */
    u32 t3;

    /* off 0xC size 0x4 */
    NkmIpatEntry *some_entry;

    /* off 0x10 size 0x4 */
    u32 t5;

    /* off 0x14 size 0x4 */
    u32 t6;

    /* off 0x18 size 0x4 */
    NkmIPOI *ipoi_ptr;

    /* off 0x1C size 0x4 */
    u32 ipoi_scale;

    /* off 0x20 size 0x1 */
    u8 ipoi_unk_v_p_33;

    /* off 0x21 size 0x1 */
    u8 t92;

    /* off 0x22 size 0x1 */
    u8 t93;

    /* off 0x23 size 0x1 */
    u8 t94;

    /* off 0x24 size 0x2 */
    u16 t101;

    /* off 0x26 size 0x2 */
    u16 some_count;

} __attribute__((packed));
_Static_assert(sizeof(NkmIpatEntry) == 0x28, "NkmIpatEntry definition");

/* size 0x14 */
struct NkmIPOI {
    /* off 0x0 size 0xC */
    VecFx32 pos_v;

    /* off 0xC size 0x4 */
    u32 scale;

    /* off 0x10 size 0x4 */
    u32 unk_ver_post_33;

} __attribute__((packed));
_Static_assert(sizeof(NkmIPOI) == 0x14, "NkmIPOI definition");

/* size 0x48 */
struct StructTD {
    /* off 0x0 size 0x4 */
    u32 is_award_or_staffroll_2;

    /* off 0x4 size 0x4 */
    u32 tt2;

    /* off 0x8 size 0x4 */
    u32 tt3;

    /* off 0xC size 0x4 */
    u32 tt4;

    /* off 0x10 size 0x4 */
    u32 tt5;

    /* off 0x14 size 0x4 */
    u32 tt6;

    /* off 0x18 size 0x4 */
    u32 tt7;

    /* off 0x1C size 0x4 */
    u32 tt8;

    /* off 0x20 size 0x4 */
    u32 tt9_maybe_goal_fog_state;

    /* off 0x24 size 0x4 */
    u32 tt10_maybe_cur_fog_state;

    /* off 0x28 size 0x4 */
    u32 is_not_staffroll;

    /* off 0x2C size 0x4 */
    u32 is_battle_intro;

    /* off 0x30 size 0x4 */
    u32 tt13;

    /* off 0x34 size 0x4 */
    u32 tt14;

    /* off 0x38 size 0x4 */
    u32 is_award_or_staffroll;

    /* off 0x3C size 0x4 */
    u32 tt16;

    /* off 0x40 size 0x2 */
    u16 some_vec_x;

    /* off 0x42 size 0x2 */
    u16 some_vec_y;

    /* off 0x44 size 0x2 */
    u16 some_vec_z;

    /* off 0x46 size 0x2 */
    u16 tt182;

} __attribute__((packed));
_Static_assert(sizeof(StructTD) == 0x48, "StructTD definition");

/* size 0x34 */
struct StructCESex {
    /* off 0x0 size 0x4 */
    void *heap_head_mem;

    /* off 0x4 size 0x4 */
    Mem_HeapHead *heap_head;

    /* off 0x8 size 0x4 */
    void *another_nsbmd_ptr;

    /* off 0xC size 0x4 */
    void *another_nsbtx_ptr;

    /* off 0x10 size 0x4 */
    CommonHeader *nsbtx_ptr;

    /* off 0x14 size 0x4 */
    void *another_nsbca_ptr;

    /* off 0x18 size 0x4 */
    void *some_nsbmd_ptr;

    /* off 0x1C size 0x4 */
    void *some_nsbtx_ptr;

    /* off 0x20 size 0x4 */
    void *xtra_nsbmd_ptr;

    /* off 0x24 size 0x4 */
    void *xtra_nsbtx_ptr;

    /* off 0x28 size 0x4 */
    u32 se11;

    /* off 0x2C size 0x4 */
    u32 se12;

    /* off 0x30 size 0x2 */
    u16 some_counter;

    /* off 0x32 size 0x2 */
    u16 se132;

} __attribute__((packed));
_Static_assert(sizeof(StructCESex) == 0x34, "StructCESex definition");

/* size 0x760 */
struct StructAA {
    /* off 0x0 size 0x14 */
    StateDualHandler stre7;

    /* off 0x14 size 0x34 */
    u32 as011[13];

    /* off 0x48 size 0xB0 */
    u32 as012[44];

    /* off 0xF8 size 0x2 */
    u16 agdg1;

    /* off 0xFA size 0x1 */
    u8 agdg3;

    /* off 0xFB size 0x1 */
    u8 agdg4;

    /* off 0xFC size 0x4 */
    u32 like_re_flags;

    /* off 0x100 size 0x6C */
    u32 as02[27];

    /* off 0x16C size 0x1C */
    u32 as10[7];

    /* off 0x188 size 0x1A0 */
    u32 as1[104];

    /* off 0x328 size 0xC0 */
    u32 p0[48];

    /* off 0x3E8 size 0x300 */
    u32 p1[192];

    /* off 0x6E8 size 0x40 */
    u32 as2[16];

    /* off 0x728 size 0x4 */
    u32 another_counter;

    /* off 0x72C size 0x8 */
    u32 as5[2];

    /* off 0x734 size 0x2 */
    u16 au1;

    /* off 0x736 size 0x2 */
    u16 some_counter;

    /* off 0x738 size 0x1C */
    u32 as3[7];

    /* off 0x754 size 0x4 */
    void *ptr_sz_6c;

    /* off 0x758 size 0x4 */
    u32 b;

    /* off 0x75C size 0x4 */
    u32 maybe_some_flags;

} __attribute__((packed));
_Static_assert(sizeof(StructAA) == 0x760, "StructAA definition");

/* size 0xA */
struct StructRE {
    /* off 0x0 size 0x4 */
    u8 maybe_net_driver_idx_table[4];

    /* off 0x4 size 0x1 */
    u8 flags;

    /* off 0x5 size 0x1 */
    u8 unk2;

    /* off 0x6 size 0x4 */
    _WORD re2[2];

} __attribute__((packed));
_Static_assert(sizeof(StructRE) == 0xA, "StructRE definition");

/* size 0x3C */
struct KclHeader {
    /* off 0x0 size 0x4 */
    u32 vertex_offset;

    /* off 0x4 size 0x4 */
    u32 normal_offset;

    /* off 0x8 size 0x4 */
    u32 plane_offset;

    /* off 0xC size 0x4 */
    u32 octree_offset;

    /* off 0x10 size 0x4 */
    u32 unk;

    /* off 0x14 size 0xC */
    VecFx32 octree_top_left;

    /* off 0x20 size 0x4 */
    u32 x_mask;

    /* off 0x24 size 0x4 */
    u32 y_mask;

    /* off 0x28 size 0x4 */
    u32 z_mask;

    /* off 0x2C size 0x4 */
    u32 coord_shift;

    /* off 0x30 size 0x4 */
    u32 y_shift;

    /* off 0x34 size 0x4 */
    u32 z_shift;

    /* off 0x38 size 0x4 */
    u32 unk2;

} __attribute__((packed));
_Static_assert(sizeof(KclHeader) == 0x3C, "KclHeader definition");

/* size 0x41C */
struct StructRaceIntro {
    /* off 0x0 size 0x4 */
    u32 maybe_frame_counter;

    /* off 0x4 size 0x4 */
    PaletteBlock *race_start_gp_m_o_nclr;

    /* off 0x8 size 0x4 */
    CharGraphicsBlock *race_start_gp_m_o_ncgr;

    /* off 0xC size 0x4 */
    u32 a4;

    /* off 0x10 size 0x4 */
    u32 a5;

    /* off 0x14 size 0x4 */
    u32 a6;

    /* off 0x18 size 0x400 */
    u32 top_oam_data[256];

    /* off 0x418 size 0x4 */
    u32 unk;

} __attribute__((packed));
_Static_assert(sizeof(StructRaceIntro) == 0x41C, "StructRaceIntro definition");

/* size 0x2C */
struct StructMapObject {
    /* off 0x0 size 0x4 */
    u32 mo1;

    /* off 0x4 size 0x4 */
    u32 mo2;

    /* off 0x8 size 0x4 */
    u32 load_fn;

    /* off 0xC size 0x4 */
    BillboardModel *item;

    /* off 0x10 size 0x4 */
    Model *some_strml;

    /* off 0x14 size 0x4 */
    u32 mo6;

    /* off 0x18 size 0x4 */
    void *nsbmd_ptr;

    /* off 0x1C size 0x4 */
    Animation *nsbca_anim;

    /* off 0x20 size 0x4 */
    Animation *nsbtp_anim;

    /* off 0x24 size 0x4 */
    u32 mo10;

    /* off 0x28 size 0x4 */
    Animation *nsbta_anim;

} __attribute__((packed));
_Static_assert(sizeof(StructMapObject) == 0x2C, "StructMapObject definition");

/* size 0x2C */
struct BillboardModel {
    /* off 0x0 size 0x4 */
    void *display_list;

    /* off 0x4 size 0x4 */
    u32 display_list_length;

    /* off 0x8 size 0x4 */
    fx32 pos_scale;

    /* off 0xC size 0x4 */
    u32 diff_amb;

    /* off 0x10 size 0x4 */
    u32 spe_emi;

    /* off 0x14 size 0x4 */
    u32 polygon_attr;

    /* off 0x18 size 0x2 */
    u16 tex_idx;

    /* off 0x1A size 0x2 */
    u16 tex_count;

    /* off 0x1C size 0x4 */
    u32 *tex_param_list;

    /* off 0x20 size 0x4 */
    u32 *plt_param_list;

    /* off 0x24 size 0x4 */
    Model *model;

    /* off 0x28 size 0x4 */
    Animation *nsbtp_anim;

} __attribute__((packed));
_Static_assert(sizeof(BillboardModel) == 0x2C, "BillboardModel definition");

/* size 0x10 */
struct StructAA04 {
    /* off 0x0 size 0x4 */
    u32 aa1;

    /* off 0x4 size 0x4 */
    u32 *sub_oam_data_ptr;

    /* off 0x8 size 0x2 */
    u16 some_flags;

    /* off 0xA size 0x1 */
    u8 aa321;

    /* off 0xB size 0x1 */
    u8 aa322;

    /* off 0xC size 0x4 */
    u32 aa4;

} __attribute__((packed));
_Static_assert(sizeof(StructAA04) == 0x10, "StructAA04 definition");

/* size 0x10 */
struct ModelResource {
    /* off 0x0 size 0x4 */
    void *prev_item;

    /* off 0x4 size 0x4 */
    void *next_item;

    /* off 0x8 size 0x4 */
    void *nsbmd_ptr;

    /* off 0xC size 0x4 */
    NNSG3dResTex_Tex0Block *tex0_block;

} __attribute__((packed));
_Static_assert(sizeof(ModelResource) == 0x10, "ModelResource definition");

/* size 0x185C */
struct StructB4A4 {
    /* off 0x0 size 0x185C */
    u32 bs[1559];

} __attribute__((packed));
_Static_assert(sizeof(StructB4A4) == 0x185C, "StructB4A4 definition");

/* size 0x14 */
struct NkmPOIT {
    /* off 0x0 size 0xC */
    VecFx32 pos_v;

    /* off 0xC size 0x1 */
    u8 point_idx;

    /* off 0xD size 0x1 */
    u8 unk1;

    /* off 0xE size 0x2 */
    __int16 duration;

    /* off 0x10 size 0x4 */
    u32 unk2;

} __attribute__((packed));
_Static_assert(sizeof(NkmPOIT) == 0x14, "NkmPOIT definition");

/* size 0x10 */
struct DisplayBg01Config {
    /* off 0x0 size 0x2 */
    u16 bg_prio;

    /* off 0x2 size 0x2 */
    u16 bg_enable_mosaic;

    /* off 0x4 size 0x2 */
    u16 bg_scr_size;

    /* off 0x6 size 0x2 */
    u16 bg_color_plt;

    /* off 0x8 size 0x2 */
    u16 bg_scr_base_block;

    /* off 0xA size 0x2 */
    u16 bg_char_base_block;

    /* off 0xC size 0x2 */
    u16 bg_ext_plt_slot;

    /* off 0xE size 0x2 */
    u16 bgcnt_val;

} __attribute__((packed));
_Static_assert(sizeof(DisplayBg01Config) == 0x10, "DisplayBg01Config definition");

/* size 0x64 */
struct Arm_Context {
    /* off 0x0 size 0x4 */
    u32 _cpsr;

    /* off 0x4 size 0x34 */
    u32 r[13];

    /* off 0x38 size 0x4 */
    u32 _sp;

    /* off 0x3C size 0x4 */
    u32 _lr;

    /* off 0x40 size 0x4 */
    u32 pc_p4;

    /* off 0x44 size 0x4 */
    u32 sp_svc;

    /* off 0x48 size 0x1C */
    Arm_MathContext math_ctx;

} __attribute__((packed));
_Static_assert(sizeof(Arm_Context) == 0x64, "Arm_Context definition");

/* size 0x8 */
struct Os_AlarmQueue {
    /* off 0x0 size 0x4 */
    Os_Alarm *prev_alarm;

    /* off 0x4 size 0x4 */
    Os_Alarm *next_alarm;

} __attribute__((packed));
_Static_assert(sizeof(Os_AlarmQueue) == 0x8, "Os_AlarmQueue definition");

/* size 0x80 */
struct Arm_ExceptionContext {
    /* off 0x0 size 0x64 */
    Arm_Context base_ctx;

    /* off 0x64 size 0x4 */
    u32 cp15;

    /* off 0x68 size 0x4 */
    u32 _spsr;

    /* off 0x6C size 0x4 */
    u32 exinfo;

    /* off 0x70 size 0x10 */
    u32 debug[4];

} __attribute__((packed));
_Static_assert(sizeof(Arm_ExceptionContext) == 0x80, "Arm_ExceptionContext definition");

/* size 0x1A */
struct Gfx_State {
    /* off 0x0 size 0x2 */
    u16 lcdc;

    /* off 0x2 size 0x2 */
    u16 bg;

    /* off 0x4 size 0x2 */
    u16 obj;

    /* off 0x6 size 0x2 */
    u16 arm7;

    /* off 0x8 size 0x2 */
    u16 tex;

    /* off 0xA size 0x2 */
    u16 texPltt;

    /* off 0xC size 0x2 */
    u16 clrImg;

    /* off 0xE size 0x2 */
    u16 bgExtPltt;

    /* off 0x10 size 0x2 */
    u16 objExtPltt;

    /* off 0x12 size 0x2 */
    u16 sub_bg;

    /* off 0x14 size 0x2 */
    u16 sub_obj;

    /* off 0x16 size 0x2 */
    u16 sub_bgExtPltt;

    /* off 0x18 size 0x2 */
    u16 sub_objExtPltt;

} __attribute__((packed));
_Static_assert(sizeof(Gfx_State) == 0x1A, "Gfx_State definition");

/* size 0x14 */
struct StructNS {
    /* off 0x0 size 0xC */
    NNSFndList wrap;

    /* off 0xC size 0x4 */
    u32 n1;

    /* off 0x10 size 0x4 */
    u32 n2;

} __attribute__((packed));
_Static_assert(sizeof(StructNS) == 0x14, "StructNS definition");

/* size 0x38 */
struct StructTP {
    /* off 0x0 size 0x4 */
    u32 err_handler_fn;

    /* off 0x4 size 0xC */
    u16 tps1[6];

    /* off 0x10 size 0x4 */
    Struct59C4 *str59c4;

    /* off 0x14 size 0x4 */
    u32 t3;

    /* off 0x18 size 0x4 */
    u32 t4;

    /* off 0x1C size 0x4 */
    u32 t5;

    /* off 0x20 size 0x4 */
    u32 t6;

    /* off 0x24 size 0x4 */
    u32 t7;

    /* off 0x28 size 0x4 */
    u32 t8;

    /* off 0x2C size 0x4 */
    u32 t9;

    /* off 0x30 size 0x2 */
    u16 taps1;

    /* off 0x32 size 0x2 */
    u16 taps2;

    /* off 0x34 size 0x2 */
    u16 flags_1;

    /* off 0x36 size 0x2 */
    u16 flags_2;

} __attribute__((packed));
_Static_assert(sizeof(StructTP) == 0x38, "StructTP definition");

/* size 0x8 */
struct CalibrationData {
    /* off 0x0 size 0x2 */
    u16 c1;

    /* off 0x2 size 0x2 */
    u16 c2;

    /* off 0x4 size 0x2 */
    u16 x1_x2_px_div_x100;

    /* off 0x6 size 0x2 */
    u16 c4;

} __attribute__((packed));
_Static_assert(sizeof(CalibrationData) == 0x8, "CalibrationData definition");

/* size 0x10 */
struct Dict_Header {
    /* off 0x0 size 0x1 */
    u8 rev;

    /* off 0x1 size 0x1 */
    u8 entry_count;

    /* off 0x2 size 0x2 */
    u16 header_size;

    /* off 0x4 size 0x2 */
    u16 sub_h_size;

    /* off 0x6 size 0x2 */
    u16 entries_off_rel_to_sub_h;

    /* off 0x8 size 0x1 */
    u8 unk_const1;

    /* off 0x9 size 0x1 */
    u8 unk_const2;

    /* off 0xA size 0x1 */
    u8 unk_const3;

    /* off 0xB size 0x1 */
    u8 unk_const4;

    /* off 0xC size 0x4 */
    u32 obj1;

} __attribute__((packed));
_Static_assert(sizeof(Dict_Header) == 0x10, "Dict_Header definition");

/* size 0x8 */
struct StructAR {
    /* off 0x0 size 0x4 */
    StructARSub *area_type_5_ptrs;

    /* off 0x4 size 0x2 */
    u16 area_type_5_count;

    /* off 0x6 size 0x2 */
    u16 unk;

} __attribute__((packed));
_Static_assert(sizeof(StructAR) == 0x8, "StructAR definition");

/* size 0xC */
struct StructARSub {
    /* off 0x0 size 0x2 */
    u16 ar_idx;

    /* off 0x2 size 0x2 */
    u16 a2;

    /* off 0x4 size 0x4 */
    u32 b;

    /* off 0x8 size 0x1 */
    u8 c1;

    /* off 0x9 size 0x1 */
    u8 c2;

    /* off 0xA size 0x1 */
    u8 c3;

    /* off 0xB size 0x1 */
    u8 c4;

} __attribute__((packed));
_Static_assert(sizeof(StructARSub) == 0xC, "StructARSub definition");

/* size 0x24 */
struct Rtc_Context {
    /* off 0x0 size 0x4 */
    u32 is_busy;

    /* off 0x4 size 0x4 */
    void (__fastcall *err_fn_ptr)(int, u32);

    /* off 0x8 size 0x4 */
    u32 *out_datetime_ptr32;

    /* off 0xC size 0x4 */
    u32 _r4;

    /* off 0x10 size 0x4 */
    u32 _r5;

    /* off 0x14 size 0x4 */
    u32 _r6;

    /* off 0x18 size 0x4 */
    u32 _r7;

    /* off 0x1C size 0x4 */
    u32 fn_ptr_2;

    /* off 0x20 size 0x4 */
    u32 async_res;

} __attribute__((packed));
_Static_assert(sizeof(Rtc_Context) == 0x24, "Rtc_Context definition");

/* size 0xC */
struct OverlayEntry {
    /* off 0x0 size 0x4 */
    u32 ovl_ovt_idx;

    /* off 0x4 size 0x4 */
    void *start_addr;

    /* off 0x8 size 0x4 */
    void *end_addr;

} __attribute__((packed));
_Static_assert(sizeof(OverlayEntry) == 0xC, "OverlayEntry definition");

/* size 0x1C */
struct NkmKTPS {
    /* off 0x0 size 0xC */
    VecFx32 pos_v;

    /* off 0xC size 0xC */
    VecFx32 rot_v;

    /* off 0x18 size 0x2 */
    u16 unk_pad;

    /* off 0x1A size 0x2 */
    u16 start_pos_idx;

} __attribute__((packed));
_Static_assert(sizeof(NkmKTPS) == 0x1C, "NkmKTPS definition");

/* size 0x8 */
struct NkmAreaListEntry {
    /* off 0x0 size 0x4 */
    NkmAREA *nkm_area;

    /* off 0x4 size 0x4 */
    NkmAreaListEntry *next_entry;

} __attribute__((packed));
_Static_assert(sizeof(NkmAreaListEntry) == 0x8, "NkmAreaListEntry definition");

/* size 0x8 */
struct Fs_FileList {
    /* off 0x0 size 0x4 */
    Fs_File *prev;

    /* off 0x4 size 0x4 */
    Fs_File *next;

} __attribute__((packed));
_Static_assert(sizeof(Fs_FileList) == 0x8, "Fs_FileList definition");

/* size 0xC */
struct Fs_DirectoryPosition {
    /* off 0x0 size 0x4 */
    Fs_Archive *arc;

    /* off 0x4 size 0x2 */
    u16 own_id;

    /* off 0x6 size 0x2 */
    u16 idx;

    /* off 0x8 size 0x4 */
    u32 pos_or_offset;

} __attribute__((packed));
_Static_assert(sizeof(Fs_DirectoryPosition) == 0xC, "Fs_DirectoryPosition definition");

/* size 0xC */
struct Fs_File_OperationArg_Read {
    /* off 0x0 size 0x4 */
    void *ptr;

    /* off 0x4 size 0x4 */
    u32 a;

    /* off 0x8 size 0x4 */
    u32 b;

} __attribute__((packed));
_Static_assert(sizeof(Fs_File_OperationArg_Read) == 0xC, "Fs_File_OperationArg_Read definition");

/* size 0xC */
struct Fs_File_OperationArg_Write {
    /* off 0x0 size 0x4 */
    void *ptr;

    /* off 0x4 size 0x4 */
    u32 a;

    /* off 0x8 size 0x4 */
    u32 b;

} __attribute__((packed));
_Static_assert(sizeof(Fs_File_OperationArg_Write) == 0xC, "Fs_File_OperationArg_Write definition");

/* size 0x18 */
struct Fs_File_OperationArg_FindPath {
    /* off 0x0 size 0xC */
    Fs_DirectoryPosition dir_pos;

    /* off 0xC size 0x4 */
    const char *path;

    /* off 0x10 size 0x4 */
    u32 is_dir;

    /* off 0x14 size 0x4 */
    void *out_file_dir_ptr;

} __attribute__((packed));
_Static_assert(sizeof(Fs_File_OperationArg_FindPath) == 0x18, "Fs_File_OperationArg_FindPath definition");

/* size 0xC */
struct Fs_File_OperationArg_SeekDirectory {
    /* off 0x0 size 0xC */
    Fs_DirectoryPosition dir_pos;

} __attribute__((packed));
_Static_assert(sizeof(Fs_File_OperationArg_SeekDirectory) == 0xC, "Fs_File_OperationArg_SeekDirectory definition");

/* size 0xC */
struct Fs_File_OperationArg_OpenFileRaw {
    /* off 0x0 size 0x4 */
    u32 start_offset;

    /* off 0x4 size 0x4 */
    u32 end_offset;

    /* off 0x8 size 0x4 */
    u32 fat_entry_idx;

} __attribute__((packed));
_Static_assert(sizeof(Fs_File_OperationArg_OpenFileRaw) == 0xC, "Fs_File_OperationArg_OpenFileRaw definition");

/* size 0x8 */
struct Fs_File_OperationArg_OpenFileById {
    /* off 0x0 size 0x8 */
    Fs_FileId id;

} __attribute__((packed));
_Static_assert(sizeof(Fs_File_OperationArg_OpenFileById) == 0x8, "Fs_File_OperationArg_OpenFileById definition");

/* size 0x10 */
struct Fs_File_Entry_File {
    /* off 0x0 size 0x4 */
    u32 fat_entry_idx;

    /* off 0x4 size 0x4 */
    u32 start_offset;

    /* off 0x8 size 0x4 */
    u32 end_offset;

    /* off 0xC size 0x4 */
    u32 cur_offset;

} __attribute__((packed));
_Static_assert(sizeof(Fs_File_Entry_File) == 0x10, "Fs_File_Entry_File definition");

/* size 0x10 */
struct Fs_File_Entry_Directory {
    /* off 0x0 size 0xC */
    Fs_DirectoryPosition dir_pos;

    /* off 0xC size 0x4 */
    u32 par;

} __attribute__((packed));
_Static_assert(sizeof(Fs_File_Entry_Directory) == 0x10, "Fs_File_Entry_Directory definition");

/* size 0x14 */
struct PhysicalParamContext {
    /* off 0x0 size 0x4 */
    KartPhysicalParam *diver_kart_phys_params;

    /* off 0x4 size 0x4 */
    CharacterPhysicalParam *driver_char_phys_params;

    /* off 0x8 size 0x4 */
    u32 unk8_some_kart_phys_param_max_speed;

    /* off 0xC size 0x4 */
    KartPhysicalParam *kart_phys_param;

    /* off 0x10 size 0x4 */
    CharacterPhysicalParam *char_phys_param;

} __attribute__((packed));
_Static_assert(sizeof(PhysicalParamContext) == 0x14, "PhysicalParamContext definition");

/* size 0x28 */
struct Nkm_STAG {
    /* off 0x0 size 0x2 */
    u16 track_id;

    /* off 0x2 size 0x2 */
    u16 lap_count;

    /* off 0x4 size 0x1 */
    u8 unk1;

    /* off 0x5 size 0x1 */
    u8 fog_flag;

    /* off 0x6 size 0x1 */
    u8 fog_table_gen_mode;

    /* off 0x7 size 0x1 */
    u8 fog_slope;

    /* off 0x8 size 0x8 */
    u8 unk2[8];

    /* off 0x10 size 0x4 */
    u32 fog_distance;

    /* off 0x14 size 0x2 */
    u16 fog_color;

    /* off 0x16 size 0x2 */
    u16 fog_alpha;

    /* off 0x18 size 0x8 */
    u16 kcl_colors[4];

    /* off 0x20 size 0x8 */
    u8 unk3[8];

} __attribute__((packed));
_Static_assert(sizeof(Nkm_STAG) == 0x28, "Nkm_STAG definition");

/* size 0x1C */
struct StructB3F0 {
    /* off 0x0 size 0x14 */
    u32 beb[5];

    /* off 0x14 size 0x4 */
    u32 another_mission_rank;

    /* off 0x18 size 0x4 */
    u32 maybe_cur_mission_rank;

} __attribute__((packed));
_Static_assert(sizeof(StructB3F0) == 0x1C, "StructB3F0 definition");

/* size 0x40 */
struct Struct59C4 {
    /* off 0x0 size 0x4 */
    u32 gag1;

    /* off 0x4 size 0x4 */
    u32 gag2;

    /* off 0x8 size 0x4 */
    u32 gag3;

    /* off 0xC size 0x4 */
    u32 gag4;

    /* off 0x10 size 0x4 */
    u32 gag5;

    /* off 0x14 size 0x4 */
    u32 gag6;

    /* off 0x18 size 0x4 */
    u32 gag7;

    /* off 0x1C size 0x4 */
    u32 gag8;

    /* off 0x20 size 0x4 */
    u32 gag9;

    /* off 0x24 size 0x4 */
    u32 gag10;

    /* off 0x28 size 0x2 */
    u16 gag111;

    /* off 0x2A size 0x2 */
    u16 gag112;

    /* off 0x2C size 0x2 */
    u16 gag121;

    /* off 0x2E size 0x2 */
    u16 gag122;

    /* off 0x30 size 0x4 */
    u32 some_flags;

    /* off 0x34 size 0x4 */
    u32 gag14;

    /* off 0x38 size 0x4 */
    u32 gag15;

    /* off 0x3C size 0x4 */
    Struct59C4Sub *sub;

} __attribute__((packed));
_Static_assert(sizeof(Struct59C4) == 0x40, "Struct59C4 definition");

/* size 0x10 */
struct Struct5624 {
    /* off 0x0 size 0x2 */
    u16 a11;

    /* off 0x2 size 0x2 */
    u16 a12;

    /* off 0x4 size 0x2 */
    u16 xflags;

    /* off 0x6 size 0x2 */
    u16 a22;

    /* off 0x8 size 0x4 */
    u32 a3;

    /* off 0xC size 0x4 */
    u32 a4;

} __attribute__((packed));
_Static_assert(sizeof(Struct5624) == 0x10, "Struct5624 definition");

/* size 0x420 */
struct Struct59C4Sub {
    /* off 0x0 size 0x400 */
    u32 unk[256];

    /* off 0x400 size 0x4 */
    u32 shd1;

    /* off 0x404 size 0x4 */
    Struct59C4Sub *own_ptr;

    /* off 0x408 size 0x4 */
    u32 maybe_size;

    /* off 0x40C size 0x4 */
    u32 shd4;

    /* off 0x410 size 0x4 */
    u32 shd5;

    /* off 0x414 size 0x4 */
    u32 shd6;

    /* off 0x418 size 0x4 */
    u32 shd7;

    /* off 0x41C size 0x4 */
    u32 some_counter_upto_30;

} __attribute__((packed));
_Static_assert(sizeof(Struct59C4Sub) == 0x420, "Struct59C4Sub definition");

/* size 0x14 */
struct StructTEQ {
    /* off 0x0 size 0x4 */
    StructTEQSub *teqsub_ptr;

    /* off 0x4 size 0x4 */
    u32 max_teqsub_count;

    /* off 0x8 size 0x2 */
    u16 top_used_teqsub_idx;

    /* off 0xA size 0x2 */
    u16 next_free_teqsub_idx;

    /* off 0xC size 0x2 */
    u16 used_teqsub_count;

    /* off 0xE size 0x2 */
    u16 unk4;

    /* off 0x10 size 0x4 */
    u32 used_teqsub_ptr_len;

} __attribute__((packed));
_Static_assert(sizeof(StructTEQ) == 0x14, "StructTEQ definition");

/* size 0x20 */
struct G2d_Sprite {
    /* off 0x0 size 0x4 */
    void *tile_data_ptr;

    /* off 0x4 size 0x4 */
    u32 width;

    /* off 0x8 size 0x4 */
    u32 height;

    /* off 0xC size 0x1 */
    u8 color_mode_bpp;

    /* off 0xD size 0x3 */
    u8 unkD_pad[3];

    /* off 0x10 size 0x4 */
    u32 impl_param;

    /* off 0x14 size 0x4 */
    void (__fastcall *draw_glyph_fn)(G2d_Sprite *, G2d_Font *, int, int, int, G2d_Glyph *);

    /* off 0x18 size 0x4 */
    void *clear_fn;

    /* off 0x1C size 0x4 */
    void *clear_area_fn;

} __attribute__((packed));
_Static_assert(sizeof(G2d_Sprite) == 0x20, "G2d_Sprite definition");

/* size 0xC */
struct Os_CartridgeModuleInfo {
    /* off 0x0 size 0x2 */
    u16 eew;

    /* off 0x2 size 0xA */
    u8 ugu[10];

} __attribute__((packed));
_Static_assert(sizeof(Os_CartridgeModuleInfo) == 0xC, "Os_CartridgeModuleInfo definition");

/* size 0x10 */
struct StructTEQSub {
    /* off 0x0 size 0x4 */
    u32 teqsub_fn_id;

    /* off 0x4 size 0x4 */
    void *ptr;

    /* off 0x8 size 0x4 */
    u32 copy_offset;

    /* off 0xC size 0x4 */
    u32 ptr_len;

} __attribute__((packed));
_Static_assert(sizeof(StructTEQSub) == 0x10, "StructTEQSub definition");

/* size 0x10 */
struct G2d_Text {
    /* off 0x0 size 0x4 */
    G2d_Sprite *sprite_ptr;

    /* off 0x4 size 0x4 */
    G2d_Font *draw_font_ptr;

    /* off 0x8 size 0x4 */
    u32 inter_char_width;

    /* off 0xC size 0x4 */
    u32 line_spacing_height;

} __attribute__((packed));
_Static_assert(sizeof(G2d_Text) == 0x10, "G2d_Text definition");

/* size 0x88C */
struct StructB3C4 {
    /* off 0x0 size 0xE0 */
    u32 race_m_ncer_stuff[56];

    /* off 0xE0 size 0x110 */
    u32 race_goal_m_ncer_stuff[68];

    /* off 0x1F0 size 0x3C */
    u32 race_ta_m_ncer_stuff[15];

    /* off 0x22C size 0x34 */
    u32 race_battle_m_ncer_stuff[13];

    /* off 0x260 size 0x58 */
    u32 race_mr_m_ncer_stuff[22];

    /* off 0x2B8 size 0x20 */
    u32 race_goal_mr_m_ncer_stuff[8];

    /* off 0x2D8 size 0x324 */
    u32 race_s_ncer_stuff[201];

    /* off 0x5FC size 0xB0 */
    u32 race_goal_s_ncer_stuff[44];

    /* off 0x6AC size 0xA0 */
    u32 race_goal_team_s_ncer_stuff[40];

    /* off 0x74C size 0x84 */
    u32 race_new_record_ta_s_ncer_stuff[33];

    /* off 0x7D0 size 0xC */
    u32 race_start_battle_m_ncer_stuff[3];

    /* off 0x7DC size 0x4 */
    PaletteBlock *race_m_o_plt;

    /* off 0x7E0 size 0x4 */
    CharGraphicsBlock *race_m_o_ncgr;

    /* off 0x7E4 size 0x4 */
    u32 p2;

    /* off 0x7E8 size 0x4 */
    u32 p3;

    /* off 0x7EC size 0x4 */
    PaletteBlock *race_goal_m_o_plt;

    /* off 0x7F0 size 0x4 */
    CharGraphicsBlock *race_goal_m_o_ncgr;

    /* off 0x7F4 size 0x4 */
    u32 _q2;

    /* off 0x7F8 size 0x4 */
    u32 _q3;

    /* off 0x7FC size 0x4 */
    PaletteBlock *race_ta_m_o_plt;

    /* off 0x800 size 0x4 */
    CharGraphicsBlock *race_ta_m_o_ncgr;

    /* off 0x804 size 0x4 */
    u32 a11;

    /* off 0x808 size 0x4 */
    u32 a12;

    /* off 0x80C size 0x4 */
    PaletteBlock *race_battle_m_o_plt;

    /* off 0x810 size 0x4 */
    CharGraphicsBlock *race_battle_m_o_ncgr;

    /* off 0x814 size 0x4 */
    u32 t2;

    /* off 0x818 size 0x4 */
    u32 t3;

    /* off 0x81C size 0x4 */
    PaletteBlock *race_mr_m_o_plt;

    /* off 0x820 size 0x4 */
    CharGraphicsBlock *race_mr_m_o_ncgr;

    /* off 0x824 size 0x4 */
    u32 y2;

    /* off 0x828 size 0x4 */
    u32 y3;

    /* off 0x82C size 0x4 */
    PaletteBlock *race_goal_mr_m_o_plt;

    /* off 0x830 size 0x4 */
    CharGraphicsBlock *race_goal_mr_m_o_ncgr;

    /* off 0x834 size 0x4 */
    u32 z2;

    /* off 0x838 size 0x4 */
    u32 z3;

    /* off 0x83C size 0x4 */
    PaletteBlock *race_s_o_plt;

    /* off 0x840 size 0x4 */
    CharGraphicsBlock *race_s_o_ncgr;

    /* off 0x844 size 0x4 */
    u32 b3;

    /* off 0x848 size 0x4 */
    u32 b4;

    /* off 0x84C size 0x4 */
    PaletteBlock *race_goal_s_o_plt;

    /* off 0x850 size 0x4 */
    CharGraphicsBlock *race_goal_s_o_ncgr;

    /* off 0x854 size 0x4 */
    u32 b7;

    /* off 0x858 size 0x4 */
    u32 b8;

    /* off 0x85C size 0x4 */
    PaletteBlock *race_goal_team_s_o_plt;

    /* off 0x860 size 0x4 */
    CharGraphicsBlock *race_goal_team_s_o_ncgr;

    /* off 0x864 size 0x4 */
    u32 b11;

    /* off 0x868 size 0x4 */
    u32 b12;

    /* off 0x86C size 0x4 */
    PaletteBlock *race_new_record_ta_s_o_plt;

    /* off 0x870 size 0x4 */
    CharGraphicsBlock *race_new_record_ta_s_o_ncgr;

    /* off 0x874 size 0x4 */
    u32 b15;

    /* off 0x878 size 0x4 */
    u32 b16;

    /* off 0x87C size 0x4 */
    PaletteBlock *race_start_battle_m_o_plt;

    /* off 0x880 size 0x4 */
    CharGraphicsBlock *race_start_battle_m_o_ncgr;

    /* off 0x884 size 0x4 */
    u32 _r2;

    /* off 0x888 size 0x4 */
    u32 _r3;

} __attribute__((packed));
_Static_assert(sizeof(StructB3C4) == 0x88C, "StructB3C4 definition");

/* size 0x14 */
struct TextSystemParams {
    /* off 0x0 size 0x4 */
    G2d_Font *font;

    /* off 0x4 size 0x4 */
    u32 load_bg_1_flag;

    /* off 0x8 size 0x4 */
    u32 load_bg_2_flag;

    /* off 0xC size 0x4 */
    u32 load_bg_3_flag;

    /* off 0x10 size 0x4 */
    u32 some_available_size;

} __attribute__((packed));
_Static_assert(sizeof(TextSystemParams) == 0x14, "TextSystemParams definition");

/* size 0x1C */
struct SaveDataGrandPrixCupRecordEntry {
    /* off 0x0 size 0x1 */
    __int8 _bf_0;

    /* off 0x1 size 0x1 */
    u8 kart_id;

    /* off 0x2 size 0x1 */
    u8 points;

    /* off 0x3 size 0x1 */
    u8 rank;

    /* off 0x4 size 0x1 */
    u8 cup_res;

    /* off 0x5 size 0x1 */
    __int8 _bf_5;

    /* off 0x6 size 0x1 */
    __int8 _bf_6;

    /* off 0x7 size 0x1 */
    __int8 _bf_7;

    /* off 0x8 size 0x14 */
    u16 nickname[10];

} __attribute__((packed));
_Static_assert(sizeof(SaveDataGrandPrixCupRecordEntry) == 0x1C, "SaveDataGrandPrixCupRecordEntry definition");

/* size 0x20 */
struct StructCP {
    /* off 0x0 size 0x2 */
    u16 some_milli;

    /* off 0x2 size 0x1 */
    u8 some_min;

    /* off 0x3 size 0x1 */
    u8 some_sec;

    /* off 0x4 size 0x14 */
    u16 user_name[10];

    /* off 0x18 size 0x1 */
    u8 is_valid;

    /* off 0x19 size 0x1 */
    u8 character_id;

    /* off 0x1A size 0x1 */
    u8 kart_id;

    /* off 0x1B size 0x1 */
    u8 _q4;

    /* off 0x1C size 0x1 */
    u8 cup_res;

    /* off 0x1D size 0x1 */
    u8 points;

    /* off 0x1E size 0x1 */
    u8 rank;

    /* off 0x1F size 0x1 */
    u8 _s4;

} __attribute__((packed));
_Static_assert(sizeof(StructCP) == 0x20, "StructCP definition");

/* size 0xC */
struct StructBAN {
    /* off 0x0 size 0x4 */
    u32 a;

    /* off 0x4 size 0x4 */
    void *mkds_name_str;

    /* off 0x8 size 0x4 */
    void *mkds_desc_str;

} __attribute__((packed));
_Static_assert(sizeof(StructBAN) == 0xC, "StructBAN definition");

/* size 0x2 */
struct StructMissionLevelStageInfo {
    /* off 0x0 size 0x1 */
    u8 beaten;

    /* off 0x1 size 0x1 */
    u8 rank;

} __attribute__((packed));
_Static_assert(sizeof(StructMissionLevelStageInfo) == 0x2, "StructMissionLevelStageInfo definition");

/* size 0x18 */
struct Mdl0_BlockDictHeader {
    /* off 0x0 size 0x8 */
    CommonBlockHeader hdr;

    /* off 0x8 size 0x10 */
    Dict_Header dict;

} __attribute__((packed));
_Static_assert(sizeof(Mdl0_BlockDictHeader) == 0x18, "Mdl0_BlockDictHeader definition");

/* size 0x16 */
struct StructPA {
    /* off 0x0 size 0x1 */
    u8 p1;

    /* off 0x1 size 0x1 */
    u8 p2;

    /* off 0x2 size 0x14 */
    u16 name[10];

} __attribute__((packed));
_Static_assert(sizeof(StructPA) == 0x16, "StructPA definition");

/* size 0xC */
struct NFTR_CharacterWidthBlockImpl {
    /* off 0x0 size 0x2 */
    u16 first_tile_idx;

    /* off 0x2 size 0x2 */
    u16 last_tile_idx;

    /* off 0x4 size 0x4 */
    u32 unk_zero;

    /* off 0x8 size 0x4 */
    NFTR_CharacterWidthBlockTileEntry *entries;

} __attribute__((packed));
_Static_assert(sizeof(NFTR_CharacterWidthBlockImpl) == 0xC, "NFTR_CharacterWidthBlockImpl definition");

/* size 0x28 */
struct StructFON {
    /* off 0x0 size 0x4 */
    void *some_str;

    /* off 0x4 size 0x24 */
    int as[9];

} __attribute__((packed));
_Static_assert(sizeof(StructFON) == 0x28, "StructFON definition");

/* size 0x10 */
struct NFTR_CharacterMapBlockImpl {
    /* off 0x0 size 0x2 */
    u16 first_char;

    /* off 0x2 size 0x2 */
    u16 last_char;

    /* off 0x4 size 0x4 */
    u32 map_type;

    /* off 0x8 size 0x4 */
    NFTR_CharacterMapBlockImpl *next_map_offset_post_header;

    /* off 0xC size 0x2 */
    u16 first_char_tile_no;

    /* off 0xE size 0x2 */
    u16 zero;

} __attribute__((packed));
_Static_assert(sizeof(NFTR_CharacterMapBlockImpl) == 0x10, "NFTR_CharacterMapBlockImpl definition");

/* size 0x3 */
struct NFTR_CharacterWidthBlockTileEntry {
    /* off 0x0 size 0x1 */
    u8 left_spacing;

    /* off 0x1 size 0x1 */
    u8 char_bitmap_width;

    /* off 0x2 size 0x1 */
    u8 char_total_width;

} __attribute__((packed));
_Static_assert(sizeof(NFTR_CharacterWidthBlockTileEntry) == 0x3, "NFTR_CharacterWidthBlockTileEntry definition");

/* size 0x20 */
struct TimeTrialRecordEntry {
    /* off 0x0 size 0x2 */
    u16 milli;

    /* off 0x2 size 0x1 */
    u8 min;

    /* off 0x3 size 0x1 */
    u8 sec;

    /* off 0x4 size 0x14 */
    u16 racer_name[10];

    /* off 0x18 size 0x1 */
    u8 is_valid;

    /* off 0x19 size 0x1 */
    u8 character_id;

    /* off 0x1A size 0x1 */
    u8 kart_id;

    /* off 0x1B size 0x5 */
    u8 pad[5];

} __attribute__((packed));
_Static_assert(sizeof(TimeTrialRecordEntry) == 0x20, "TimeTrialRecordEntry definition");

/* size 0xE8 */
struct StructE8 {
    /* off 0x0 size 0x4 */
    void (__cdecl *some_fn)();

    /* off 0x4 size 0x4 */
    u32 maybe_some_fn_rel_flag;

    /* off 0x8 size 0x4 */
    u32 is_cur_time_trial_recorded;

    /* off 0xC size 0x4 */
    u32 cur_or_last_time_trial_record_idx;

    /* off 0x10 size 0x4 */
    u32 is_cur_time_trial_as_least_lap_recorded;

    /* off 0x14 size 0x2 */
    u16 least_time_lap_id;

    /* off 0x16 size 0x2 */
    u16 e62;

    /* off 0x18 size 0x4 */
    u32 is_saving_tt;

    /* off 0x1C size 0xA0 */
    TimeTrialRecordEntry time_trial_records[5];

    /* off 0xBC size 0x20 */
    TimeTrialRecordEntry cur_time_trial;

    /* off 0xDC size 0x4 */
    u32 unk8;

    /* off 0xE0 size 0x4 */
    u32 unk9;

    /* off 0xE4 size 0x4 */
    u32 some_counter_up_to_24;

} __attribute__((packed));
_Static_assert(sizeof(StructE8) == 0xE8, "StructE8 definition");

/* size 0x1C */
struct SaveDataTimeTrialCourseRecordEntry {
    /* off 0x0 size 0x1 */
    __int8 _bf_0;

    /* off 0x1 size 0x1 */
    __int8 _bf_1;

    /* off 0x2 size 0x1 */
    __int8 _bf_2;

    /* off 0x3 size 0x1 */
    __int8 _bf_3;

    /* off 0x4 size 0x1 */
    u8 kart_id;

    /* off 0x5 size 0x1 */
    u8 unk5;

    /* off 0x6 size 0x1 */
    u8 unk6;

    /* off 0x7 size 0x1 */
    u8 unk7;

    /* off 0x8 size 0x14 */
    u16 nickname[10];

} __attribute__((packed));
_Static_assert(sizeof(SaveDataTimeTrialCourseRecordEntry) == 0x1C, "SaveDataTimeTrialCourseRecordEntry definition");

/* size 0xA */
struct StructEC {
    /* off 0x0 size 0x4 */
    u32 unk;

    /* off 0x4 size 0x4 */
    u16 chars[2];

    /* off 0x8 size 0x1 */
    u8 unk2;

    /* off 0x9 size 0x1 */
    u8 unk3;

} __attribute__((packed));
_Static_assert(sizeof(StructEC) == 0xA, "StructEC definition");

/* size 0x40 */
struct StructZESub40 {
    /* off 0x0 size 0x4 */
    StructZESubX *subx_p;

    /* off 0x4 size 0x2 */
    u16 _d21;

    /* off 0x6 size 0x2 */
    u16 _d22;

    /* off 0x8 size 0x4 */
    u32 _d3;

    /* off 0xC size 0x2 */
    u16 d41;

    /* off 0xE size 0x2 */
    u16 d42;

    /* off 0x10 size 0x2 */
    u16 d51;

    /* off 0x12 size 0x2 */
    u16 d52;

    /* off 0x14 size 0x4 */
    u32 _d6;

    /* off 0x18 size 0x2 */
    u16 d71;

    /* off 0x1A size 0x2 */
    u16 d72;

    /* off 0x1C size 0x4 */
    u32 _d8;

    /* off 0x20 size 0x4 */
    u32 _d9;

    /* off 0x24 size 0x4 */
    u32 _d10;

    /* off 0x28 size 0x4 */
    u32 _d11;

    /* off 0x2C size 0x4 */
    u32 _d12;

    /* off 0x30 size 0x2 */
    u16 d131;

    /* off 0x32 size 0x2 */
    u16 d132;

    /* off 0x34 size 0x2 */
    u16 d141;

    /* off 0x36 size 0x2 */
    u16 d142;

    /* off 0x38 size 0x4 */
    u32 _d15;

    /* off 0x3C size 0x4 */
    u32 _d16;

} __attribute__((packed));
_Static_assert(sizeof(StructZESub40) == 0x40, "StructZESub40 definition");

/* size 0x4 */
struct RaceTime {
    /* off 0x0 size 0x2 */
    u16 milli;

    /* off 0x2 size 0x1 */
    u8 min;

    /* off 0x3 size 0x1 */
    u8 sec;

} __attribute__((packed));
_Static_assert(sizeof(RaceTime) == 0x4, "RaceTime definition");

/* size 0x30 */
struct Sound_SdatHeader {
    /* off 0x0 size 0x10 */
    CommonHeader header;

    /* off 0x10 size 0x4 */
    u32 symb_block_offset;

    /* off 0x14 size 0x4 */
    u32 symb_block_size;

    /* off 0x18 size 0x4 */
    u32 info_block_offset;

    /* off 0x1C size 0x4 */
    u32 info_block_size;

    /* off 0x20 size 0x4 */
    u32 fat_block_offset;

    /* off 0x24 size 0x4 */
    u32 fat_block_size;

    /* off 0x28 size 0x4 */
    u32 file_block_offset;

    /* off 0x2C size 0x4 */
    u32 file_block_size;

} __attribute__((packed));
_Static_assert(sizeof(Sound_SdatHeader) == 0x30, "Sound_SdatHeader definition");

/* size 0x48 */
struct Sound_Context {
    /* off 0x0 size 0x4 */
    Mem_FrameHeapHead *heap_head;

    /* off 0x4 size 0xC */
    NNSFndList some_list;

    /* off 0x10 size 0x38 */
    u32 unk[14];

} __attribute__((packed));
_Static_assert(sizeof(Sound_Context) == 0x48, "Sound_Context definition");

/* size 0x20 */
struct Sound_AllocationEntryHeader {
    /* off 0x0 size 0xC */
    NNSFndList nested_list;

    /* off 0xC size 0x4 */
    void (__cdecl *dtor_fn)(void *, u16, Sound_Sdat *, u32);

    /* off 0x10 size 0x4 */
    Sound_Sdat *sdat;

    /* off 0x14 size 0x4 */
    void *dtor_fn_custom_arg;

    /* off 0x18 size 0x4 */
    u32 g;

    /* off 0x1C size 0x4 */
    u32 h;

} __attribute__((packed));
_Static_assert(sizeof(Sound_AllocationEntryHeader) == 0x20, "Sound_AllocationEntryHeader definition");

/* size 0x88 */
struct StructGO {
    /* off 0x0 size 0x4 */
    u32 some_milli;

    /* off 0x4 size 0x4 */
    u32 _d2;

    /* off 0x8 size 0x20 */
    u8 str[32];

    /* off 0x28 size 0x4 */
    StructGO *gosub;

    /* off 0x2C size 0x4 */
    u32 some_val;

    /* off 0x30 size 0x2 */
    u16 _d11;

    /* off 0x32 size 0x2 */
    u16 maybe_has_some_val_flag;

    /* off 0x34 size 0x54 */
    u32 data[21];

} __attribute__((packed));
_Static_assert(sizeof(StructGO) == 0x88, "StructGO definition");

/* size 0x9C */
struct StructGA {
    /* off 0x0 size 0x9C */
    u32 gaga[39];

} __attribute__((packed));
_Static_assert(sizeof(StructGA) == 0x9C, "StructGA definition");

/* size 0xC */
struct StructCX {
    /* off 0x0 size 0x4 */
    u32 some_idx;

    /* off 0x4 size 0x4 */
    Sound_Context *ctx;

    /* off 0x8 size 0x4 */
    u32 *some_sseq_id_table;

} __attribute__((packed));
_Static_assert(sizeof(StructCX) == 0xC, "StructCX definition");

/* size 0x40 */
struct Sound_InfoBlockHeader {
    /* off 0x0 size 0x4 */
    u32 magic;

    /* off 0x4 size 0x4 */
    u32 block_size;

    /* off 0x8 size 0x4 */
    u32 sseq_record_offset;

    /* off 0xC size 0x4 */
    u32 sarc_record_offset;

    /* off 0x10 size 0x4 */
    u32 sbnk_record_offset;

    /* off 0x14 size 0x4 */
    u32 swar_record_offset;

    /* off 0x18 size 0x4 */
    u32 player_record_offset;

    /* off 0x1C size 0x4 */
    u32 group_record_offset;

    /* off 0x20 size 0x4 */
    u32 player2_record_offset;

    /* off 0x24 size 0x4 */
    u32 strm_record_offset;

    /* off 0x28 size 0x18 */
    u32 reserved[6];

} __attribute__((packed));
_Static_assert(sizeof(Sound_InfoBlockHeader) == 0x40, "Sound_InfoBlockHeader definition");

/* size 0x8 */
struct Sound_InfoRecord {
    /* off 0x0 size 0x4 */
    u32 count;

    /* off 0x4 size 0x4 */
    u32 info_offsets;

} __attribute__((packed));
_Static_assert(sizeof(Sound_InfoRecord) == 0x8, "Sound_InfoRecord definition");

/* size 0x4 */
struct Sound_SwarInfo {
    /* off 0x0 size 0x4 */
    u32 file_id_and_flags;

} __attribute__((packed));
_Static_assert(sizeof(Sound_SwarInfo) == 0x4, "Sound_SwarInfo definition");

/* size 0x10 */
struct Sound_FatEntry {
    /* off 0x0 size 0x4 */
    u32 offset;

    /* off 0x4 size 0x4 */
    u32 size;

    /* off 0x8 size 0x4 */
    u32 dyn_offset;

    /* off 0xC size 0x4 */
    u32 unk;

} __attribute__((packed));
_Static_assert(sizeof(Sound_FatEntry) == 0x10, "Sound_FatEntry definition");

/* size 0xC */
struct Sound_FatBlockHeader {
    /* off 0x0 size 0x4 */
    u32 magic;

    /* off 0x4 size 0x4 */
    u32 block_size;

    /* off 0x8 size 0x4 */
    u32 file_count;

} __attribute__((packed));
_Static_assert(sizeof(Sound_FatBlockHeader) == 0xC, "Sound_FatBlockHeader definition");

/* size 0xC */
struct Sound_SbnkInfo {
    /* off 0x0 size 0x4 */
    u32 file_id;

    /* off 0x4 size 0x8 */
    u16 swar_ids[4];

} __attribute__((packed));
_Static_assert(sizeof(Sound_SbnkInfo) == 0xC, "Sound_SbnkInfo definition");

/* size 0x3C */
struct Sound_SwarHeader {
    /* off 0x0 size 0x10 */
    CommonHeader header;

    /* off 0x10 size 0x4 */
    u32 data_magic;

    /* off 0x14 size 0x4 */
    u32 file_size;

    /* off 0x18 size 0x20 */
    u32 dyn[8];

    /* off 0x38 size 0x4 */
    u32 swav_count;

} __attribute__((packed));
_Static_assert(sizeof(Sound_SwarHeader) == 0x3C, "Sound_SwarHeader definition");

/* size 0xC */
struct Sound_SseqInfo {
    /* off 0x0 size 0x4 */
    u32 file_id;

    /* off 0x4 size 0x2 */
    u16 sbnk_file_id;

    /* off 0x6 size 0x1 */
    u8 volume;

    /* off 0x7 size 0x1 */
    u8 channel_prio;

    /* off 0x8 size 0x1 */
    u8 player_prio;

    /* off 0x9 size 0x1 */
    u8 player_no;

    /* off 0xA size 0x2 */
    u8 unk_pad[2];

} __attribute__((packed));
_Static_assert(sizeof(Sound_SseqInfo) == 0xC, "Sound_SseqInfo definition");

/* size 0x4 */
struct Sound_SarcInfo {
    /* off 0x0 size 0x4 */
    u32 file_id;

} __attribute__((packed));
_Static_assert(sizeof(Sound_SarcInfo) == 0x4, "Sound_SarcInfo definition");

/* size 0x20 */
struct StructVO {
    /* off 0x0 size 0x4 */
    u32 _v1;

    /* off 0x4 size 0x4 */
    u32 _v2;

    /* off 0x8 size 0x4 */
    u32 _v3;

    /* off 0xC size 0x4 */
    u32 _v4;

    /* off 0x10 size 0x4 */
    u32 _v5;

    /* off 0x14 size 0x4 */
    u32 _v6;

    /* off 0x18 size 0x4 */
    u32 _v7;

    /* off 0x1C size 0x4 */
    u32 _v8;

} __attribute__((packed));
_Static_assert(sizeof(StructVO) == 0x20, "StructVO definition");

/* size 0x8 */
struct Sound_GroupInfoFile {
    /* off 0x0 size 0x1 */
    u8 fmt_type;

    /* off 0x1 size 0x1 */
    u8 load_flags;

    /* off 0x2 size 0x2 */
    u8 unk_2[2];

    /* off 0x4 size 0x4 */
    u32 fmt_id;

} __attribute__((packed));
_Static_assert(sizeof(Sound_GroupInfoFile) == 0x8, "Sound_GroupInfoFile definition");

/* size 0x8 */
struct Os_MutexQueue {
    /* off 0x0 size 0x4 */
    Os_Mutex *prev_mutex;

    /* off 0x4 size 0x4 */
    Os_Mutex *next_mutex;

} __attribute__((packed));
_Static_assert(sizeof(Os_MutexQueue) == 0x8, "Os_MutexQueue definition");

/* size 0xC */
struct Sound_Alarm {
    /* off 0x0 size 0x4 */
    void (__cdecl *fn)(void *);

    /* off 0x4 size 0x4 */
    void *fn_arg;

    /* off 0x8 size 0x1 */
    u8 count;

    /* off 0x9 size 0x3 */
    u8 pad[3];

} __attribute__((packed));
_Static_assert(sizeof(Sound_Alarm) == 0xC, "Sound_Alarm definition");

/* size 0x1C */
struct StructIG {
    /* off 0x0 size 0x2 */
    u16 g1;

    /* off 0x2 size 0x2 */
    u16 g2;

    /* off 0x4 size 0x4 */
    u32 g3;

    /* off 0x8 size 0x4 */
    u16 *g4;

    /* off 0xC size 0x4 */
    u16 *g5;

    /* off 0x10 size 0x4 */
    u32 g6;

    /* off 0x14 size 0x4 */
    u32 some_size;

    /* off 0x18 size 0x2 */
    u16 g8;

    /* off 0x1A size 0x2 */
    u16 g9;

} __attribute__((packed));
_Static_assert(sizeof(StructIG) == 0x1C, "StructIG definition");

/* size 0x10 */
struct Rtc_Date {
    /* off 0x0 size 0x4 */
    u32 year;

    /* off 0x4 size 0x4 */
    u32 month;

    /* off 0x8 size 0x4 */
    u32 day;

    /* off 0xC size 0x4 */
    int week;

} __attribute__((packed));
_Static_assert(sizeof(Rtc_Date) == 0x10, "Rtc_Date definition");

/* size 0xC */
struct Util_PrintContext {
    /* off 0x0 size 0x4 */
    int space_left;

    /* off 0x4 size 0x4 */
    char *str_end;

    /* off 0x8 size 0x4 */
    char *str_start;

} __attribute__((packed));
_Static_assert(sizeof(Util_PrintContext) == 0xC, "Util_PrintContext definition");

/* size 0x20 */
struct StructANN {
    /* off 0x0 size 0x4 */
    StructANN *maybe_next_ann;

    /* off 0x4 size 0x4 */
    u32 mask_bit0_and_thr_prio_rest;

    /* off 0x8 size 0x4 */
    void (__fastcall *fn_ptr_2)(StructANN *);

    /* off 0xC size 0x4 */
    void (__fastcall *fn_ptr)(StructANN *);

    /* off 0x10 size 0x4 */
    u32 n1;

    /* off 0x14 size 0x4 */
    u32 n2;

    /* off 0x18 size 0x4 */
    u32 n3;

    /* off 0x1C size 0x4 */
    u32 n4;

} __attribute__((packed));
_Static_assert(sizeof(StructANN) == 0x20, "StructANN definition");

/* size 0x8 */
struct StructDWW {
    /* off 0x0 size 0x4 */
    u32 another_profile_id;

    /* off 0x4 size 0x4 */
    u32 another_friend_code_flags;

} __attribute__((packed));
_Static_assert(sizeof(StructDWW) == 0x8, "StructDWW definition");

/* size 0x40 */
struct PlayerProfileInfo {
    /* off 0x0 size 0x4 */
    u32 size;

    /* off 0x4 size 0xC */
    FriendCode friend_code_1;

    /* off 0x10 size 0xC */
    FriendCode friend_code_2;

    /* off 0x1C size 0x4 */
    u32 profile_id;

    /* off 0x20 size 0x4 */
    u32 flags;

    /* off 0x24 size 0x4 */
    u32 game_id;

    /* off 0x28 size 0x4 */
    u32 unk_x28;

    /* off 0x2C size 0x4 */
    u32 unk_x2C;

    /* off 0x30 size 0x4 */
    u32 unk_x30;

    /* off 0x34 size 0x4 */
    u32 unk_x34;

    /* off 0x38 size 0x4 */
    u32 unk_x38;

    /* off 0x3C size 0x4 */
    u32 crc_checksum;

} __attribute__((packed));
_Static_assert(sizeof(PlayerProfileInfo) == 0x40, "PlayerProfileInfo definition");

/* size 0x20 */
struct BMG_Header {
    /* off 0x0 size 0x4 */
    u32 magic_h;

    /* off 0x4 size 0x4 */
    u32 magic_l;

    /* off 0x8 size 0x4 */
    u32 total_size;

    /* off 0xC size 0x4 */
    u32 block_count;

    /* off 0x10 size 0x1 */
    u8 encoding;

    /* off 0x11 size 0xF */
    u8 pad[15];

} __attribute__((packed));
_Static_assert(sizeof(BMG_Header) == 0x20, "BMG_Header definition");

/* size 0xE0 */
struct KartOffsetDataEntry {
    /* off 0x0 size 0x10 */
    char tire_base_name[16];

    /* off 0x10 size 0x4 */
    fx32 front_tire_scale;

    /* off 0x14 size 0x30 */
    VecFx32 tire_positions[4];

    /* off 0x44 size 0x9C */
    VecFx32 character_positions[13];

} __attribute__((packed));
_Static_assert(sizeof(KartOffsetDataEntry) == 0xE0, "KartOffsetDataEntry definition");

/* size 0xC */
struct CharacterKartContextSub54Sub0 {
    /* off 0x0 size 0x4 */
    u32 g1;

    /* off 0x4 size 0x4 */
    u32 g2;

    /* off 0x8 size 0x4 */
    u32 g3;

} __attribute__((packed));
_Static_assert(sizeof(CharacterKartContextSub54Sub0) == 0xC, "CharacterKartContextSub54Sub0 definition");

/* size 0x18 */
struct StructCAS {
    /* off 0x0 size 0x4 */
    u32 character_id;

    /* off 0x4 size 0x4 */
    u32 kart_id;

    /* off 0x8 size 0x4 */
    u32 type;

    /* off 0xC size 0x4 */
    u32 team;

    /* off 0x10 size 0x4 */
    u32 c5;

    /* off 0x14 size 0x4 */
    u32 c6;

} __attribute__((packed));
_Static_assert(sizeof(StructCAS) == 0x18, "StructCAS definition");

/* size 0x48 */
struct StructKTB {
    /* off 0x0 size 0x1 */
    u8 kta1;

    /* off 0x1 size 0x1 */
    u8 kta2;

    /* off 0x2 size 0x1 */
    u8 kta3;

    /* off 0x3 size 0x1 */
    u8 kta4;

    /* off 0x4 size 0x4 */
    u32 kt2;

    /* off 0x8 size 0x4 */
    u32 kt3;

    /* off 0xC size 0x4 */
    u32 kt4;

    /* off 0x10 size 0x4 */
    u32 kt5;

    /* off 0x14 size 0x4 */
    u32 kt6;

    /* off 0x18 size 0x4 */
    u32 kt7;

    /* off 0x1C size 0x4 */
    u32 kt8;

    /* off 0x20 size 0x4 */
    u32 kt9;

    /* off 0x24 size 0x4 */
    u32 kt10;

    /* off 0x28 size 0x4 */
    u32 kt11;

    /* off 0x2C size 0x4 */
    u32 kt12;

    /* off 0x30 size 0x4 */
    u32 kt13;

    /* off 0x34 size 0x4 */
    u32 kt14;

    /* off 0x38 size 0x4 */
    u32 kt15;

    /* off 0x3C size 0x4 */
    u32 kt16;

    /* off 0x40 size 0x4 */
    u32 kt17;

    /* off 0x44 size 0x4 */
    void **kart_appear_ktbl_ptr;

} __attribute__((packed));
_Static_assert(sizeof(StructKTB) == 0x48, "StructKTB definition");

/* size 0x20 */
struct Os_MessageQueue {
    /* off 0x0 size 0x8 */
    Os_ThreadQueue send_queue;

    /* off 0x8 size 0x8 */
    Os_ThreadQueue recv_queue;

    /* off 0x10 size 0x4 */
    void **msg_list;

    /* off 0x14 size 0x4 */
    int msg_count;

    /* off 0x18 size 0x4 */
    int first_idx;

    /* off 0x1C size 0x4 */
    int used_count;

} __attribute__((packed));
_Static_assert(sizeof(Os_MessageQueue) == 0x20, "Os_MessageQueue definition");

/* size 0x30 */
struct DriverConfig {
    /* off 0x0 size 0x4 */
    u32 character_id;

    /* off 0x4 size 0x4 */
    u32 kart_id;

    /* off 0x8 size 0x4 */
    u32 type;

    /* off 0xC size 0x4 */
    u32 team;

    /* off 0x10 size 0x4 */
    u32 unk10_racecfg_3D5_arr_idx;

    /* off 0x14 size 0x4 */
    u32 driver_idx;

    /* off 0x18 size 0x4 */
    u32 ghost_type;

    /* off 0x1C size 0x2 */
    u16 unk1C_some_flag_1_3D5arr;

    /* off 0x1E size 0x1 */
    u8 cpu_id;

    /* off 0x1F size 0x1 */
    u8 unk1F;

    /* off 0x20 size 0x4 */
    u16 *racer_name_p;

    /* off 0x24 size 0x4 */
    void *emblem_data_p;

    /* off 0x28 size 0x4 */
    FriendCode *friend_code_p;

    /* off 0x2C size 0x1 */
    u8 use_custom_emblem;

    /* off 0x2D size 0x1 */
    u8 some_maybe_wifi_idx;

    /* off 0x2E size 0x1 */
    u8 worst_star_rank_val;

    /* off 0x2F size 0x1 */
    u8 unk2F;

} __attribute__((packed));
_Static_assert(sizeof(DriverConfig) == 0x30, "DriverConfig definition");

/* size 0xC */
struct StructB358 {
    /* off 0x0 size 0x4 */
    u32 maybe_is_counting;

    /* off 0x4 size 0x4 */
    u32 race_countdown_ended;

    /* off 0x8 size 0x4 */
    int race_start_countdown;

} __attribute__((packed));
_Static_assert(sizeof(StructB358) == 0xC, "StructB358 definition");

/* size 0x10 */
struct RaceOptionMenuEntryDrawContext {
    /* off 0x0 size 0x4 */
    G2d_Sprite *canvas;

    /* off 0x4 size 0x4 */
    G2d_Font *font;

    /* off 0x8 size 0x4 */
    int inter_char_width;

    /* off 0xC size 0x4 */
    u32 unk;

} __attribute__((packed));
_Static_assert(sizeof(RaceOptionMenuEntryDrawContext) == 0x10, "RaceOptionMenuEntryDrawContext definition");

/* size 0x1C */
struct RaceOptionMenuEntry {
    /* off 0x0 size 0x18 */
    u32 opt_idxs[6];

    /* off 0x18 size 0x4 */
    u32 opt_count;

} __attribute__((packed));
_Static_assert(sizeof(RaceOptionMenuEntry) == 0x1C, "RaceOptionMenuEntry definition");

/* size 0x28 */
struct StructCL {
    /* off 0x0 size 0x4 */
    u32 cl1;

    /* off 0x4 size 0x4 */
    u32 cl2;

    /* off 0x8 size 0x4 */
    u32 cl3;

    /* off 0xC size 0x4 */
    u32 some_h;

    /* off 0x10 size 0x4 */
    u32 char_bitmap_width;

    /* off 0x14 size 0x4 */
    u32 cl6;

    /* off 0x18 size 0x4 */
    u32 cl7;

    /* off 0x1C size 0x4 */
    u32 cl8;

    /* off 0x20 size 0x4 */
    u32 cl9;

    /* off 0x24 size 0x4 */
    u32 color_m1;

} __attribute__((packed));
_Static_assert(sizeof(StructCL) == 0x28, "StructCL definition");

/* size 0x8 */
struct G2d_Glyph {
    /* off 0x0 size 0x4 */
    NFTR_CharacterWidthBlockTileEntry *ch_w_tile_entry;

    /* off 0x4 size 0x4 */
    u32 c2;

} __attribute__((packed));
_Static_assert(sizeof(G2d_Glyph) == 0x8, "G2d_Glyph definition");

/* size 0x4 */
struct StructRCX {
    /* off 0x0 size 0x2 */
    u16 maybe_milli;

    /* off 0x2 size 0x1 */
    u8 maybe_min;

    /* off 0x3 size 0x1 */
    u8 maybe_sec;

} __attribute__((packed));
_Static_assert(sizeof(StructRCX) == 0x4, "StructRCX definition");

/* size 0x4 */
struct StructNKPGFlags {
    /* off 0x0 size 0x1 */
    unsigned __int8 min;

    /* off 0x1 size 0x1 */
    __int8 _bf_1;

    /* off 0x2 size 0x1 */
    __int8 _bf_2;

    /* off 0x3 size 0x1 */
    __int8 _bf_3;

} __attribute__((packed));
_Static_assert(sizeof(StructNKPGFlags) == 0x4, "StructNKPGFlags definition");

/* size 0x3C */
struct NkmOBJI {
    /* off 0x0 size 0xC */
    VecFx32 pos_v;

    /* off 0xC size 0xC */
    VecFx32 rot_v;

    /* off 0x18 size 0xC */
    VecFx32 scale_v;

    /* off 0x24 size 0x2 */
    u16 obj_id;

    /* off 0x26 size 0x2 */
    u16 route_id;

    /* off 0x28 size 0x10 */
    u32 obj_params[4];

    /* off 0x38 size 0x4 */
    u32 show_in_time_trials;

} __attribute__((packed));
_Static_assert(sizeof(NkmOBJI) == 0x3C, "NkmOBJI definition");

/* size 0x1C */
struct StructRK {
    /* off 0x0 size 0x4 */
    u32 rk1;

    /* off 0x4 size 0x4 */
    u32 maybe_drift_count;

    /* off 0x8 size 0x4 */
    u32 item_hit_count;

    /* off 0xC size 0x4 */
    u32 some_offroad_time_count;

    /* off 0x10 size 0x4 */
    u32 wall_hit_count;

    /* off 0x14 size 0x4 */
    u32 damage_times;

    /* off 0x18 size 0x4 */
    u32 respawn_times;

} __attribute__((packed));
_Static_assert(sizeof(StructRK) == 0x1C, "StructRK definition");

/* size 0x24 */
struct SkillRankpoints {
    /* off 0x0 size 0x4 */
    int rank_time_delta_points;

    /* off 0x4 size 0x4 */
    int first_place_percentage_points;

    /* off 0x8 size 0x4 */
    int start_boost_points;

    /* off 0xC size 0x4 */
    int drift_points;

    /* off 0x10 size 0x4 */
    int item_hit_points;

    /* off 0x14 size 0x4 */
    int off_road_time_points;

    /* off 0x18 size 0x4 */
    int wall_hit_points;

    /* off 0x1C size 0x4 */
    int damage_points;

    /* off 0x20 size 0x4 */
    int respawn_points;

} __attribute__((packed));
_Static_assert(sizeof(SkillRankpoints) == 0x24, "SkillRankpoints definition");

/* size 0x8 */
struct RanktimeCourseEntry {
    /* off 0x0 size 0x1 */
    u8 internal_course_id;

    /* off 0x1 size 0x1 */
    u8 unk1_pad;

    /* off 0x2 size 0x2 */
    u16 ranktime_50cc;

    /* off 0x4 size 0x2 */
    u16 ranktime_100cc;

    /* off 0x6 size 0x2 */
    u16 ranktime_150cc;

} __attribute__((packed));
_Static_assert(sizeof(RanktimeCourseEntry) == 0x8, "RanktimeCourseEntry definition");

/* size 0x1C */
struct NkmKTPM {
    /* off 0x0 size 0xC */
    VecFx32 pos_v;

    /* off 0xC size 0xC */
    VecFx32 rot_v;

    /* off 0x18 size 0x2 */
    u16 unk_pad;

    /* off 0x1A size 0x2 */
    u16 idx;

} __attribute__((packed));
_Static_assert(sizeof(NkmKTPM) == 0x1C, "NkmKTPM definition");

/* size 0xC */
struct StructBOA {
    /* off 0x0 size 0x2 */
    __int16 ba1;

    /* off 0x2 size 0x2 */
    u16 ba2;

    /* off 0x4 size 0x2 */
    u16 ba3;

    /* off 0x6 size 0x2 */
    u16 ba4;

    /* off 0x8 size 0x4 */
    u32 ba5;

} __attribute__((packed));
_Static_assert(sizeof(StructBOA) == 0xC, "StructBOA definition");

/* size 0x44 */
struct StructBOC {
    /* off 0x0 size 0x4 */
    u32 boc1;

    /* off 0x4 size 0x4 */
    u32 boc2;

    /* off 0x8 size 0x4 */
    u32 boc3;

    /* off 0xC size 0x4 */
    u32 boc4;

    /* off 0x10 size 0x4 */
    u32 boc5;

    /* off 0x14 size 0x4 */
    u32 boc6;

    /* off 0x18 size 0x4 */
    u32 boc7;

    /* off 0x1C size 0x4 */
    u32 boc8;

    /* off 0x20 size 0x4 */
    u32 boc9;

    /* off 0x24 size 0x4 */
    u32 boc10;

    /* off 0x28 size 0x4 */
    u32 boc11;

    /* off 0x2C size 0x4 */
    u32 boc12;

    /* off 0x30 size 0x4 */
    u32 boc13;

    /* off 0x34 size 0x4 */
    u32 boc14;

    /* off 0x38 size 0x4 */
    u32 boc15;

    /* off 0x3C size 0x4 */
    u32 boc16;

    /* off 0x40 size 0x2 */
    u16 boc17;

    /* off 0x42 size 0x2 */
    u16 boc18;

} __attribute__((packed));
_Static_assert(sizeof(StructBOC) == 0x44, "StructBOC definition");

/* size 0xC */
struct StructMD {
    /* off 0x0 size 0x1 */
    u8 model_count;

    /* off 0x1 size 0x1 */
    u8 nsbca_count;

    /* off 0x2 size 0x1 */
    u8 nsbma_count;

    /* off 0x3 size 0x1 */
    u8 nsbtp_count;

    /* off 0x4 size 0x4 */
    u32 model_anim_name_ptr;

    /* off 0x8 size 0x4 */
    u32 md3;

} __attribute__((packed));
_Static_assert(sizeof(StructMD) == 0xC, "StructMD definition");

/* size 0x14 */
struct StructBM {
    /* off 0x0 size 0x4 */
    Model *model_arr;

    /* off 0x4 size 0x4 */
    Animation *nsbca_arr;

    /* off 0x8 size 0x4 */
    Animation *nsbma_arr;

    /* off 0xC size 0x4 */
    Animation *nsbtp_arr;

    /* off 0x10 size 0x2 */
    u16 model_count;

    /* off 0x12 size 0x2 */
    u16 bm6;

} __attribute__((packed));
_Static_assert(sizeof(StructBM) == 0x14, "StructBM definition");

/* size 0x6 */
struct StructA {
    /* off 0x0 size 0x6 */
    u8 unk[6];

} __attribute__((packed));
_Static_assert(sizeof(StructA) == 0x6, "StructA definition");

/* size 0x40 */
struct Sound_SymbHeader {
    /* off 0x0 size 0x4 */
    u32 magic;

    /* off 0x4 size 0x4 */
    u32 block_size;

    /* off 0x8 size 0x4 */
    u32 sseq_count;

    /* off 0xC size 0x4 */
    u32 sarc_count;

    /* off 0x10 size 0x4 */
    u32 sbnk_count;

    /* off 0x14 size 0x4 */
    u32 swar_count;

    /* off 0x18 size 0x4 */
    u32 player_count;

    /* off 0x1C size 0x4 */
    u32 group_coint;

    /* off 0x20 size 0x4 */
    u32 player2_count;

    /* off 0x24 size 0x4 */
    u32 strm_count;

    /* off 0x28 size 0x18 */
    u32 reserved[6];

} __attribute__((packed));
_Static_assert(sizeof(Sound_SymbHeader) == 0x40, "Sound_SymbHeader definition");

/* size 0x10 */
struct Sound_FileBlockHeader {
    /* off 0x0 size 0x4 */
    u32 magic;

    /* off 0x4 size 0x4 */
    u32 block_size;

    /* off 0x8 size 0x4 */
    u32 file_count;

    /* off 0xC size 0x4 */
    u32 pad;

} __attribute__((packed));
_Static_assert(sizeof(Sound_FileBlockHeader) == 0x10, "Sound_FileBlockHeader definition");

/* size 0x4 */
struct Sound_GroupInfo {
    /* off 0x0 size 0x4 */
    u32 file_count;

} __attribute__((packed));
_Static_assert(sizeof(Sound_GroupInfo) == 0x4, "Sound_GroupInfo definition");

/* size 0x18 */
struct Sound_Command {
    /* off 0x0 size 0x4 */
    Sound_Command *next;

    /* off 0x4 size 0x4 */
    int id;

    /* off 0x8 size 0x10 */
    u32 args[4];

} __attribute__((packed));
_Static_assert(sizeof(Sound_Command) == 0x18, "Sound_Command definition");

/* size 0xC */
struct Rtc_Time {
    /* off 0x0 size 0x4 */
    u32 hour;

    /* off 0x4 size 0x4 */
    u32 minute;

    /* off 0x8 size 0x4 */
    u32 second;

} __attribute__((packed));
_Static_assert(sizeof(Rtc_Time) == 0xC, "Rtc_Time definition");

/* size 0x10 */
struct Bmg_Inf1Block {
    /* off 0x0 size 0x8 */
    CommonBlockHeader header;

    /* off 0x8 size 0x2 */
    u16 msg_count;

    /* off 0xA size 0x2 */
    u16 msg_entry_size;

    /* off 0xC size 0x4 */
    u32 file_id;

} __attribute__((packed));
_Static_assert(sizeof(Bmg_Inf1Block) == 0x10, "Bmg_Inf1Block definition");

/* size 0x8 */
struct Bmg_Dat1Block {
    /* off 0x0 size 0x8 */
    CommonBlockHeader header;

} __attribute__((packed));
_Static_assert(sizeof(Bmg_Dat1Block) == 0x8, "Bmg_Dat1Block definition");

/* size 0xC */
struct NARC_FATBlock {
    /* off 0x0 size 0x8 */
    CommonBlockHeader hdr;

    /* off 0x8 size 0x2 */
    u16 file_count;

    /* off 0xA size 0x2 */
    u16 res;

} __attribute__((packed));
_Static_assert(sizeof(NARC_FATBlock) == 0xC, "NARC_FATBlock definition");

/* size 0x98 */
struct KartPhysicalParam {
    /* off 0x0 size 0x4 */
    fx32 collision_sphere_size;

    /* off 0x4 size 0x4 */
    fx32 collision_sphere_z_offset;

    /* off 0x8 size 0x4 */
    u8 unk8[4];

    /* off 0xC size 0x2 */
    fx16 weight;

    /* off 0xE size 0x2 */
    i16 drift_boost_time;

    /* off 0x10 size 0x4 */
    fx32 max_speed;

    /* off 0x14 size 0x4 */
    fx32 base_acceleration;

    /* off 0x18 size 0x4 */
    fx32 unk18;

    /* off 0x1C size 0x4 */
    fx32 unk1C;

    /* off 0x20 size 0x4 */
    fx32 drift_base_acceleration;

    /* off 0x24 size 0x4 */
    fx32 unk24;

    /* off 0x28 size 0x4 */
    fx32 unk28;

    /* off 0x2C size 0x4 */
    fx32 deceleration;

    /* off 0x30 size 0x2 */
    fx16 handling;

    /* off 0x32 size 0x2 */
    fx16 drift;

    /* off 0x34 size 0x4 */
    fx32 drift_turning_compensation;

    /* off 0x38 size 0x30 */
    fx32 collision_speed_minus_dir_multipliers[12];

    /* off 0x68 size 0x30 */
    fx32 collision_speed_multipliers[12];

} __attribute__((packed));
_Static_assert(sizeof(KartPhysicalParam) == 0x98, "KartPhysicalParam definition");

/* size 0x14 */
struct StructB3EC {
    /* off 0x0 size 0x4 */
    u32 b1;

    /* off 0x4 size 0x4 */
    u32 b2;

    /* off 0x8 size 0x4 */
    u32 b3;

    /* off 0xC size 0x4 */
    u32 b4;

    /* off 0x10 size 0x4 */
    u32 b5;

} __attribute__((packed));
_Static_assert(sizeof(StructB3EC) == 0x14, "StructB3EC definition");

/* size 0xC */
struct StructDP {
    /* off 0x0 size 0x4 */
    u32 dp1;

    /* off 0x4 size 0x4 */
    u32 dp2;

    /* off 0x8 size 0x4 */
    u32 dp3;

} __attribute__((packed));
_Static_assert(sizeof(StructDP) == 0xC, "StructDP definition");

/* size 0x1C */
struct NkmKTPC {
    /* off 0x0 size 0xC */
    VecFx32 pos_v;

    /* off 0xC size 0xC */
    VecFx32 rot_v;

    /* off 0x18 size 0x2 */
    u16 unk;

    /* off 0x1A size 0x2 */
    u16 cannon_idx;

} __attribute__((packed));
_Static_assert(sizeof(NkmKTPC) == 0x1C, "NkmKTPC definition");

/* size 0x18 */
struct NkmEPOI {
    /* off 0x0 size 0xC */
    VecFx32 pos_v;

    /* off 0xC size 0x4 */
    u32 scale;

    /* off 0x10 size 0x2 */
    u16 drifting;

    /* off 0x12 size 0x2 */
    u16 unk1;

    /* off 0x14 size 0x4 */
    u32 unk2;

} __attribute__((packed));
_Static_assert(sizeof(NkmEPOI) == 0x18, "NkmEPOI definition");

/* size 0xC */
struct NkmEPAT {
    /* off 0x0 size 0x2 */
    u16 point_start;

    /* off 0x2 size 0x2 */
    u16 point_len;

    /* off 0x4 size 0x3 */
    u8 next_group[3];

    /* off 0x7 size 0x3 */
    u8 prev_group[3];

    /* off 0xA size 0x2 */
    u16 section_order;

} __attribute__((packed));
_Static_assert(sizeof(NkmEPAT) == 0xC, "NkmEPAT definition");

/* size 0x190 */
struct KartCrsmat {
    /* off 0x0 size 0x2 */
    u16 gg1;

    /* off 0x2 size 0x2 */
    u16 gg2;

    /* off 0x4 size 0x2 */
    u16 gg3;

    /* off 0x6 size 0x2 */
    u16 gg4;

    /* off 0x8 size 0x188 */
    u32 gg[98];

} __attribute__((packed));
_Static_assert(sizeof(KartCrsmat) == 0x190, "KartCrsmat definition");

/* size 0x14 */
struct NsbtxHeader {
    /* off 0x0 size 0x10 */
    CommonHeader hdr;

    /* off 0x10 size 0x4 */
    u32 tex0_offset;

} __attribute__((packed));
_Static_assert(sizeof(NsbtxHeader) == 0x14, "NsbtxHeader definition");

/* size 0x14 */
struct NsbcaHeader {
    /* off 0x0 size 0x10 */
    CommonHeader hdr;

    /* off 0x10 size 0x4 */
    u32 jnt0_offset;

} __attribute__((packed));
_Static_assert(sizeof(NsbcaHeader) == 0x14, "NsbcaHeader definition");

/* size 0x18 */
struct Jnt0Block {
    /* off 0x0 size 0x8 */
    CommonBlockHeader hdr;

    /* off 0x8 size 0x10 */
    Dict_Header joint_dict;

} __attribute__((packed));
_Static_assert(sizeof(Jnt0Block) == 0x18, "Jnt0Block definition");

/* size 0xC00 */
struct StructT5 {
    /* off 0x0 size 0xC00 */
    u32 gugu[768];

} __attribute__((packed));
_Static_assert(sizeof(StructT5) == 0xC00, "StructT5 definition");

/* size 0x40 */
struct StructVC {
    /* off 0x0 size 0x30 */
    VecFx32 pos_vecs[4];

    /* off 0x30 size 0x4 */
    u32 a1;

    /* off 0x34 size 0x4 */
    u32 some_pos_idx;

    /* off 0x38 size 0x4 */
    u32 a3;

    /* off 0x3C size 0x4 */
    u32 a4;

} __attribute__((packed));
_Static_assert(sizeof(StructVC) == 0x40, "StructVC definition");

/* size 0x1F58 */
struct StructB {
    /* off 0x0 size 0x4 */
    Mem_HeapHead *heap;

    /* off 0x4 size 0x4 */
    void *heap_buf;

    /* off 0x8 size 0x14 */
    StateDualHandler stre7;

    /* off 0x1C size 0x200 */
    u32 buf200[128];

    /* off 0x21C size 0x4 */
    void *buf910;

    /* off 0x220 size 0x8 */
    u32 os111[2];

    /* off 0x228 size 0x1220 */
    StructTK tks[8];

    /* off 0x1448 size 0x4B4 */
    u32 os21[301];

    /* off 0x18FC size 0x4 */
    u32 osso;

    /* off 0x1900 size 0x4 */
    u32 osos;

    /* off 0x1904 size 0x4 */
    u32 ososos;

    /* off 0x1908 size 0x44 */
    u32 os221[17];

    /* off 0x194C size 0x1 */
    u8 ostr1;

    /* off 0x194D size 0x1 */
    u8 some_val60_count;

    /* off 0x194E size 0x1 */
    u8 ostr3;

    /* off 0x194F size 0x1 */
    u8 ostr4;

    /* off 0x1950 size 0x60 */
    u8 buf60[96];

    /* off 0x19B0 size 0x40 */
    PlayerProfileInfo kd;

    /* off 0x19F0 size 0x2D0 */
    FriendCode ius[60];

    /* off 0x1CC0 size 0x3C */
    u8 os3[60];

    /* off 0x1CFC size 0x4 */
    u32 needs_save_friend_codes;

    /* off 0x1D00 size 0x44 */
    u8 buf110_11[68];

    /* off 0x1D44 size 0x44 */
    u8 buf110_12[68];

    /* off 0x1D88 size 0x44 */
    u8 buf110_13[68];

    /* off 0x1DCC size 0x44 */
    u8 buf110_14[68];

    /* off 0x1E10 size 0x110 */
    u8 buf110_2[272];

    /* off 0x1F20 size 0x10 */
    u8 buf10[16];

    /* off 0x1F30 size 0x4 */
    u32 val_1_maybe_heap_created;

    /* off 0x1F34 size 0x4 */
    u32 oh;

    /* off 0x1F38 size 0x4 */
    u32 og;

    /* off 0x1F3C size 0x4 */
    u32 of;

    /* off 0x1F40 size 0x4 */
    u32 oe;

    /* off 0x1F44 size 0x4 */
    u32 od;

    /* off 0x1F48 size 0x4 */
    u32 maybe_net_errno;

    /* off 0x1F4C size 0x1 */
    u8 ob1;

    /* off 0x1F4D size 0x1 */
    u8 ob2;

    /* off 0x1F4E size 0x4 */
    u8 racer_vals_4[4];

    /* off 0x1F52 size 0x1 */
    u8 oa3;

    /* off 0x1F53 size 0x1 */
    u8 maybe_connected_racer_count;

    /* off 0x1F54 size 0x1 */
    u8 some_count;

    /* off 0x1F55 size 0x1 */
    u8 some_racer_id_mask;

    /* off 0x1F56 size 0x1 */
    u8 another_racer_id_mask;

    /* off 0x1F57 size 0x1 */
    u8 some_os3_idx;

} __attribute__((packed));
_Static_assert(sizeof(StructB) == 0x1F58, "StructB definition");

/* size 0x2278 */
struct TextSystemContext {
    /* off 0x0 size 0x4 */
    u32 cur_state;

    /* off 0x4 size 0x4 */
    u32 new_state;

    /* off 0x8 size 0x4 */
    u32 prev_state;

    /* off 0xC size 0x4 */
    u32 frame_counter;

    /* off 0x10 size 0x4 */
    u32 anim_update_counter;

    /* off 0x14 size 0x4 */
    u32 anim_state;

    /* off 0x18 size 0x4 */
    u32 has_top_progress_anim;

    /* off 0x1C size 0x4 */
    u32 has_sub_progress_anim;

    /* off 0x20 size 0x4 */
    u32 param_enable_top_progress_anim;

    /* off 0x24 size 0x4 */
    u32 param_enable_sub_progress_anim;

    /* off 0x28 size 0x4 */
    u32 kind;

    /* off 0x2C size 0x4 */
    u32 is_focused_button_2;

    /* off 0x30 size 0x4 */
    u32 any_button_pressed;

    /* off 0x34 size 0x4 */
    u32 needs_load;

    /* off 0x38 size 0x4 */
    u32 needs_finishing;

    /* off 0x3C size 0x4 */
    u32 fade_in_start_y;

    /* off 0x40 size 0x4 */
    u32 fade_out_end_y;

    /* off 0x44 size 0x4 */
    u32 load_bg_1_flag;

    /* off 0x48 size 0x4 */
    u32 load_bg_2_flag;

    /* off 0x4C size 0x4 */
    u32 load_bg_3_flag;

    /* off 0x50 size 0x4 */
    u32 is_visible;

    /* off 0x54 size 0x1000 */
    u8 buf_teq_top[4096];

    /* off 0x1054 size 0x1000 */
    u8 buf_teq_sub[4096];

    /* off 0x2054 size 0x4 */
    int top_screen_y;

    /* off 0x2058 size 0x4 */
    int sub_screen_y;

    /* off 0x205C size 0x4 */
    u32 top_screen_final_y_abs;

    /* off 0x2060 size 0x4 */
    u32 sub_screen_final_y_abs;

    /* off 0x2064 size 0x4 */
    u32 val1_3;

    /* off 0x2068 size 0x4 */
    u32 val2_3;

    /* off 0x206C size 0x4 */
    u32 blend_flag_top;

    /* off 0x2070 size 0x4 */
    u32 blend_flag_sub;

    /* off 0x2074 size 0x4 */
    u32 param_blend_flag_top;

    /* off 0x2078 size 0x4 */
    u32 param_blend_flag_sub;

    /* off 0x207C size 0x4 */
    u32 bldcnt_evy_coef;

    /* off 0x2080 size 0x4 */
    u32 bldcnt_bg_1st_target_pixel_bits_top;

    /* off 0x2084 size 0x4 */
    u32 bldcnt_bg_1st_target_pixel_bits_sub;

    /* off 0x2088 size 0x4 */
    u32 bldcnt_eva_coef_top;

    /* off 0x208C size 0x4 */
    u32 bldcnt_eva_coef_sub;

    /* off 0x2090 size 0x4 */
    u32 bldcnt_evb_coef_top;

    /* off 0x2094 size 0x4 */
    u32 bldcnt_evb_coef_sub;

    /* off 0x2098 size 0xE0 */
    G2d_Sprite sprites[7];

    /* off 0x2178 size 0x70 */
    G2d_Text texts[7];

    /* off 0x21E8 size 0x1C */
    void *tile_data_arrays[7];

    /* off 0x2204 size 0x1C */
    u32 sprites_enabled[7];

    /* off 0x2220 size 0x4 */
    u32 yu_1;

    /* off 0x2224 size 0x4 */
    u32 yu_2;

    /* off 0x2228 size 0x4 */
    u32 gu_1;

    /* off 0x222C size 0x4 */
    u32 gu_2;

    /* off 0x2230 size 0x4 */
    u32 tileszdiv32_1;

    /* off 0x2234 size 0x4 */
    u32 tileszdiv32_2;

    /* off 0x2238 size 0x4 */
    u32 tileszdiv32_3;

    /* off 0x223C size 0x4 */
    u32 tileszdiv32_4;

    /* off 0x2240 size 0x4 */
    u32 tileszdiv32_5;

    /* off 0x2244 size 0x2 */
    u16 button1_maybe_tile;

    /* off 0x2246 size 0x2 */
    u16 button2_maybe_tile;

    /* off 0x2248 size 0x4 */
    u32 use_direct_input;

    /* off 0x224C size 0x4 */
    u32 bl1;

    /* off 0x2250 size 0x4 */
    u32 button1_press_sseq_id;

    /* off 0x2254 size 0x4 */
    u32 button2_press_sseq_id;

    /* off 0x2258 size 0x4 */
    u32 fade_in_sseq_id;

    /* off 0x225C size 0x1C */
    u32 dls[7];

} __attribute__((packed));
_Static_assert(sizeof(TextSystemContext) == 0x2278, "TextSystemContext definition");

/* size 0xC4 */
struct KeyboardContext {
    /* off 0x0 size 0x4 */
    Mem_HeapHead *heap;

    /* off 0x4 size 0x4 */
    u32 limit_str_len10;

    /* off 0x8 size 0x4 */
    u32 _v2;

    /* off 0xC size 0x4 */
    u32 _v3;

    /* off 0x10 size 0x4 */
    u32 _v4;

    /* off 0x14 size 0x8 */
    u32 vs[2];

    /* off 0x1C size 0x4 */
    u32 vs21;

    /* off 0x20 size 0x4 */
    u32 prev_not_nickname_scene;

    /* off 0x24 size 0x4 */
    u32 _v9;

    /* off 0x28 size 0x4 */
    u32 _v10;

    /* off 0x2C size 0x18 */
    u16 data1[12];

    /* off 0x44 size 0x18 */
    u16 str_some_racer_name[12];

    /* off 0x5C size 0xD */
    char data2_friend_code[13];

    /* off 0x69 size 0x3 */
    u8 _d2[3];

    /* off 0x6C size 0x4 */
    u32 _d3;

    /* off 0x70 size 0x2 */
    u16 prev_scene_id;

    /* off 0x72 size 0x2 */
    __int16 next_scene_id;

    /* off 0x74 size 0x4 */
    u32 _d7;

    /* off 0x78 size 0x4 */
    u32 _d8;

    /* off 0x7C size 0x4 */
    u32 _d9;

    /* off 0x80 size 0x4 */
    u32 _d10;

    /* off 0x84 size 0x2 */
    __int16 some_bg_h_ofs;

    /* off 0x86 size 0x2 */
    u16 d112;

    /* off 0x88 size 0x2 */
    u16 d121;

    /* off 0x8A size 0x2 */
    u16 d122;

    /* off 0x8C size 0x4 */
    u32 _d13;

    /* off 0x90 size 0x4 */
    u32 _d14;

    /* off 0x94 size 0x4 */
    u32 _d15;

    /* off 0x98 size 0x4 */
    u32 _d16;

    /* off 0x9C size 0x4 */
    void *some_bncl_ptr;

    /* off 0xA0 size 0x4 */
    void *some_bncl_ptr_2;

    /* off 0xA4 size 0x4 */
    u32 c3;

    /* off 0xA8 size 0x4 */
    u32 c4;

    /* off 0xAC size 0x4 */
    void *some_bnll_ptr;

    /* off 0xB0 size 0x4 */
    void *some_bnll_ptr_2;

    /* off 0xB4 size 0x4 */
    u32 c7;

    /* off 0xB8 size 0x4 */
    u32 c8;

    /* off 0xBC size 0x4 */
    DisplayConfig *disp_cfg;

    /* off 0xC0 size 0x4 */
    void *common_bmg_ptr;

} __attribute__((packed));
_Static_assert(sizeof(KeyboardContext) == 0xC4, "KeyboardContext definition");

/* size 0x11C */
struct StructNN {
    /* off 0x0 size 0x14 */
    u32 arr_5_1[5];

    /* off 0x14 size 0x14 */
    u32 arr_5_2[5];

    /* off 0x28 size 0x10 */
    u32 arr_4[4];

    /* off 0x38 size 0x4 */
    OamBuffer *some_oam_buf_ptr;

    /* off 0x3C size 0x20 */
    u8 arr_32[32];

    /* off 0x5C size 0x60 */
    u32 nns1[24];

    /* off 0xBC size 0x60 */
    u32 nns2[24];

} __attribute__((packed));
_Static_assert(sizeof(StructNN) == 0x11C, "StructNN definition");

/* size 0xA */
struct StructLUSub {
    /* off 0x0 size 0x2 */
    u16 lu11;

    /* off 0x2 size 0x1 */
    u8 racer_pos;

    /* off 0x3 size 0x1 */
    u8 lu122;

    /* off 0x4 size 0x1 */
    u8 lu211;

    /* off 0x5 size 0x1 */
    u8 lu212;

    /* off 0x6 size 0x4 */
    RaceTime some_race_time;

} __attribute__((packed));
_Static_assert(sizeof(StructLUSub) == 0xA, "StructLUSub definition");

/* size 0x50 */
struct StructLUMax {
    /* off 0x0 size 0x50 */
    StructLUSub subs[8];

} __attribute__((packed));
_Static_assert(sizeof(StructLUMax) == 0x50, "StructLUMax definition");

/* size 0x34 */
struct StructCE0 {
    /* off 0x0 size 0x4 */
    u32 ce01;

    /* off 0x4 size 0x4 */
    u32 ce02;

    /* off 0x8 size 0x4 */
    u32 ce03;

    /* off 0xC size 0x4 */
    u32 ce04;

    /* off 0x10 size 0x4 */
    u32 ce05;

    /* off 0x14 size 0x2 */
    u16 ce061;

    /* off 0x16 size 0x2 */
    u16 ce062;

    /* off 0x18 size 0x2 */
    u16 ce071;

    /* off 0x1A size 0x2 */
    u16 ce072;

    /* off 0x1C size 0x4 */
    u32 ce08;

    /* off 0x20 size 0x4 */
    u32 ce09;

    /* off 0x24 size 0x4 */
    u32 ce010;

    /* off 0x28 size 0x4 */
    u32 ce011;

    /* off 0x2C size 0x4 */
    u32 bg0_hofs_vofs;

    /* off 0x30 size 0x4 */
    u32 bb;

} __attribute__((packed));
_Static_assert(sizeof(StructCE0) == 0x34, "StructCE0 definition");

/* size 0x8 */
struct GXOamAttr {
    /* off 0x0 size 0x2 */
    u16 attr_0;

    /* off 0x2 size 0x2 */
    u16 attr_1;

    /* off 0x4 size 0x2 */
    u16 attr_2;

    /* off 0x6 size 0x2 */
    u8 pad[2];

} __attribute__((packed));
_Static_assert(sizeof(GXOamAttr) == 0x8, "GXOamAttr definition");

/* size 0x10 */
struct DisplayBg23Config {
    /* off 0x0 size 0x4 */
    u32 mode;

    /* off 0x4 size 0x2 */
    u16 bg_prio;

    /* off 0x6 size 0x2 */
    u16 bg_enable_mosaic;

    /* off 0x8 size 0x2 */
    u16 bg_scr_size;

    /* off 0xA size 0x2 */
    u16 bg_color_plt;

    /* off 0xC size 0x2 */
    u16 bg_scr_base_block;

    /* off 0xE size 0x2 */
    u16 bg_char_base_block;

} __attribute__((packed));
_Static_assert(sizeof(DisplayBg23Config) == 0x10, "DisplayBg23Config definition");

/* size 0x3 */
struct GhostTime {
    /* off 0x0 size 0x1 */
    u8 unk1;

    /* off 0x1 size 0x1 */
    u8 unk2;

    /* off 0x2 size 0x1 */
    u8 unk3;

} __attribute__((packed));
_Static_assert(sizeof(GhostTime) == 0x3, "GhostTime definition");

/* size 0x10 */
struct Quaternion {
    /* off 0x0 size 0x4 */
    fx32 x;

    /* off 0x4 size 0x4 */
    fx32 y;

    /* off 0x8 size 0x4 */
    fx32 z;

    /* off 0xC size 0x4 */
    fx32 w;

} __attribute__((packed));
_Static_assert(sizeof(Quaternion) == 0x10, "Quaternion definition");

/* size 0x1E8 */
struct RaceConfig {
    /* off 0x0 size 0x4 */
    u32 internal_course_id;

    /* off 0x4 size 0x4 */
    u32 cup_idx;

    /* off 0x8 size 0x4 */
    u32 race_mode;

    /* off 0xC size 0x4 */
    u32 display_mode;

    /* off 0x10 size 0x4 */
    u32 cc_type;

    /* off 0x14 size 0x4 */
    u32 cpu_mode;

    /* off 0x18 size 0x4 */
    u32 battle_type;

    /* off 0x1C size 0x4 */
    u32 course_rules;

    /* off 0x20 size 0x4 */
    u32 course_mode;

    /* off 0x24 size 0x4 */
    u32 ghost_type;

    /* off 0x28 size 0x2 */
    u16 mission_time_limit;

    /* off 0x2A size 0x2 */
    u16 mission_rank_time;

    /* off 0x2C size 0x2 */
    u16 mission_time_tolerance;

    /* off 0x2E size 0x1 */
    u8 mission_id;

    /* off 0x2F size 0x1 */
    u8 mission_task;

    /* off 0x30 size 0x1 */
    u8 mission_course;

    /* off 0x31 size 0x1 */
    u8 mission_cc_mode;

    /* off 0x32 size 0x1 */
    u8 mission_character_id;

    /* off 0x33 size 0x1 */
    u8 mission_kart_id;

    /* off 0x34 size 0x1 */
    u8 mission_menu_id;

    /* off 0x35 size 0x1 */
    u8 mission_unk;

    /* off 0x36 size 0x1 */
    u8 mission_cam_params_idx;

    /* off 0x37 size 0x1 */
    u8 mission_target_value;

    /* off 0x38 size 0x2 */
    u16 mission_win_delay;

    /* off 0x3A size 0x2 */
    u16 mission_unk2;

    /* off 0x3C size 0x8 */
    u16 mission_object_ids[4];

    /* off 0x44 size 0x2 */
    u16 mission_flags;

    /* off 0x46 size 0x1 */
    u8 enemy_character_id;

    /* off 0x47 size 0x1 */
    u8 enemy_kart_id;

    /* off 0x48 size 0x4 */
    char nkm_mission_id_str[4];

    /* off 0x4C size 0x4 */
    u32 unk32_4C_pad;

    /* off 0x50 size 0x4 */
    u32 unk32_50_pad;

    /* off 0x54 size 0x1 */
    u8 cur_mission_level;

    /* off 0x55 size 0x1 */
    u8 cur_mission_stage;

    /* off 0x56 size 0x1 */
    u8 unk8_56;

    /* off 0x57 size 0x1 */
    u8 is_mirror;

    /* off 0x58 size 0x1 */
    u8 is_teams;

    /* off 0x59 size 0x1 */
    u8 unk8_59;

    /* off 0x5A size 0x1 */
    u8 unk8_5A;

    /* off 0x5B size 0x1 */
    u8 unk8_5B;

    /* off 0x5C size 0x4 */
    u32 rng_seed;

    /* off 0x60 size 0x2 */
    u16 cur_course_id_list_idx;

    /* off 0x62 size 0x1 */
    u8 player_driver_id;

    /* off 0x63 size 0x1 */
    u8 unk8_63_maybe_staff_roll_player_racer_id;

    /* off 0x64 size 0x1 */
    u8 unk8_64_some_lap_count;

    /* off 0x65 size 0x1 */
    u8 unk8_65;

    /* off 0x66 size 0x1 */
    u8 unk8_66;

    /* off 0x67 size 0x1 */
    u8 unk8_67;

    /* off 0x68 size 0x180 */
    DriverConfig racer_entries[8];

} __attribute__((packed));
_Static_assert(sizeof(RaceConfig) == 0x1E8, "RaceConfig definition");

/* size 0xB00 */
struct SaveDataSection_NKFE {
    /* off 0x0 size 0xB00 */
    u32 unk0[704];

} __attribute__((packed));
_Static_assert(sizeof(SaveDataSection_NKFE) == 0xB00, "SaveDataSection_NKFE definition");

/* size 0x1 */
struct SaveDataMissionRunLevelStageEntry {
    /* off 0x0 size 0x1 */
    __int8 _bf_0;

} __attribute__((packed));
_Static_assert(sizeof(SaveDataMissionRunLevelStageEntry) == 0x1, "SaveDataMissionRunLevelStageEntry definition");

/* size 0x10 */
struct InputRecorder {
    /* off 0x0 size 0x4 */
    InputRecord *record;

    /* off 0x4 size 0x2 */
    u16 cur_entry;

    /* off 0x6 size 0x2 */
    u16 wait_counter;

    /* off 0x8 size 0x4 */
    u32 state;

    /* off 0xC size 0x4 */
    u32 is_buf_clear;

} __attribute__((packed));
_Static_assert(sizeof(InputRecorder) == 0x10, "InputRecorder definition");

/* size 0x18 */
struct CellBank {
    /* off 0x0 size 0x2 */
    u16 metatile_count;

    /* off 0x2 size 0x2 */
    u16 metatile_entry_kind;

    /* off 0x4 size 0x4 */
    u32 metatile_table_offset;

    /* off 0x8 size 0x4 */
    u32 boundary_size;

    /* off 0xC size 0x4 */
    u32 some_unk_offset;

    /* off 0x10 size 0x4 */
    u32 dyn_2;

    /* off 0x14 size 0x4 */
    u32 dyn_3;

} __attribute__((packed));
_Static_assert(sizeof(CellBank) == 0x18, "CellBank definition");

/* size 0x10 */
struct CellBankMetatileEntry {
    /* off 0x0 size 0x2 */
    u16 obj_count;

    /* off 0x2 size 0x2 */
    u16 unk_0;

    /* off 0x4 size 0x4 */
    GXOamAttr *obj_data_offset;

    /* off 0x8 size 0x2 */
    u16 unk_1;

    /* off 0xA size 0x2 */
    u16 unk_2;

    /* off 0xC size 0x2 */
    u16 unk_3;

    /* off 0xE size 0x2 */
    u16 unk_4;

} __attribute__((packed));
_Static_assert(sizeof(CellBankMetatileEntry) == 0x10, "CellBankMetatileEntry definition");

/* size 0x14 */
struct InputTouchUnit {
    /* off 0x0 size 0x2 */
    u16 touch_x;

    /* off 0x2 size 0x2 */
    u16 touch_y;

    /* off 0x4 size 0x4 */
    u32 unk_bit_0_touch_pressed;

    /* off 0x8 size 0x2 */
    u16 prev_touch_x;

    /* off 0xA size 0x2 */
    u16 prev_touch_y;

    /* off 0xC size 0x4 */
    u32 prev_unk_bit_0_touch_pressed;

    /* off 0x10 size 0x2 */
    u16 touch_release_frame_counter;

    /* off 0x12 size 0x1 */
    u8 unk12_mic;

    /* off 0x13 size 0x1 */
    u8 unk13_pad;

} __attribute__((packed));
_Static_assert(sizeof(InputTouchUnit) == 0x14, "InputTouchUnit definition");

/* size 0xC */
struct StructCYB {
    /* off 0x0 size 0x4 */
    InputRecord *rec;

    /* off 0x4 size 0x2 */
    u16 u11;

    /* off 0x6 size 0x2 */
    u16 u12;

    /* off 0x8 size 0x4 */
    u32 u2;

} __attribute__((packed));
_Static_assert(sizeof(StructCYB) == 0xC, "StructCYB definition");

/* size 0x28 */
struct StructEPOIX {
    /* off 0x0 size 0x28 */
    u32 xx[10];

} __attribute__((packed));
_Static_assert(sizeof(StructEPOIX) == 0x28, "StructEPOIX definition");

/* size 0x8 */
struct StructLUEntry {
    /* off 0x0 size 0x2 */
    u16 b2;

    /* off 0x2 size 0x1 */
    u8 b21;

    /* off 0x3 size 0x1 */
    u8 b22;

    /* off 0x4 size 0x2 */
    u16 _s2;

    /* off 0x6 size 0x1 */
    u8 _s1;

    /* off 0x7 size 0x1 */
    u8 _d2;

} __attribute__((packed));
_Static_assert(sizeof(StructLUEntry) == 0x8, "StructLUEntry definition");

/* size 0x8 */
struct StructMLSub {
    /* off 0x0 size 0x4 */
    NNSG3dAnmObj *some_anim_block;

    /* off 0x4 size 0x4 */
    u32 b;

} __attribute__((packed));
_Static_assert(sizeof(StructMLSub) == 0x8, "StructMLSub definition");

/* size 0x4 */
struct Dict_DataInfoBlockHeader {
    /* off 0x0 size 0x2 */
    u16 data_entry_size;

    /* off 0x2 size 0x2 */
    u16 block_size;

} __attribute__((packed));
_Static_assert(sizeof(Dict_DataInfoBlockHeader) == 0x4, "Dict_DataInfoBlockHeader definition");

/* size 0x50 */
struct NNSG3dResMdl_Mdl0ModelBlock {
    /* off 0x0 size 0x4 */
    u32 block_size;

    /* off 0x4 size 0x4 */
    u32 additional_model_data_offset;

    /* off 0x8 size 0x4 */
    u32 tex_plt_offset_offset;

    /* off 0xC size 0x4 */
    u32 disp_list_start_offset;

    /* off 0x10 size 0x4 */
    u32 disp_list_end_offset;

    /* off 0x14 size 0x1 */
    u8 sbc_type;

    /* off 0x15 size 0x1 */
    u8 scaling_rule;

    /* off 0x16 size 0x1 */
    u8 tex_mtx_mode;

    /* off 0x17 size 0x1 */
    u8 object_count;

    /* off 0x18 size 0x1 */
    u8 material_count;

    /* off 0x19 size 0x1 */
    u8 polygon_count;

    /* off 0x1A size 0x2 */
    u8 unk1A[2];

    /* off 0x1C size 0x4 */
    fx32 pos_scale;

    /* off 0x20 size 0x4 */
    fx32 inv_pos_scale;

    /* off 0x24 size 0x2 */
    u16 vertex_count;

    /* off 0x26 size 0x2 */
    u16 surface_count;

    /* off 0x28 size 0x2 */
    u16 triangle_count;

    /* off 0x2A size 0x2 */
    u16 quad_count;

    /* off 0x2C size 0x2 */
    fx16 bounding_box_x;

    /* off 0x2E size 0x2 */
    fx16 bounding_box_y;

    /* off 0x30 size 0x2 */
    fx16 bounding_box_z;

    /* off 0x32 size 0x2 */
    fx16 bounding_box_width;

    /* off 0x34 size 0x2 */
    fx16 bounding_box_height;

    /* off 0x36 size 0x2 */
    fx16 bounding_box_depth;

    /* off 0x38 size 0x4 */
    fx32 box_pos_scale;

    /* off 0x3C size 0x4 */
    fx32 box_inv_pos_scale;

    /* off 0x40 size 0x10 */
    Dict_Header obj_dict;

} __attribute__((packed));
_Static_assert(sizeof(NNSG3dResMdl_Mdl0ModelBlock) == 0x50, "NNSG3dResMdl_Mdl0ModelBlock definition");

/* size 0x38 */
struct StructItemHolder {
    /* off 0x0 size 0x4 */
    BillboardModel *koura_g;

    /* off 0x4 size 0x4 */
    BillboardModel *koura_r;

    /* off 0x8 size 0x4 */
    BillboardModel *banana;

    /* off 0xC size 0x4 */
    BillboardModel *kinoko;

    /* off 0x10 size 0x4 */
    BillboardModel *star;

    /* off 0x14 size 0x4 */
    BillboardModel *koura_w;

    /* off 0x18 size 0x4 */
    BillboardModel *thunder;

    /* off 0x1C size 0x4 */
    BillboardModel *f_box;

    /* off 0x20 size 0x4 */
    BillboardModel *f_box_2;

    /* off 0x24 size 0x4 */
    BillboardModel *bomb;

    /* off 0x28 size 0x4 */
    BillboardModel *gesso;

    /* off 0x2C size 0x4 */
    BillboardModel *teresa;

    /* off 0x30 size 0x4 */
    BillboardModel *kinoko_p;

    /* off 0x34 size 0x4 */
    BillboardModel *killer;

} __attribute__((packed));
_Static_assert(sizeof(StructItemHolder) == 0x38, "StructItemHolder definition");

/* size 0x30 */
struct Matrix4x3 {
    /* off 0x0 size 0x30 */
    u32 coefs[12];

} __attribute__((packed));
_Static_assert(sizeof(Matrix4x3) == 0x30, "Matrix4x3 definition");

/* size 0x20 */
struct StructDCInner {
    /* off 0x0 size 0x20 */
    u8 unk[32];

} __attribute__((packed));
_Static_assert(sizeof(StructDCInner) == 0x20, "StructDCInner definition");

/* size 0x28 */
struct StructPRSub {
    /* off 0x0 size 0x4 */
    u32 _s1;

    /* off 0x4 size 0x4 */
    StructPR *self2;

    /* off 0x8 size 0x4 */
    u32 _s3;

    /* off 0xC size 0x4 */
    u32 _s4;

    /* off 0x10 size 0x4 */
    u32 _s5;

    /* off 0x14 size 0x4 */
    u32 _s6;

    /* off 0x18 size 0x4 */
    StructPR *self;

    /* off 0x1C size 0x4 */
    u32 _s8;

    /* off 0x20 size 0x4 */
    u32 _s9;

    /* off 0x24 size 0x4 */
    u32 racer_is_type_3;

} __attribute__((packed));
_Static_assert(sizeof(StructPRSub) == 0x28, "StructPRSub definition");

/* size 0x1C */
struct NNSG3dAnmObj {
    /* off 0x0 size 0x4 */
    u32 progress;

    /* off 0x4 size 0x4 */
    u32 speed;

    /* off 0x8 size 0x4 */
    void *obj_ptr;

    /* off 0xC size 0x4 */
    u32 maybe_fn_ptr;

    /* off 0x10 size 0x4 */
    NNSG3dAnmObj *maybe_next_block;

    /* off 0x14 size 0x4 */
    NNSG3dResTex_Tex0Block *tex0_block;

    /* off 0x18 size 0x1 */
    u8 unk71;

    /* off 0x19 size 0x1 */
    u8 model_material_count;

    /* off 0x1A size 0x2 */
    u16 material_list;

} __attribute__((packed));
_Static_assert(sizeof(NNSG3dAnmObj) == 0x1C, "NNSG3dAnmObj definition");

/* size 0x18 */
struct Jnt0Joint {
    /* off 0x0 size 0x4 */
    u32 magic_J_AC;

    /* off 0x4 size 0x2 */
    u16 frame_count;

    /* off 0x6 size 0x2 */
    u16 obj_count;

    /* off 0x8 size 0x4 */
    u32 unk;

    /* off 0xC size 0x4 */
    u32 unk_offset;

    /* off 0x10 size 0x4 */
    u32 unk2_offset;

    /* off 0x14 size 0x4 */
    u32 *obj_info_offsets;

} __attribute__((packed));
_Static_assert(sizeof(Jnt0Joint) == 0x18, "Jnt0Joint definition");

/* size 0x28 */
struct StructAER {
    /* off 0x0 size 0x4 */
    u32 ggg1;

    /* off 0x4 size 0x4 */
    u32 ggg2;

    /* off 0x8 size 0x4 */
    u32 ggg3;

    /* off 0xC size 0x2 */
    u16 racer_id;

    /* off 0xE size 0x2 */
    u16 ggg42;

    /* off 0x10 size 0x4 */
    u32 ggg5;

    /* off 0x14 size 0x4 */
    u32 ggg6;

    /* off 0x18 size 0x4 */
    u32 ggg7;

    /* off 0x1C size 0x4 */
    StructAERSub *sub;

    /* off 0x20 size 0x4 */
    u32 ggg9;

    /* off 0x24 size 0x2 */
    u16 ggg10;

    /* off 0x26 size 0x2 */
    u16 vs_racer_ind_color;

} __attribute__((packed));
_Static_assert(sizeof(StructAER) == 0x28, "StructAER definition");

/* size 0x24 */
struct StructAERSubSub {
    /* off 0x0 size 0x4 */
    u32 a1;

    /* off 0x4 size 0x4 */
    u32 some_ptr_size;

    /* off 0x8 size 0x2 */
    u16 other_ptr_size;

    /* off 0xA size 0x2 */
    u16 a32;

    /* off 0xC size 0x4 */
    u32 some_ptr;

    /* off 0x10 size 0x4 */
    u32 other_ptr;

    /* off 0x14 size 0x4 */
    u32 a6;

    /* off 0x18 size 0x4 */
    u32 a7;

    /* off 0x1C size 0x4 */
    u32 a8;

    /* off 0x20 size 0x4 */
    u32 a9;

} __attribute__((packed));
_Static_assert(sizeof(StructAERSubSub) == 0x24, "StructAERSubSub definition");

/* size 0x264 */
struct StructG3 {
    /* off 0x0 size 0x4 */
    u32 g0;

    /* off 0x4 size 0x4 */
    u32 g1;

    /* off 0x8 size 0x40 */
    u32 gs1[16];

    /* off 0x48 size 0x74 */
    u32 gs21[29];

    /* off 0xBC size 0x184 */
    u32 gs22[97];

    /* off 0x240 size 0x24 */
    u32 gs3[9];

} __attribute__((packed));
_Static_assert(sizeof(StructG3) == 0x264, "StructG3 definition");

/* size 0x6 */
struct VecFx16 {
    /* off 0x0 size 0x2 */
    fx16 x;

    /* off 0x2 size 0x2 */
    fx16 y;

    /* off 0x4 size 0x2 */
    fx16 z;

} __attribute__((packed));
_Static_assert(sizeof(VecFx16) == 0x6, "VecFx16 definition");

/* size 0x24 */
struct KartAIParamCcEntry {
    /* off 0x0 size 0x24 */
    u32 kakai[9];

} __attribute__((packed));
_Static_assert(sizeof(KartAIParamCcEntry) == 0x24, "KartAIParamCcEntry definition");

/* size 0x1680 */
struct KartAIParam {
    /* off 0x0 size 0x1680 */
    u32 params[1440];

} __attribute__((packed));
_Static_assert(sizeof(KartAIParam) == 0x1680, "KartAIParam definition");

/* size 0x24 */
struct Matrix3x3 {
    /* off 0x0 size 0x24 */
    u32 coefs[9];

} __attribute__((packed));
_Static_assert(sizeof(Matrix3x3) == 0x24, "Matrix3x3 definition");

/* size 0x40 */
struct Matrix4x4 {
    /* off 0x0 size 0x40 */
    u32 coefs[16];

} __attribute__((packed));
_Static_assert(sizeof(Matrix4x4) == 0x40, "Matrix4x4 definition");

/* size 0x144 */
struct StructAEBC {
    /* off 0x0 size 0x1C */
    u32 unk0[7];

    /* off 0x1C size 0x104 */
    u32 unk1C[65];

    /* off 0x120 size 0x4 */
    u32 has_nonspecialkind_racers;

    /* off 0x124 size 0x14 */
    u32 unk124[5];

    /* off 0x138 size 0x4 */
    u32 unk138_cpu_race_value;

    /* off 0x13C size 0x2 */
    u16 unk13C;

    /* off 0x13E size 0x4 */
    u16 unk13E[2];

    /* off 0x142 size 0x2 */
    u16 unk146;

} __attribute__((packed));
_Static_assert(sizeof(StructAEBC) == 0x144, "StructAEBC definition");

/* size 0x1C */
struct StructZESubX {
    /* off 0x0 size 0x4 */
    u32 _x1;

    /* off 0x4 size 0x4 */
    u32 _x2;

    /* off 0x8 size 0x4 */
    u32 _x3;

    /* off 0xC size 0x4 */
    u32 _x4;

    /* off 0x10 size 0x4 */
    u32 _x5;

    /* off 0x14 size 0x1 */
    u8 x61;

    /* off 0x15 size 0x1 */
    u8 x62;

    /* off 0x16 size 0x1 */
    u8 x63;

    /* off 0x17 size 0x1 */
    u8 x64;

    /* off 0x18 size 0x4 */
    u32 _x7;

} __attribute__((packed));
_Static_assert(sizeof(StructZESubX) == 0x1C, "StructZESubX definition");

/* size 0x20 */
struct StructZESub20 {
    /* off 0x0 size 0x4 */
    StructZESubC0 *like_subc0;

    /* off 0x4 size 0x2 */
    u16 g11;

    /* off 0x6 size 0x2 */
    u16 g12;

    /* off 0x8 size 0x18 */
    u32 gsgs[6];

} __attribute__((packed));
_Static_assert(sizeof(StructZESub20) == 0x20, "StructZESub20 definition");

/* size 0x60 */
struct NitroKartRaw {
    /* off 0x0 size 0x20 */
    char str[32];

    /* off 0x20 size 0x40 */
    StructZESub40 sub40;

} __attribute__((packed));
_Static_assert(sizeof(NitroKartRaw) == 0x60, "NitroKartRaw definition");

/* size 0x100 */
struct WMMessage {
    /* off 0x0 size 0x2 */
    u16 some_val;

    /* off 0x2 size 0x2 */
    u16 gg2;

    /* off 0x4 size 0xFC */
    u32 msgg[63];

} __attribute__((packed));
_Static_assert(sizeof(WMMessage) == 0x100, "WMMessage definition");

/* size 0x4 */
struct CourseBgmEntry {
    /* off 0x0 size 0x1 */
    u8 b1;

    /* off 0x1 size 0x1 */
    u8 sseq_id;

    /* off 0x2 size 0x1 */
    u8 b3;

    /* off 0x3 size 0x1 */
    u8 b4;

} __attribute__((packed));
_Static_assert(sizeof(CourseBgmEntry) == 0x4, "CourseBgmEntry definition");

/* size 0x1C */
struct CharacterKartContextSub24 {
    /* off 0x0 size 0x4 */
    u32 unk0;

    /* off 0x4 size 0x4 */
    u32 unk4;

    /* off 0x8 size 0x4 */
    u32 unk8_character_nsbca_anim_progress;

    /* off 0xC size 0x4 */
    u32 unkC;

    /* off 0x10 size 0x2 */
    u16 unk10;

    /* off 0x12 size 0x2 */
    u16 unk12;

    /* off 0x14 size 0x4 */
    u32 unk14_character_nsbca_anim_loop_flag;

    /* off 0x18 size 0x2 */
    u16 unk18;

    /* off 0x1A size 0x2 */
    u16 unk1A;

} __attribute__((packed));
_Static_assert(sizeof(CharacterKartContextSub24) == 0x1C, "CharacterKartContextSub24 definition");

/* size 0x8 */
struct CharacterPhysicalParam {
    /* off 0x0 size 0x4 */
    fx32 unk0;

    /* off 0x4 size 0x4 */
    fx32 weight;

} __attribute__((packed));
_Static_assert(sizeof(CharacterPhysicalParam) == 0x8, "CharacterPhysicalParam definition");

/* size 0x2 */
struct InputRecordEntry {
    /* off 0x0 size 0x1 */
    u8 keys;

    /* off 0x1 size 0x1 */
    u8 duration;

} __attribute__((packed));
_Static_assert(sizeof(InputRecordEntry) == 0x2, "InputRecordEntry definition");

/* size 0xDCC */
struct InputRecord {
    /* off 0x0 size 0x4 */
    u32 data_len;

    /* off 0x4 size 0xDC8 */
    InputRecordEntry entries[1764];

} __attribute__((packed));
_Static_assert(sizeof(InputRecord) == 0xDCC, "InputRecord definition");

/* size 0x304 */
struct StructDTT {
    /* off 0x0 size 0x304 */
    u32 dts[193];

} __attribute__((packed));
_Static_assert(sizeof(StructDTT) == 0x304, "StructDTT definition");

/* size 0x10 */
struct Matrix2x2 {
    /* off 0x0 size 0x10 */
    u32 coefs[4];

} __attribute__((packed));
_Static_assert(sizeof(Matrix2x2) == 0x10, "Matrix2x2 definition");

/* size 0xC0 */
struct StructZESubC0 {
    /* off 0x0 size 0xC0 */
    u32 gser[48];

} __attribute__((packed));
_Static_assert(sizeof(StructZESubC0) == 0xC0, "StructZESubC0 definition");

/* size 0xB8 */
struct DriverNetworkState {
    /* off 0x0 size 0xC */
    VecFx32 position;

    /* off 0xC size 0x2 */
    u16 unkC_angle_1;

    /* off 0xE size 0x2 */
    u16 unkE_angle_2;

    /* off 0x10 size 0xC */
    VecFx32 unk10_like_position;

    /* off 0x1C size 0x4 */
    u32 unk1C;

    /* off 0x20 size 0x4 */
    u32 unk20;

    /* off 0x24 size 0x4 */
    fx32 unk24;

    /* off 0x28 size 0x4 */
    u32 unk28;

    /* off 0x2C size 0x4 */
    u32 flags;

    /* off 0x30 size 0x4 */
    u32 last_flags;

    /* off 0x34 size 0xC */
    VecFx32 unk34;

    /* off 0x40 size 0x2 */
    i16 drift_rot_y;

    /* off 0x42 size 0x2 */
    u16 unk42_pad;

    /* off 0x44 size 0x4 */
    i32 unk44_maybe_flags;

    /* off 0x48 size 0x4 */
    u32 unk48;

    /* off 0x4C size 0x10 */
    Quaternion unk4C_like_unk110_some_rotation;

    /* off 0x5C size 0x2 */
    i16 unk5C;

    /* off 0x5E size 0x2 */
    u16 unk5E_pad;

    /* off 0x60 size 0x4 */
    u32 unk60;

    /* off 0x64 size 0x4 */
    u32 unk64;

    /* off 0x68 size 0x18 */
    u8 unk68[24];

    /* off 0x80 size 0xC */
    NNSFndList unk80;

    /* off 0x8C size 0xC */
    NNSFndList unk8C_sub_list;

    /* off 0x98 size 0xC */
    VecFx32 unk98;

    /* off 0xA4 size 0x4 */
    u32 unkA4;

    /* off 0xA8 size 0xC */
    VecFx32 unkA8;

    /* off 0xB4 size 0x2 */
    u16 unkB4;

    /* off 0xB6 size 0x1 */
    u8 unkB6_pad;

    /* off 0xB7 size 0x1 */
    u8 unkB7;

} __attribute__((packed));
_Static_assert(sizeof(DriverNetworkState) == 0xB8, "DriverNetworkState definition");

/* size 0xC */
struct StructMQChild {
    /* off 0x0 size 0x4 */
    u32 mq1;

    /* off 0x4 size 0x4 */
    u32 mq2;

    /* off 0x8 size 0x4 */
    NNSFndList *list_ptr;

} __attribute__((packed));
_Static_assert(sizeof(StructMQChild) == 0xC, "StructMQChild definition");

/* size 0x78 */
struct Struct78 {
    /* off 0x0 size 0x4 */
    void *ptr_sz_4020;

    /* off 0x4 size 0x4 */
    u32 ptr_sz_a;

    /* off 0x8 size 0x4 */
    u32 val_4020;

    /* off 0xC size 0x4 */
    u32 sz_a;

    /* off 0x10 size 0x4 */
    CharGraphicsBlock *Keyboard_s_b_10key_NCGR;

    /* off 0x14 size 0x4 */
    CharGraphicsBlock *Keyboard_s_b_jp_NCGR;

    /* off 0x18 size 0x4 */
    CharGraphicsBlock *Keyboard_s_b_ascii_NCGR;

    /* off 0x1C size 0x4 */
    CharGraphicsBlock *Keyboard_s_b_euro_NCGR;

    /* off 0x20 size 0x4 */
    CharGraphicsBlock *Keyboard_s_b_pict_NCGR;

    /* off 0x24 size 0x4 */
    CharGraphicsBlock *Keyboard_s_b_pict_NCGR_0;

    /* off 0x28 size 0x4 */
    void *_10key_kbd_ptr;

    /* off 0x2C size 0x4 */
    void *jp_kbd_ptr;

    /* off 0x30 size 0x4 */
    void *ascii_kbd_ptr;

    /* off 0x34 size 0x4 */
    void *euro_kbd_ptr;

    /* off 0x38 size 0x4 */
    void *picto_kbd_ptr;

    /* off 0x3C size 0x4 */
    void *picto_kbd_ptr_0;

    /* off 0x40 size 0x4 */
    u16 *some_str_ptr;

    /* off 0x44 size 0x2 */
    u16 some_count;

    /* off 0x46 size 0x2 */
    u16 v62;

    /* off 0x48 size 0x2 */
    u16 v71;

    /* off 0x4A size 0x2 */
    u16 some_str_len;

    /* off 0x4C size 0x4 */
    u32 z1;

    /* off 0x50 size 0x4 */
    u32 z2;

    /* off 0x54 size 0x4 */
    u32 z3;

    /* off 0x58 size 0x4 */
    u32 z4;

    /* off 0x5C size 0x4 */
    u32 z5;

    /* off 0x60 size 0x4 */
    u32 z6;

    /* off 0x64 size 0x4 */
    u32 z7;

    /* off 0x68 size 0x4 */
    u32 z8;

    /* off 0x6C size 0x4 */
    u32 z9;

    /* off 0x70 size 0x4 */
    u32 z10;

    /* off 0x74 size 0x4 */
    u32 z11;

} __attribute__((packed));
_Static_assert(sizeof(Struct78) == 0x78, "Struct78 definition");

/* size 0x8 */
struct Struct78Sub {
    /* off 0x0 size 0x1 */
    u8 g1;

    /* off 0x1 size 0x1 */
    u8 g2;

    /* off 0x2 size 0x1 */
    u8 g3;

    /* off 0x3 size 0x1 */
    u8 g4;

    /* off 0x4 size 0x2 */
    u16 g5;

    /* off 0x6 size 0x2 */
    u16 g6;

} __attribute__((packed));
_Static_assert(sizeof(Struct78Sub) == 0x8, "Struct78Sub definition");

/* size 0x828 */
struct SelectReturn {
    /* off 0x0 size 0x4 */
    u32 _q1;

    /* off 0x4 size 0x4 */
    u32 _q2;

    /* off 0x8 size 0x4 */
    u32 _q3;

    /* off 0xC size 0x4 */
    u32 _q4;

    /* off 0x10 size 0x800 */
    u16 scrn_data[1024];

    /* off 0x810 size 0x4 */
    u32 gg1;

    /* off 0x814 size 0x4 */
    u32 gg2;

    /* off 0x818 size 0x4 */
    u32 gg3;

    /* off 0x81C size 0x4 */
    u32 gg4;

    /* off 0x820 size 0x4 */
    u32 is_dwc;

    /* off 0x824 size 0x4 */
    u32 qqq;

} __attribute__((packed));
_Static_assert(sizeof(SelectReturn) == 0x828, "SelectReturn definition");

/* size 0x10 */
struct StructNBSub {
    /* off 0x0 size 0x4 */
    G2d_Sprite *bg;

    /* off 0x4 size 0x4 */
    G2d_Font *font;

    /* off 0x8 size 0x4 */
    u32 inter_char_width;

    /* off 0xC size 0x4 */
    u32 unk;

} __attribute__((packed));
_Static_assert(sizeof(StructNBSub) == 0x10, "StructNBSub definition");

/* size 0x10 */
struct StructTC {
    /* off 0x0 size 0x2 */
    u16 t1;

    /* off 0x2 size 0x2 */
    u16 t2;

    /* off 0x4 size 0x2 */
    u16 t3;

    /* off 0x6 size 0x2 */
    u16 t4;

    /* off 0x8 size 0x2 */
    u16 t5;

    /* off 0xA size 0x2 */
    u16 t6;

    /* off 0xC size 0x2 */
    u16 t7;

    /* off 0xE size 0x2 */
    u16 t8;

} __attribute__((packed));
_Static_assert(sizeof(StructTC) == 0x10, "StructTC definition");

/* size 0x58 */
struct DriverTimerState {
    /* off 0x0 size 0x2 */
    i16 shroom_boost_timer;

    /* off 0x2 size 0x2 */
    i16 thunder_shrink_timer;

    /* off 0x4 size 0x2 */
    i16 thunder_grow_timer;

    /* off 0x6 size 0x2 */
    i16 star_timer;

    /* off 0x8 size 0x2 */
    i16 slipstream_start_timer;

    /* off 0xA size 0x2 */
    i16 slipstream_timer;

    /* off 0xC size 0x2 */
    i16 dossun_grow_timer;

    /* off 0xE size 0x2 */
    i16 dossun_flat_timer;

    /* off 0x10 size 0x2 */
    i16 teresa_timer;

    /* off 0x12 size 0x2 */
    i16 teresa_flicker_interval;

    /* off 0x14 size 0x2 */
    i16 teresa_flicker_interval_update_timer;

    /* off 0x16 size 0x2 */
    i16 teresa_flicker_timer;

    /* off 0x18 size 0x2 */
    i16 teresa_flicker_interval_update_wait_time;

    /* off 0x1A size 0x2 */
    i16 teresa_flicker_interval_step;

    /* off 0x1C size 0x2 */
    i16 gesso_ink_timer;

    /* off 0x1E size 0x2 */
    i16 killer_frame_counter;

    /* off 0x20 size 0x2 */
    u16 unk20;

    /* off 0x22 size 0x2 */
    u16 unk22;

    /* off 0x24 size 0x4 */
    u32 is_killer_finishing;

    /* off 0x28 size 0x2 */
    i16 killer_target_place;

    /* off 0x2A size 0x2 */
    u8 unk2A_pad[2];

    /* off 0x2C size 0x4 */
    u32 unk2C;

    /* off 0x30 size 0x4 */
    u32 unk30;

    /* off 0x34 size 0x4 */
    u32 unk34;

    /* off 0x38 size 0x4 */
    u32 unk38;

    /* off 0x3C size 0x4 */
    u32 unk3C;

    /* off 0x40 size 0x4 */
    u32 unk40;

    /* off 0x44 size 0x4 */
    u32 unk44;

    /* off 0x48 size 0x4 */
    u32 unk48;

    /* off 0x4C size 0x4 */
    u32 unk4C;

    /* off 0x50 size 0x4 */
    u32 unk50;

    /* off 0x54 size 0x4 */
    u32 unk54;

} __attribute__((packed));
_Static_assert(sizeof(DriverTimerState) == 0x58, "DriverTimerState definition");

/* size 0x28 */
struct DisplayBaseConfig {
    /* off 0x0 size 0x2 */
    u16 vblank_irq_wait_loop_count;

    /* off 0x2 size 0x2 */
    u16 dispcnt_screen_display_bg_bits_top;

    /* off 0x4 size 0x2 */
    u16 dispcnt_screen_display_bg_bits_sub;

    /* off 0x6 size 0x2 */
    u16 dispcnt_display_mode;

    /* off 0x8 size 0x2 */
    u16 dispcnt_bg_mode;

    /* off 0xA size 0x2 */
    u16 dispcnt_bg_3d;

    /* off 0xC size 0x2 */
    u16 dispcnt_sub_bg_mode;

    /* off 0xE size 0x2 */
    u16 main_bg_bank;

    /* off 0x10 size 0x2 */
    u16 main_obj_bank;

    /* off 0x12 size 0x2 */
    u16 main_bg_ext_plt_bank;

    /* off 0x14 size 0x2 */
    u16 main_obj_ext_plt_bank;

    /* off 0x16 size 0x2 */
    u16 tex_bank;

    /* off 0x18 size 0x2 */
    u16 tex_plt_bank;

    /* off 0x1A size 0x2 */
    u16 clear_img_bank;

    /* off 0x1C size 0x2 */
    u16 sub_bg_bank;

    /* off 0x1E size 0x2 */
    u16 sub_obj_bank;

    /* off 0x20 size 0x2 */
    u16 sub_bg_ext_plt_bank;

    /* off 0x22 size 0x2 */
    u16 sub_obj_ext_plt_bank;

    /* off 0x24 size 0x2 */
    u16 arm7_bank;

    /* off 0x26 size 0x2 */
    u16 lcdc_vram_mask_bank;

} __attribute__((packed));
_Static_assert(sizeof(DisplayBaseConfig) == 0x28, "DisplayBaseConfig definition");

/* size 0x14 */
struct Animator {
    /* off 0x0 size 0x2 */
    u16 loop_mode;

    /* off 0x2 size 0x2 */
    u16 has_ended;

    /* off 0x4 size 0x4 */
    fx32 anim_length;

    /* off 0x8 size 0x4 */
    fx32 speed;

    /* off 0xC size 0x4 */
    fx32 progress;

    /* off 0x10 size 0x2 */
    u16 loop_iteration;

    /* off 0x12 size 0x2 */
    u16 loop_count;

} __attribute__((packed));
_Static_assert(sizeof(Animator) == 0x14, "Animator definition");

/* size 0x54 */
struct NNSG3dRenderObj {
    /* off 0x0 size 0x4 */
    u32 some_flags;

    /* off 0x4 size 0x4 */
    NNSG3dResMdl_Mdl0ModelBlock *mdl0_model_block;

    /* off 0x8 size 0x8 */
    StructMLSub m3;

    /* off 0x10 size 0x8 */
    StructMLSub m5;

    /* off 0x18 size 0x8 */
    StructMLSub m7;

    /* off 0x20 size 0x4 */
    u32 some_fn_ptr;

    /* off 0x24 size 0x1 */
    u8 m211;

    /* off 0x25 size 0x1 */
    u8 m212;

    /* off 0x26 size 0x2 */
    u16 m22;

    /* off 0x28 size 0x28 */
    u32 mdls[10];

    /* off 0x50 size 0x4 */
    u32 ml0;

} __attribute__((packed));
_Static_assert(sizeof(NNSG3dRenderObj) == 0x54, "NNSG3dRenderObj definition");

/* size 0x18 */
struct MATHRandContext32 {
    /* off 0x0 size 0x18 */
    u32 ms[6];

} __attribute__((packed));
_Static_assert(sizeof(MATHRandContext32) == 0x18, "MATHRandContext32 definition");

/* size 0xC */
struct SequenceLoadInfo {
    /* off 0x0 size 0x4 */
    u32 seq_id;

    /* off 0x4 size 0x4 */
    u32 bank_1;

    /* off 0x8 size 0x4 */
    u32 bank_2;

} __attribute__((packed));
_Static_assert(sizeof(SequenceLoadInfo) == 0xC, "SequenceLoadInfo definition");

/* size 0x6C */
struct TestContent {
    /* off 0x0 size 0x4 */
    u32 needs_copy_choises_s_3_NSCR;

    /* off 0x4 size 0x4 */
    u32 t2;

    /* off 0x8 size 0x4 */
    u32 needs_copy_choises_s_b_NCGR_NCLR;

    /* off 0xC size 0x4 */
    u32 t4;

    /* off 0x10 size 0x4 */
    u32 t5;

    /* off 0x14 size 0x4 */
    u32 t6;

    /* off 0x18 size 0x4 */
    u32 t7;

    /* off 0x1C size 0x4 */
    u32 t8;

    /* off 0x20 size 0x4 */
    u32 t9;

    /* off 0x24 size 0x4 */
    u32 t10;

    /* off 0x28 size 0x4 */
    u32 t11;

    /* off 0x2C size 0x4 */
    G2d_Font *mario_font;

    /* off 0x30 size 0x20 */
    G2d_Sprite spr;

    /* off 0x50 size 0x10 */
    G2d_Text text;

    /* off 0x60 size 0x4 */
    PaletteBlock *choises_s_b_NCLR;

    /* off 0x64 size 0x4 */
    CharGraphicsBlock *choises_s_b_NCGR;

    /* off 0x68 size 0x4 */
    void *choises_s_3_NSCR;

} __attribute__((packed));
_Static_assert(sizeof(TestContent) == 0x6C, "TestContent definition");

/* size 0x44 */
struct SfxEmitter {
    /* off 0x0 size 0xC */
    StructMQChild list_link_1;

    /* off 0xC size 0xC */
    NNSFndList list;

    /* off 0x18 size 0x4 */
    u32 unk18;

    /* off 0x1C size 0xC */
    StructMQChild list_link_2;

    /* off 0x28 size 0x4 */
    VecFx32 *pos;

    /* off 0x2C size 0x4 */
    void *start_fn;

    /* off 0x30 size 0x4 */
    void *update_fn;

    /* off 0x34 size 0x2 */
    u16 unk34;

    /* off 0x36 size 0x2 */
    u16 unk36;

    /* off 0x38 size 0x4 */
    u32 unk38;

    /* off 0x3C size 0x1 */
    u8 sfx_param_idx;

    /* off 0x3D size 0x3 */
    u8 unk3D_pad[3];

    /* off 0x40 size 0x4 */
    u32 distance_sq;

} __attribute__((packed));
_Static_assert(sizeof(SfxEmitter) == 0x44, "SfxEmitter definition");

/* size 0x28 */
struct DriverSub450Sub40 {
    /* off 0x0 size 0x4 */
    u32 unk0;

    /* off 0x4 size 0x4 */
    u32 unk4;

    /* off 0x8 size 0x4 */
    u32 unk8;

    /* off 0xC size 0x4 */
    u32 unkC;

    /* off 0x10 size 0x4 */
    u32 unk10;

    /* off 0x14 size 0x4 */
    u32 unk14;

    /* off 0x18 size 0x4 */
    u32 unk18;

    /* off 0x1C size 0x4 */
    u32 unk1C;

    /* off 0x20 size 0x4 */
    u32 unk20;

    /* off 0x24 size 0x4 */
    u32 unk24;

} __attribute__((packed));
_Static_assert(sizeof(DriverSub450Sub40) == 0x28, "DriverSub450Sub40 definition");

/* size 0x1C */
struct SfxEmitterParamsEx {
    /* off 0x0 size 0x4 */
    u32 unk0;

    /* off 0x4 size 0x4 */
    u32 unk4;

    /* off 0x8 size 0x4 */
    u32 pitch_offset;

    /* off 0xC size 0x4 */
    u32 unkC;

    /* off 0x10 size 0xC */
    u8 unk10[12];

} __attribute__((packed));
_Static_assert(sizeof(SfxEmitterParamsEx) == 0x1C, "SfxEmitterParamsEx definition");

/* size 0x2 */
struct GXRgb {
    /* off 0x0 size 0x2 */
    u16 rgb;

} __attribute__((packed));
_Static_assert(sizeof(GXRgb) == 0x2, "GXRgb definition");

/* size 0x14 */
struct LightInfo {
    /* off 0x0 size 0x2 */
    GXRgb color;

    /* off 0x2 size 0x2 */
    i16 r;

    /* off 0x4 size 0x2 */
    i16 g;

    /* off 0x6 size 0x2 */
    i16 b;

    /* off 0x8 size 0x2 */
    i16 rDelta;

    /* off 0xA size 0x2 */
    i16 gDelta;

    /* off 0xC size 0x2 */
    i16 bDelta;

    /* off 0xE size 0x2 */
    u16 lightMask;

    /* off 0x10 size 0x2 */
    fx16 progress;

    /* off 0x12 size 0x2 */
    u16 unk12;

} __attribute__((packed));
_Static_assert(sizeof(LightInfo) == 0x14, "LightInfo definition");

/* size 0x1C */
struct DriverContextSub208 {
    /* off 0x0 size 0x4 */
    u32 unk0;

    /* off 0x4 size 0x4 */
    u32 unk4;

    /* off 0x8 size 0x4 */
    u32 unk8;

    /* off 0xC size 0x4 */
    u32 unkC;

    /* off 0x10 size 0x4 */
    u32 unk10;

    /* off 0x14 size 0x4 */
    u32 unk14;

    /* off 0x18 size 0x4 */
    u32 unk18;

} __attribute__((packed));
_Static_assert(sizeof(DriverContextSub208) == 0x1C, "DriverContextSub208 definition");

/* size 0x158 */
struct EnemyState {
    /* off 0x0 size 0x158 */
    u8 unk[344];

} __attribute__((packed));
_Static_assert(sizeof(EnemyState) == 0x158, "EnemyState definition");

/* size 0x10 */
struct SequenceHeapState {
    /* off 0x0 size 0xC */
    SequenceLoadInfo load_info;

    /* off 0xC size 0x4 */
    int heap_level;

} __attribute__((packed));
_Static_assert(sizeof(SequenceHeapState) == 0x10, "SequenceHeapState definition");

/* size 0xC0 */
struct Os_Thread {
    /* off 0x0 size 0x64 */
    Arm_Context ctx;

    /* off 0x64 size 0x4 */
    u32 state;

    /* off 0x68 size 0x4 */
    Os_Thread *next_thr;

    /* off 0x6C size 0x4 */
    u32 id;

    /* off 0x70 size 0x4 */
    u32 priority;

    /* off 0x74 size 0x4 */
    u32 unk_profiler;

    /* off 0x78 size 0x4 */
    Os_ThreadQueue *sleep_queue_ptr;

    /* off 0x7C size 0x8 */
    Os_ThreadQueue another_queue;

    /* off 0x84 size 0x4 */
    Os_Mutex *mtx;

    /* off 0x88 size 0x8 */
    Os_MutexQueue mtx_queue;

    /* off 0x90 size 0x4 */
    void *stack_top;

    /* off 0x94 size 0x4 */
    void *stack_bottom;

    /* off 0x98 size 0x4 */
    u32 stack_warning_offset;

    /* off 0x9C size 0x8 */
    Os_ThreadQueue join_queue;

    /* off 0xA4 size 0xC */
    void *unk_specific[3];

    /* off 0xB0 size 0x4 */
    Os_Alarm *alarm;

    /* off 0xB4 size 0x4 */
    void (__cdecl *dtor_fn)(void *);

    /* off 0xB8 size 0x8 */
    u8 unk_extra[8];

} __attribute__((packed));
_Static_assert(sizeof(Os_Thread) == 0xC0, "Os_Thread definition");

/* size 0xC */
struct Mem_FrameHeapHead {
    /* off 0x0 size 0x8 */
    Mem_MemoryRegion cur_heap_region;

    /* off 0x8 size 0x4 */
    Mem_FrameHeapState *cur_state;

} __attribute__((packed));
_Static_assert(sizeof(Mem_FrameHeapHead) == 0xC, "Mem_FrameHeapHead definition");

/* size 0x5C */
struct Fs_Archive {
    /* off 0x0 size 0x4 */
    u32 name_packed;

    /* off 0x4 size 0x4 */
    Fs_Archive *next_arc;

    /* off 0x8 size 0x4 */
    Fs_Archive *prev_arc;

    /* off 0xC size 0x8 */
    Os_ThreadQueue sync_queue;

    /* off 0x14 size 0x8 */
    Os_ThreadQueue status_queue;

    /* off 0x1C size 0x4 */
    u32 flags;

    /* off 0x20 size 0x8 */
    Fs_FileList file_list;

    /* off 0x28 size 0x4 */
    void *fimg_data_start;

    /* off 0x2C size 0x4 */
    void *fat_start_ptr_rel;

    /* off 0x30 size 0x4 */
    u32 fat_size;

    /* off 0x34 size 0x4 */
    void *fnt_start_ptr_rel;

    /* off 0x38 size 0x4 */
    u32 fnt_size;

    /* off 0x3C size 0x4 */
    void *fat_start_ptr_rel_bak;

    /* off 0x40 size 0x4 */
    void *fnt_start_ptr_rel_bak;

    /* off 0x44 size 0x4 */
    void *used_read_buf;

    /* off 0x48 size 0x4 */
    int (__fastcall *read_fn)(Fs_Archive *, void *, void *, int);

    /* off 0x4C size 0x4 */
    int (__fastcall *write_fn)(Fs_Archive *, void *, void *, int);

    /* off 0x50 size 0x4 */
    int (__fastcall *fat_fnt_fn)(Fs_Archive *, void *, void *, int);

    /* off 0x54 size 0x4 */
    int (__fastcall *custom_op_handler)(Fs_File *, int);

    /* off 0x58 size 0x4 */
    u32 custom_op_mask;

} __attribute__((packed));
_Static_assert(sizeof(Fs_Archive) == 0x5C, "Fs_Archive definition");

/* size 0x14 */
struct Mem_ExpHeapHead {
    /* off 0x0 size 0x8 */
    Mem_ExpHeapMemoryBlockList free_list;

    /* off 0x8 size 0x8 */
    Mem_ExpHeapMemoryBlockList used_list;

    /* off 0x10 size 0x2 */
    _WORD group_id;

    /* off 0x12 size 0x2 */
    _WORD alloc_mode;

} __attribute__((packed));
_Static_assert(sizeof(Mem_ExpHeapHead) == 0x14, "Mem_ExpHeapHead definition");

/* size 0x70 */
struct MountArchiveEntry {
    /* off 0x0 size 0x5C */
    Fs_Archive arc;

    /* off 0x5C size 0x4 */
    void *narc_raw_ptr;

    /* off 0x60 size 0x4 */
    void *fat_block_ptr;

    /* off 0x64 size 0x4 */
    void *fimg_data_start;

    /* off 0x68 size 0x4 */
    int loaded;

    /* off 0x6C size 0x4 */
    void *narc_dec_ptr;

} __attribute__((packed));
_Static_assert(sizeof(MountArchiveEntry) == 0x70, "MountArchiveEntry definition");

/* size 0x30 */
struct Mem_HeapHead_Frame {
    /* off 0x0 size 0x4 */
    u32 magic;

    /* off 0x4 size 0x4 */
    u32 h1;

    /* off 0x8 size 0x4 */
    u32 h2;

    /* off 0xC size 0x4 */
    u32 h3;

    /* off 0x10 size 0x4 */
    u32 h4;

    /* off 0x14 size 0x4 */
    u32 h5;

    /* off 0x18 size 0x4 */
    void *heap_start;

    /* off 0x1C size 0x4 */
    void *heap_end;

    /* off 0x20 size 0x4 */
    u32 option;

    /* off 0x24 size 0xC */
    Mem_FrameHeapHead frm_heap_head;

} __attribute__((packed));
_Static_assert(sizeof(Mem_HeapHead_Frame) == 0x30, "Mem_HeapHead_Frame definition");

/* size 0x18 */
struct Os_Mutex {
    /* off 0x0 size 0x8 */
    Os_ThreadQueue thr_queue;

    /* off 0x8 size 0x4 */
    Os_Thread *thr;

    /* off 0xC size 0x4 */
    u32 count;

    /* off 0x10 size 0x8 */
    Os_MutexQueue queue;

} __attribute__((packed));
_Static_assert(sizeof(Os_Mutex) == 0x18, "Os_Mutex definition");

/* size 0x30 */
struct GhostHeader {
    /* off 0x0 size 0x4 */
    u32 magic_nkdg_nkpg;

    /* off 0x4 size 0x2 */
    __int16 _bf_4;

    /* off 0x6 size 0x2 */
    u16 unk1;

    /* off 0x8 size 0x1 */
    u8 flags;

    /* off 0x9 size 0x1 */
    __int8 _bf_9;

    /* off 0xA size 0x2 */
    __int16 _bf_a;

    /* off 0xC size 0x14 */
    u16 name[10];

    /* off 0x20 size 0xF */
    GhostTime lap_times[5];

    /* off 0x2F size 0x1 */
    u8 unk;

} __attribute__((packed));
_Static_assert(sizeof(GhostHeader) == 0x30, "GhostHeader definition");

/* size 0x600 */
struct GhostHolder {
    /* off 0x0 size 0x600 */
    GhostHeader headers[32];

} __attribute__((packed));
_Static_assert(sizeof(GhostHolder) == 0x600, "GhostHolder definition");

/* size 0x2C */
struct Struct2D {
    /* off 0x0 size 0x4 */
    void *search_icon_00_bncl_ptr;

    /* off 0x4 size 0x4 */
    void *search_icon_layout_00_bncl_ptr;

    /* off 0x8 size 0x4 */
    CharGraphicsBlock *search_icon_00_nce_ncgr;

    /* off 0xC size 0x4 */
    void *search_icon_00_nce_ncer;

    /* off 0x10 size 0x4 */
    PaletteBlock *search_icon_00_o_nclr;

    /* off 0x14 size 0xC */
    G2d_Font mbchild_nftr;

    /* off 0x20 size 0x4 */
    void *mbchild_bmg_ptr;

    /* off 0x24 size 0x4 */
    CharGraphicsBlock *multi_download_00_b_ncgr;

    /* off 0x28 size 0x4 */
    PaletteBlock *multi_download_00_b_nclr;

} __attribute__((packed));
_Static_assert(sizeof(Struct2D) == 0x2C, "Struct2D definition");

/* size 0x14 */
union Mem_CommonHeapHead {
    /* off 0x0 size 0x14 */
    Mem_ExpHeapHead exp_heap_head;

    /* off 0x1 size 0xC */
    Mem_FrameHeapHead frm_heap_head;

} __attribute__((packed));
/* size 0x1C */
struct File_OperationContext_Op2 {
    /* off 0x0 size 0x10 */
    File_OperationContext_Op2_1 p1;

    /* off 0x10 size 0xC */
    File_OperationContext_Op2_2 p2;

} __attribute__((packed));
_Static_assert(sizeof(File_OperationContext_Op2) == 0x1C, "File_OperationContext_Op2 definition");

/* size 0x1C */
struct File_OperationContext_Op5 {
    /* off 0x0 size 0x10 */
    File_OperationContext_Op5_1 p1;

    /* off 0x10 size 0xC */
    File_OperationContext_Op5_2 p2;

} __attribute__((packed));
_Static_assert(sizeof(File_OperationContext_Op5) == 0x1C, "File_OperationContext_Op5 definition");

/* size 0x70 */
struct Bios_PersonalData {
    /* off 0x0 size 0x2 */
    u8 reserved[2];

    /* off 0x2 size 0x1 */
    u8 theme;

    /* off 0x3 size 0x1 */
    u8 birth_month;

    /* off 0x4 size 0x1 */
    u8 birth_day;

    /* off 0x5 size 0x1 */
    u8 unk;

    /* off 0x6 size 0x14 */
    _WORD name[10];

    /* off 0x1A size 0x2 */
    u16 name_len;

    /* off 0x1C size 0x34 */
    _WORD msg[26];

    /* off 0x50 size 0x2 */
    u16 msg_len;

    /* off 0x52 size 0x1 */
    u8 alarm_h;

    /* off 0x53 size 0x1 */
    u8 alarm_min;

    /* off 0x54 size 0x4 */
    u8 reserved_2[4];

    /* off 0x58 size 0x2 */
    _WORD calx1;

    /* off 0x5A size 0x2 */
    _WORD caly1;

    /* off 0x5C size 0x1 */
    u8 calx1_px;

    /* off 0x5D size 0x1 */
    u8 caly1_px;

    /* off 0x5E size 0x2 */
    _WORD calx2;

    /* off 0x60 size 0x2 */
    _WORD caly2;

    /* off 0x62 size 0x1 */
    u8 calx2_px;

    /* off 0x63 size 0x1 */
    u8 caly2_px;

    /* off 0x64 size 0x2 */
    Bios_PersonalDataPacked datapack;

    /* off 0x66 size 0x2 */
    u8 reserved_3[2];

    /* off 0x68 size 0x4 */
    u32 rtc_offset;

    /* off 0x6C size 0x4 */
    u8 reserved_4[4];

} __attribute__((packed));
_Static_assert(sizeof(Bios_PersonalData) == 0x70, "Bios_PersonalData definition");

/* size 0x3C */
struct LogoContext {
    /* off 0x0 size 0xC */
    LogoScreenGraphics screen_gfx_top;

    /* off 0xC size 0xC */
    LogoScreenGraphics screen_gfx_sub;

    /* off 0x18 size 0x14 */
    StateDualHandler state_dual_handler;

    /* off 0x2C size 0x4 */
    u32 flags;

    /* off 0x30 size 0x4 */
    u32 read_save_data_wait_frame_counter;

    /* off 0x34 size 0x4 */
    u32 erase_save_data_wait_frame_counter;

    /* off 0x38 size 0x4 */
    void *common_bmg_buf;

} __attribute__((packed));
_Static_assert(sizeof(LogoContext) == 0x3C, "LogoContext definition");

/* size 0x60 */
struct StructM {
    /* off 0x0 size 0x1C */
    PlayerGfxData player;

    /* off 0x1C size 0x1C */
    PlayerGfxData player2;

    /* off 0x38 size 0x4 */
    StructN *strn;

    /* off 0x3C size 0x4 */
    OamBuffer *oam_buf_ptr;

    /* off 0x40 size 0x4 */
    u32 some_cup_idx;

    /* off 0x44 size 0x4 */
    u32 gp_rank;

    /* off 0x48 size 0x4 */
    u32 player_global_rank;

    /* off 0x4C size 0x4 */
    void *common_bmg_ptr;

    /* off 0x50 size 0x4 */
    void *secret_bmg_ptr;

    /* off 0x54 size 0x4 */
    u32 maybe_handled_secrets_dialog_state;

    /* off 0x58 size 0x4 */
    u32 unlocked_secret_flags;

    /* off 0x5C size 0x4 */
    u32 m24;

} __attribute__((packed));
_Static_assert(sizeof(StructM) == 0x60, "StructM definition");

/* size 0x44 */
struct DisplayEngineConfig {
    /* off 0x0 size 0x10 */
    DisplayBg01Config bg0;

    /* off 0x10 size 0x10 */
    DisplayBg01Config bg1;

    /* off 0x20 size 0x10 */
    DisplayBg23Config bg2;

    /* off 0x30 size 0x10 */
    DisplayBg23Config bg3;

    /* off 0x40 size 0x2 */
    u16 obj_vram_mode_char;

    /* off 0x42 size 0x2 */
    u16 obj_vram_mode_bmp;

} __attribute__((packed));
_Static_assert(sizeof(DisplayEngineConfig) == 0x44, "DisplayEngineConfig definition");

/* size 0x154 */
struct StructV {
    /* off 0x0 size 0x1C */
    u32 vs[7];

    /* off 0x1C size 0x4 */
    void *some_scrn_ptr;

    /* off 0x20 size 0x28 */
    u32 unk1[10];

    /* off 0x48 size 0x1C */
    PlayerGfxData player1;

    /* off 0x64 size 0x1C */
    PlayerGfxData player2;

    /* off 0x80 size 0x1C */
    PlayerGfxData player_gfx_l;

    /* off 0x9C size 0x1C */
    PlayerGfxData player_gfx_m;

    /* off 0xB8 size 0x8 */
    u32 vs21[2];

    /* off 0xC0 size 0x4 */
    PaletteBlock *player_shy_l;

    /* off 0xC4 size 0x4 */
    PaletteBlock *player_shy_m;

    /* off 0xC8 size 0x4 */
    void *common_bmg_ptr;

    /* off 0xCC size 0x4 */
    u32 vvvv;

    /* off 0xD0 size 0x4 */
    u32 some_driver_id;

    /* off 0xD4 size 0x4 */
    u32 vv;

    /* off 0xD8 size 0x4 */
    u32 some_driver_count;

    /* off 0xDC size 0x8 */
    u32 vs22[2];

    /* off 0xE4 size 0x8 */
    u32 vs23[2];

    /* off 0xEC size 0x68 */
    u32 vs2[26];

} __attribute__((packed));
_Static_assert(sizeof(StructV) == 0x154, "StructV definition");

/* size 0x30 */
struct Os_Alarm {
    /* off 0x0 size 0x4 */
    void (__fastcall *handler_fn)(void *);

    /* off 0x4 size 0x4 */
    void *handler_arg;

    /* off 0x8 size 0x4 */
    u32 tag;

    /* off 0xC size 0x4 */
    u32 fire_tick;

    /* off 0x10 size 0x4 */
    u32 fire_tick_2;

    /* off 0x14 size 0x8 */
    Os_AlarmQueue queue;

    /* off 0x1C size 0x4 */
    u32 period_l;

    /* off 0x20 size 0x4 */
    u32 period_h;

    /* off 0x24 size 0x4 */
    u32 start;

    /* off 0x28 size 0x4 */
    u32 start_2;

    /* off 0x2C size 0x4 */
    u32 unk;

} __attribute__((packed));
_Static_assert(sizeof(Os_Alarm) == 0x30, "Os_Alarm definition");

/* size 0xFC */
struct WorkerContext {
    /* off 0x0 size 0x28 */
    void (__cdecl *task_fn_ptr_array[10])();

    /* off 0x28 size 0x1 */
    u8 task_idx;

    /* off 0x29 size 0x3 */
    u8 maybe_pad[3];

    /* off 0x2C size 0xC0 */
    Os_Thread thread;

    /* off 0xEC size 0x8 */
    u8 unkEC[8];

    /* off 0xF4 size 0x4 */
    void *thread_stack_ptr;

    /* off 0xF8 size 0x4 */
    u32 task_pending;

} __attribute__((packed));
_Static_assert(sizeof(WorkerContext) == 0xFC, "WorkerContext definition");

/* size 0xC00 */
struct SaveDataSection_FriendList {
    /* off 0x0 size 0x4 */
    u32 magic_NKFL;

    /* off 0x4 size 0x870 */
    StructOI unk4_ois[60];

    /* off 0x874 size 0x2D0 */
    FriendCode friend_codes[60];

    /* off 0xB44 size 0xBC */
    u32 unkB44[47];

} __attribute__((packed));
_Static_assert(sizeof(SaveDataSection_FriendList) == 0xC00, "SaveDataSection_FriendList definition");

/* size 0x100 */
struct SaveDataSection_Header {
    /* off 0x0 size 0x4 */
    u32 magic_MKDS;

    /* off 0x4 size 0x4 */
    u32 magic_SV10;

    /* off 0x8 size 0x4 */
    u32 magic_NKSY;

    /* off 0xC size 0x14 */
    u16 nickname[10];

    /* off 0x20 size 0x4 */
    u32 secret_unlock_bits;

    /* off 0x24 size 0x2 */
    u16 unk24_some_size;

    /* off 0x26 size 0x4 */
    u8 personal_ghost_bits[4];

    /* off 0x2A size 0x4 */
    u8 download_ghost_bits[4];

    /* off 0x2E size 0x2 */
    u8 unk2E_nkfe_bits[2];

    /* off 0x30 size 0x1 */
    u8 unk30;

    /* off 0x31 size 0x1 */
    u8 unk31_flags_2;

    /* off 0x32 size 0x1 */
    u8 unk32;

    /* off 0x33 size 0x1 */
    u8 unk33;

    /* off 0x34 size 0x4 */
    u32 unk34;

    /* off 0x38 size 0x4 */
    u32 unk38;

    /* off 0x3C size 0x4 */
    int unk3C_val_up_to_1e6;

    /* off 0x40 size 0x4 */
    int unk40_some_idx;

    /* off 0x44 size 0x4 */
    u32 unk44;

    /* off 0x48 size 0x4 */
    u32 unk48;

    /* off 0x4C size 0x40 */
    PlayerProfileInfo profile_info__dwc_acc_user_data;

    /* off 0x8C size 0x74 */
    u8 unk8C[116];

} __attribute__((packed));
_Static_assert(sizeof(SaveDataSection_Header) == 0x100, "SaveDataSection_Header definition");

/* size 0x220 */
struct Card_Context {
    /* off 0x0 size 0x4 */
    Card_Command *cmd;

    /* off 0x4 size 0x4 */
    u32 command;

    /* off 0x8 size 0x4 */
    u32 some_card_lock_id;

    /* off 0xC size 0x4 */
    u32 some_counter;

    /* off 0x10 size 0x8 */
    Os_ThreadQueue lock_queue;

    /* off 0x18 size 0x4 */
    u32 lock_target;

    /* off 0x1C size 0x4 */
    u32 src;

    /* off 0x20 size 0x4 */
    void *dst;

    /* off 0x24 size 0x4 */
    u32 len;

    /* off 0x28 size 0x4 */
    u32 dma_channel;

    /* off 0x2C size 0x4 */
    u32 req_type;

    /* off 0x30 size 0x4 */
    u32 req_retry_count;

    /* off 0x34 size 0x4 */
    u32 req_mode;

    /* off 0x38 size 0x4 */
    void (__fastcall *dma_fn)(void *);

    /* off 0x3C size 0x4 */
    void *dma_fn_arg;

    /* off 0x40 size 0x4 */
    void (__fastcall *task_fn)(Card_Context *);

    /* off 0x44 size 0xC0 */
    Os_Thread thr;

    /* off 0x104 size 0x4 */
    Os_Thread *thr_ref;

    /* off 0x108 size 0x4 */
    u32 thr_prio;

    /* off 0x10C size 0x8 */
    Os_ThreadQueue busy_queue;

    /* off 0x114 size 0x4 */
    u32 status;

    /* off 0x118 size 0x4 */
    u32 unk1;

    /* off 0x11C size 0x4 */
    u32 unk2;

    /* off 0x120 size 0x100 */
    u8 bak_cache_page_buf[256];

} __attribute__((packed));
_Static_assert(sizeof(Card_Context) == 0x220, "Card_Context definition");

/* size 0x30 */
struct StructMTM {
    /* off 0x0 size 0xC */
    StructTM timer0;

    /* off 0xC size 0xC */
    StructTM timer1;

    /* off 0x18 size 0xC */
    StructTM timer2;

    /* off 0x24 size 0xC */
    StructTM timer3;

} __attribute__((packed));
_Static_assert(sizeof(StructMTM) == 0x30, "StructMTM definition");

/* size 0x1F00 */
struct StructZE {
    /* off 0x0 size 0x4 */
    u32 ze1;

    /* off 0x4 size 0x4 */
    u32 ze2;

    /* off 0x8 size 0x4 */
    u32 ze3;

    /* off 0xC size 0x4 */
    u32 some_mode_state_enum;

    /* off 0x10 size 0x4 */
    u32 ze5;

    /* off 0x14 size 0x4 */
    StructWM *strwm;

    /* off 0x18 size 0x4 */
    StructZESub40 *sub40;

    /* off 0x1C size 0x4 */
    StructZESub20 *sub20;

    /* off 0x20 size 0x4 */
    void *ptr3_44;

    /* off 0x24 size 0x4 */
    void *ptr4_c0;

    /* off 0x28 size 0x4 */
    StructZESubC0 *subc0;

    /* off 0x2C size 0x4 */
    void *ptr6_400;

    /* off 0x30 size 0x4 */
    u32 size_1c0;

    /* off 0x34 size 0x4 */
    void *ptr7_1c0;

    /* off 0x38 size 0x4 */
    u32 size_400;

    /* off 0x3C size 0x4 */
    void *ptr8_400;

    /* off 0x40 size 0x4 */
    void *ptr9_18;

    /* off 0x44 size 0x38 */
    u32 zeus11[14];

    /* off 0x7C size 0x4 */
    StructZESubX *subx;

    /* off 0x80 size 0x2 */
    u16 zeusAA1;

    /* off 0x82 size 0x2 */
    u16 zeusAA2;

    /* off 0x84 size 0x1 */
    u8 zeusBB1;

    /* off 0x85 size 0x1 */
    u8 zeusBB2;

    /* off 0x86 size 0x1 */
    u8 zeusBB3;

    /* off 0x87 size 0x1 */
    u8 zeusBB4;

    /* off 0x88 size 0x8 */
    u8 zes[8];

    /* off 0x90 size 0x3A4 */
    u32 zeus2[233];

    /* off 0x434 size 0x4 */
    u32 ge1;

    /* off 0x438 size 0x4 */
    u32 ge2;

    /* off 0x43C size 0x4 */
    u32 some_lang_idx;

    /* off 0x440 size 0x4 */
    u32 ge4;

    /* off 0x444 size 0x4 */
    u32 ge5;

    /* off 0x448 size 0x4 */
    u32 ge6;

    /* off 0x44C size 0x4 */
    u32 ge7;

    /* off 0x450 size 0x4 */
    u32 ge8;

    /* off 0x454 size 0x2 */
    u16 zee1;

    /* off 0x456 size 0x1 */
    u8 zee2;

    /* off 0x457 size 0x1 */
    u8 some_driver_mask;

    /* off 0x458 size 0x4 */
    u32 zef;

    /* off 0x45C size 0x1160 */
    u32 zeus31[1112];

    /* off 0x15BC size 0x4 */
    void *ptr10_sz820;

    /* off 0x15C0 size 0x4 */
    void *ptr11_sz200;

    /* off 0x15C4 size 0x4 */
    void *ptr12_sz8;

    /* off 0x15C8 size 0x4 */
    void *ptr13_sz40;

    /* off 0x15CC size 0x28 */
    u32 zeus3x[10];

    /* off 0x15F4 size 0x1 */
    u8 zeze1;

    /* off 0x15F5 size 0x1 */
    u8 zeze2;

    /* off 0x15F6 size 0x1 */
    u8 some_flags_per_driver_8;

    /* off 0x15F7 size 0x1 */
    u8 zeze4;

    /* off 0x15F8 size 0x10 */
    u32 zeus311[4];

    /* off 0x1608 size 0x4 */
    StateDualHandler *some_dual_handler_2;

    /* off 0x160C size 0x4 */
    StateDualHandler *some_dual_handler;

    /* off 0x1610 size 0x4 */
    u32 ze9;

    /* off 0x1614 size 0x4 */
    u32 ze10;

    /* off 0x1618 size 0x4 */
    u32 ze11;

    /* off 0x161C size 0x4 */
    u32 ze12;

    /* off 0x1620 size 0x4 */
    u32 ze13;

    /* off 0x1624 size 0x4 */
    u32 ze14;

    /* off 0x1628 size 0x4 */
    u32 ptr_sz_16c;

    /* off 0x162C size 0x4 */
    u32 zey;

    /* off 0x1630 size 0x20 */
    u32 ptrs_sz_12[8];

    /* off 0x1650 size 0x4 */
    u32 internal_course_id;

    /* off 0x1654 size 0x4 */
    u32 race_mode;

    /* off 0x1658 size 0x4 */
    StructBin *some_bin_ptr;

    /* off 0x165C size 0x4 */
    void *ptr_size_bin_p0;

    /* off 0x1660 size 0x4 */
    void *ptr_size_a;

    /* off 0x1664 size 0x4 */
    Mem_HeapHead *some_hnd;

    /* off 0x1668 size 0x4 */
    void *ptr_size_4c0;

    /* off 0x166C size 0x4 */
    u32 zd8;

    /* off 0x1670 size 0x4 */
    u32 zd9;

    /* off 0x1674 size 0x4 */
    u32 zd10;

    /* off 0x1678 size 0x4 */
    u32 zd11;

    /* off 0x167C size 0x4 */
    u32 zd12;

    /* off 0x1680 size 0x4 */
    u32 zd13;

    /* off 0x1684 size 0x4 */
    u32 zd14;

    /* off 0x1688 size 0x4 */
    u32 zd15;

    /* off 0x168C size 0x4 */
    u32 zd16;

    /* off 0x1690 size 0x4 */
    u32 bin_size_p0;

    /* off 0x1694 size 0xC */
    u32 zeus32[3];

    /* off 0x16A0 size 0x660 */
    StructGO gos[12];

    /* off 0x1D00 size 0x4 */
    u32 gugu;

    /* off 0x1D04 size 0x4 */
    Mem_HeapHead *another_heap;

    /* off 0x1D08 size 0x138 */
    u32 zeus322[78];

    /* off 0x1E40 size 0x2 */
    u16 some_count;

    /* off 0x1E42 size 0x2 */
    u16 unk12;

    /* off 0x1E44 size 0x10 */
    u32 zeus5[4];

    /* off 0x1E54 size 0x38 */
    u16 zeus4[28];

    /* off 0x1E8C size 0x10 */
    u16 zedrivers[8];

    /* off 0x1E9C size 0x14 */
    u16 zeus121[10];

    /* off 0x1EB0 size 0x4 */
    u32 maybe_tick_rel;

    /* off 0x1EB4 size 0x34 */
    u16 zeus122[26];

    /* off 0x1EE8 size 0x18 */
    MATHRandContext32 ctx;

} __attribute__((packed));
_Static_assert(sizeof(StructZE) == 0x1F00, "StructZE definition");

/* size 0x14 */
struct StructDW {
    /* off 0x0 size 0x8 */
    StructDWW dww;

    /* off 0x8 size 0x4 */
    u32 some_profile_id;

    /* off 0xC size 0x4 */
    u32 some_friend_code_flags;

    /* off 0x10 size 0x2 */
    u16 e1;

    /* off 0x12 size 0x2 */
    u16 e2;

} __attribute__((packed));
_Static_assert(sizeof(StructDW) == 0x14, "StructDW definition");

/* size 0x8B4 */
struct SelectChoisesContext {
    /* off 0x0 size 0x4 */
    u32 is_visible;

    /* off 0x4 size 0x4 */
    u32 cur_state;

    /* off 0x8 size 0x4 */
    u32 next_state;

    /* off 0xC size 0x4 */
    u32 frame_counter_2;

    /* off 0x10 size 0x4 */
    u32 frame_counter;

    /* off 0x14 size 0x4 */
    u32 show_arrow;

    /* off 0x18 size 0x4 */
    u32 option_2_focused;

    /* off 0x1C size 0x4 */
    u32 nb8_maybe_dialog_ans;

    /* off 0x20 size 0x4 */
    u32 any_option_pressed;

    /* off 0x24 size 0x4 */
    u32 needs_load;

    /* off 0x28 size 0x4 */
    u32 maybe_needs_finish;

    /* off 0x2C size 0x800 */
    u32 some_tile_ptr[512];

    /* off 0x82C size 0x4 */
    u32 some_tile_offset_off;

    /* off 0x830 size 0x4 */
    u32 some_tile_offset_on;

    /* off 0x834 size 0x20 */
    G2d_Sprite sprite_1;

    /* off 0x854 size 0x20 */
    G2d_Sprite sprite_2;

    /* off 0x874 size 0x10 */
    G2d_Text text_1;

    /* off 0x884 size 0x10 */
    G2d_Text text_2;

    /* off 0x894 size 0x4 */
    void *tile_data_800_1;

    /* off 0x898 size 0x4 */
    void *tile_data_800_2;

    /* off 0x89C size 0x4 */
    u32 nbx2;

    /* off 0x8A0 size 0x4 */
    u32 nbx1;

    /* off 0x8A4 size 0x4 */
    u32 is_not_dwc;

    /* off 0x8A8 size 0x4 */
    u32 option_1_pressed_sseq_id;

    /* off 0x8AC size 0x4 */
    u32 option_2_pressed_sseq_id;

    /* off 0x8B0 size 0x4 */
    u32 some_sseq_id;

} __attribute__((packed));
_Static_assert(sizeof(SelectChoisesContext) == 0x8B4, "SelectChoisesContext definition");

/* size 0x110 */
struct StructCA {
    /* off 0x0 size 0xC0 */
    StructCAS driver_infos[8];

    /* off 0xC0 size 0x4 */
    u32 cpu_mode;

    /* off 0xC4 size 0x4 */
    u32 driver_count;

    /* off 0xC8 size 0x4 */
    u32 race_mode;

    /* off 0xCC size 0x4 */
    u32 cur_cup_idx;

    /* off 0xD0 size 0x4 */
    u32 cur_internal_course_id;

    /* off 0xD4 size 0x4 */
    u32 cur_cc_type;

    /* off 0xD8 size 0x4 */
    u32 is_mirror;

    /* off 0xDC size 0x4 */
    u32 is_teams;

    /* off 0xE0 size 0x4 */
    u32 c9;

    /* off 0xE4 size 0x4 */
    u32 battle_type;

    /* off 0xE8 size 0x2 */
    u16 maybe_next_rule_param;

    /* off 0xEA size 0x2 */
    u16 c112;

    /* off 0xEC size 0x4 */
    u32 rules;

    /* off 0xF0 size 0x4 */
    u32 ca3;

    /* off 0xF4 size 0x4 */
    void *mission_mr_buf;

    /* off 0xF8 size 0x4 */
    u32 mission_mr_buf_p8;

    /* off 0xFC size 0x1 */
    u8 cur_mission_level;

    /* off 0xFD size 0x1 */
    u8 cur_mission_stage;

    /* off 0xFE size 0x1 */
    u8 ca413;

    /* off 0xFF size 0x1 */
    u8 ca414;

    /* off 0x100 size 0x4 */
    u32 ca5;

    /* off 0x104 size 0x4 */
    u32 ca6;

    /* off 0x108 size 0x4 */
    u32 ca7;

    /* off 0x10C size 0x1 */
    u8 ca81;

    /* off 0x10D size 0x1 */
    u8 ca82;

    /* off 0x10E size 0x1 */
    u8 ca9;

    /* off 0x10F size 0x1 */
    u8 ca10;

} __attribute__((packed));
_Static_assert(sizeof(StructCA) == 0x110, "StructCA definition");

/* size 0x400 */
struct RaceConfigManager {
    /* off 0x0 size 0x1E8 */
    RaceConfig cur_race;

    /* off 0x1E8 size 0x1E8 */
    RaceConfig next_race;

    /* off 0x3D0 size 0x1 */
    u8 driver_count;

    /* off 0x3D1 size 0x1 */
    u8 some_kind_driver_count;

    /* off 0x3D2 size 0x2 */
    u8 team_drivr_counts[2];

    /* off 0x3D4 size 0x1 */
    u8 unk3D5_driver_id_count;

    /* off 0x3D5 size 0x2 */
    u8 unk3D5_driver_id_arr[2];

    /* off 0x3D7 size 0x1 */
    u8 unk8_3D7;

    /* off 0x3D8 size 0x2 */
    u16 maybe_next_rule_param;

    /* off 0x3DA size 0x2 */
    u16 unk16_3DA;

    /* off 0x3DC size 0x4 */
    u32 ptr_sz_0x21_course_queue;

    /* off 0x3E0 size 0x1 */
    u8 course_queue_idx;

    /* off 0x3E1 size 0x1 */
    u8 unk8_3E1;

    /* off 0x3E2 size 0x4 */
    RaceTime personal_ghost_time;

    /* off 0x3E6 size 0x1 */
    u8 has_personal_ghost;

    /* off 0x3E7 size 0x1 */
    u8 unk8_3E7;

    /* off 0x3E8 size 0x4 */
    RaceTime ghost_time;

    /* off 0x3EC size 0x14 */
    RaceTime ghost_lap_times[5];

} __attribute__((packed));
_Static_assert(sizeof(RaceConfigManager) == 0x400, "RaceConfigManager definition");

/* size 0x110 */
struct StructPE {
    /* off 0x0 size 0x4 */
    NkmOBJI *obji_ptr;

    /* off 0x4 size 0x4 */
    NkmOBJI *obji_count;

    /* off 0x8 size 0x4 */
    NkmPATH *path_ptr;

    /* off 0xC size 0x2 */
    u16 path_count;

    /* off 0xE size 0x2 */
    u16 pad2;

    /* off 0x10 size 0x4 */
    NkmPOIT *poit_ptr;

    /* off 0x14 size 0x2 */
    u16 poit_count;

    /* off 0x16 size 0x2 */
    u16 pad3;

    /* off 0x18 size 0x4 */
    Nkm_STAG *stag_ptr;

    /* off 0x1C size 0x4 */
    NkmKTPS *ktps_ptr;

    /* off 0x20 size 0x2 */
    u16 ktps_count;

    /* off 0x22 size 0x2 */
    u16 pad4;

    /* off 0x24 size 0x4 */
    NkmKTPJ *ktpj_ptr;

    /* off 0x28 size 0x2 */
    u16 ktpj_count;

    /* off 0x2A size 0x2 */
    u16 pad5;

    /* off 0x2C size 0x4 */
    u32 xa;

    /* off 0x30 size 0x4 */
    u32 xb;

    /* off 0x34 size 0x4 */
    NkmKTPC *ktpc_ptr;

    /* off 0x38 size 0x2 */
    u16 ktpc_count;

    /* off 0x3A size 0x2 */
    u16 pad6;

    /* off 0x3C size 0x4 */
    NkmKTPM *ktpm_ptr;

    /* off 0x40 size 0x2 */
    u16 ktpm_count;

    /* off 0x42 size 0x2 */
    u16 pad7;

    /* off 0x44 size 0x4 */
    NkmCPOI *cpoi_ptr;

    /* off 0x48 size 0x2 */
    u16 cpoi_count;

    /* off 0x4A size 0x2 */
    u16 pad8;

    /* off 0x4C size 0x4 */
    NkmCPAT *cpat_ptr;

    /* off 0x50 size 0x2 */
    u16 cpat_count;

    /* off 0x52 size 0x2 */
    u16 pad9;

    /* off 0x54 size 0x4 */
    NkmIPOI *ipoi_ptr;

    /* off 0x58 size 0x2 */
    u16 ipoi_count;

    /* off 0x5A size 0x2 */
    u16 pad10;

    /* off 0x5C size 0x4 */
    NkmIPAT *ipat_ptr;

    /* off 0x60 size 0x2 */
    u16 ipat_count;

    /* off 0x62 size 0x2 */
    u16 pad11;

    /* off 0x64 size 0x4 */
    NkmEPOI *epoi_ptr;

    /* off 0x68 size 0x2 */
    u16 epoi_count;

    /* off 0x6A size 0x2 */
    u16 pad12;

    /* off 0x6C size 0x4 */
    NkmEPAT *epat_ptr;

    /* off 0x70 size 0x2 */
    u16 epat_count;

    /* off 0x72 size 0x2 */
    u16 pad13;

    /* off 0x74 size 0x4 */
    NkmAREA *area_ptr;

    /* off 0x78 size 0x2 */
    u16 area_count;

    /* off 0x7A size 0x2 */
    u16 pad14;

    /* off 0x7C size 0x4 */
    NkmCAME *came_ptr;

    /* off 0x80 size 0x4 */
    u32 came_count;

    /* off 0x84 size 0x4 */
    NkmEPOI *epoi_ptr_2;

    /* off 0x88 size 0x2 */
    u16 epoi_count_2;

    /* off 0x8A size 0x2 */
    u16 pad15;

    /* off 0x8C size 0x4 */
    NkmEPAT *epat_ptr_2;

    /* off 0x90 size 0x2 */
    u16 epat_count_2;

    /* off 0x92 size 0x2 */
    u16 pad16;

    /* off 0x94 size 0x4 */
    NkmPathEntry *path_entries;

    /* off 0x98 size 0x2 */
    u16 valid_cpoi_count;

    /* off 0x9A size 0x2 */
    u16 some_cpat_point_end;

    /* off 0x9C size 0x2 */
    u16 min_cpat_section_order_a;

    /* off 0x9E size 0x2 */
    u16 pad17;

    /* off 0xA0 size 0x4 */
    StructEPOIX *epoix_ptr;

    /* off 0xA4 size 0x4 */
    u32 pe8;

    /* off 0xA8 size 0x4 */
    u32 pe7;

    /* off 0xAC size 0x4 */
    NkmIpatEntry *ipat_entries;

    /* off 0xB0 size 0x4 */
    u32 some_ipat_stuff;

    /* off 0xB4 size 0x4 */
    u32 pe4;

    /* off 0xB8 size 0x4 */
    u32 pe3;

    /* off 0xBC size 0x4 */
    u32 pe2;

    /* off 0xC0 size 0x4 */
    u32 pe1;

    /* off 0xC4 size 0x4 */
    NkmCAME *indicator_top_scr_came;

    /* off 0xC8 size 0x4 */
    NkmCAME *indicator_sub_scr_came;

    /* off 0xCC size 0x4 */
    NkmCAME *cam_type6;

    /* off 0xD0 size 0x4 */
    NkmCAME *battle_mode_cam;

    /* off 0xD4 size 0x4 */
    NkmCAME *mission_finish_cam;

    /* off 0xD8 size 0x20 */
    NkmAreaListEntry *clip_area_lists[8];

    /* off 0xF8 size 0x4 */
    u16 *another_table_ktpj;

    /* off 0xFC size 0x4 */
    u16 *some_cannon_table;

    /* off 0x100 size 0x2 */
    u16 cur_mg_respawn_id;

    /* off 0x102 size 0x2 */
    u16 area_type4_count;

    /* off 0x104 size 0x4 */
    u32 course_len;

    /* off 0x108 size 0x4 */
    u32 course_len_rel_div15000;

    /* off 0x10C size 0x2 */
    u16 nkm_version;

    /* off 0x10E size 0x1 */
    u8 a52;

    /* off 0x10F size 0x1 */
    u8 mission_end_area_count;

} __attribute__((packed));
_Static_assert(sizeof(StructPE) == 0x110, "StructPE definition");

/* size 0x2C */
struct ExplosionManager {
    /* off 0x0 size 0x2 */
    u16 maybe_instance_count;

    /* off 0x2 size 0x2 */
    u16 unk_maybe_pad;

    /* off 0x4 size 0x4 */
    u32 maybe_has_nsbca;

    /* off 0x8 size 0x4 */
    u32 maybe_has_nsbma;

    /* off 0xC size 0x4 */
    u32 maybe_has_nsbta;

    /* off 0x10 size 0x4 */
    void *create_instance_fn;

    /* off 0x14 size 0x4 */
    void *update_instance_fn;

    /* off 0x18 size 0x4 */
    u32 instance_size;

    /* off 0x1C size 0x10 */
    ModelResource sub;

} __attribute__((packed));
_Static_assert(sizeof(ExplosionManager) == 0x2C, "ExplosionManager definition");

/* size 0xF0 */
struct FFData {
    /* off 0x0 size 0x4 */
    u32 chip_id_1;

    /* off 0x4 size 0x4 */
    u32 chip_id_2;

    /* off 0x8 size 0x2 */
    u16 card_header_crc;

    /* off 0xA size 0x2 */
    u16 card_secure_area_crc;

    /* off 0xC size 0x2 */
    u16 card_header_bad_crc;

    /* off 0xE size 0x2 */
    u16 card_secure_area_bad_crc;

    /* off 0x10 size 0x2 */
    u16 arm7_bios_crc;

    /* off 0x12 size 0x2 */
    u16 secure_disable;

    /* off 0x14 size 0x2 */
    u16 sio_debug_exists;

    /* off 0x16 size 0x1 */
    u8 unk_rtc_status;

    /* off 0x17 size 0x1 */
    u8 rand_8bit;

    /* off 0x18 size 0x18 */
    u8 unk[24];

    /* off 0x30 size 0x2 */
    u16 unk_gba_card_val;

    /* off 0x32 size 0x3 */
    u8 unk_gba_card_val_2[3];

    /* off 0x35 size 0x1 */
    u8 unk_flags;

    /* off 0x36 size 0x2 */
    u16 gba_card_maker_code;

    /* off 0x38 size 0x4 */
    u32 gba_card_game_code;

    /* off 0x3C size 0x4 */
    u32 frame_counter;

    /* off 0x40 size 0x2 */
    u16 boot_indicator;

    /* off 0x42 size 0x3E */
    u8 unused[62];

    /* off 0x80 size 0x70 */
    Bios_PersonalData pla;

} __attribute__((packed));
_Static_assert(sizeof(FFData) == 0xF0, "FFData definition");

/* size 0x60 */
struct Os_IrqSpecialHandlerList {
    /* off 0x0 size 0x60 */
    Os_IrqSpecialHandlerEntry entries[8];

} __attribute__((packed));
_Static_assert(sizeof(Os_IrqSpecialHandlerList) == 0x60, "Os_IrqSpecialHandlerList definition");

/* size 0x6C */
struct Model {
    /* off 0x0 size 0x54 */
    NNSG3dRenderObj render_obj;

    /* off 0x54 size 0x4 */
    u32 cull_reversed;

    /* off 0x58 size 0x4 */
    u32 has_one_mat_and_poly;

    /* off 0x5C size 0x10 */
    ModelResource loaded_mdl_tex;

} __attribute__((packed));
_Static_assert(sizeof(Model) == 0x6C, "Model definition");

/* size 0x600 */
struct StructYE {
    /* off 0x0 size 0x600 */
    StructYH yhs_for_courses[32];

} __attribute__((packed));
_Static_assert(sizeof(StructYE) == 0x600, "StructYE definition");

/* size 0x15E0 */
struct StructFX {
    /* off 0x0 size 0x15E0 */
    StructFY fys[10];

} __attribute__((packed));
_Static_assert(sizeof(StructFX) == 0x15E0, "StructFX definition");

/* size 0x24 */
struct NkmCPOI {
    /* off 0x0 size 0x8 */
    Vector2 pos_v;

    /* off 0x8 size 0x8 */
    Vector2 pos_v_2;

    /* off 0x10 size 0x4 */
    u32 sinus;

    /* off 0x14 size 0x4 */
    u32 cosinus;

    /* off 0x18 size 0x4 */
    u32 distance;

    /* off 0x1C size 0x2 */
    u16 section_data_1;

    /* off 0x1E size 0x2 */
    u16 section_data_2;

    /* off 0x20 size 0x2 */
    __int16 key_id;

    /* off 0x22 size 0x1 */
    u8 respawn_id;

    /* off 0x23 size 0x1 */
    u8 unk;

} __attribute__((packed));
_Static_assert(sizeof(NkmCPOI) == 0x24, "NkmCPOI definition");

/* size 0x124 */
struct SceneExecutionStatus {
    /* off 0x0 size 0x4 */
    void *thr_stack;

    /* off 0x4 size 0xC0 */
    Os_Thread thr;

    /* off 0xC4 size 0x8 */
    Os_ThreadQueue thr_queue;

    /* off 0xCC size 0x4 */
    u32 pre_sleep_cb_1;

    /* off 0xD0 size 0x4 */
    u32 pre_sleep_cb_2;

    /* off 0xD4 size 0x4 */
    u32 pre_sleep_cb_3;

    /* off 0xD8 size 0x4 */
    u32 post_sleep_cb_1;

    /* off 0xDC size 0x4 */
    u32 post_sleep_cb_2;

    /* off 0xE0 size 0x4 */
    u32 post_sleep_cb_3;

    /* off 0xE4 size 0x4 */
    u32 scene_frame_counter;

    /* off 0xE8 size 0x4 */
    u32 total_frame_counter;

    /* off 0xEC size 0x20 */
    SceneInfo cur_info;

    /* off 0x10C size 0x4 */
    u32 cur_scene_state;

    /* off 0x110 size 0x4 */
    u32 is_lcd_off;

    /* off 0x114 size 0x4 */
    u32 unk114;

    /* off 0x118 size 0x4 */
    u32 multiplay_error_kind;

    /* off 0x11C size 0x4 */
    u32 unk11C;

    /* off 0x120 size 0x1 */
    u8 some_scene_id;

    /* off 0x121 size 0x1 */
    u8 unk121_pad;

    /* off 0x122 size 0x1 */
    u8 unk122_pad;

    /* off 0x123 size 0x1 */
    u8 unk123_pad;

} __attribute__((packed));
_Static_assert(sizeof(SceneExecutionStatus) == 0x124, "SceneExecutionStatus definition");

/* size 0x38 */
struct Animation {
    /* off 0x0 size 0x14 */
    Animator animator;

    /* off 0x14 size 0x4 */
    Model *model_ref;

    /* off 0x18 size 0x2 */
    u16 anim_count;

    /* off 0x1A size 0x2 */
    u16 cur_anim_idx;

    /* off 0x1C size 0x4 */
    NNSG3dAnmObj **anim_objs;

    /* off 0x20 size 0x4 */
    u32 *loop_flags;

    /* off 0x24 size 0x4 */
    u32 unk24;

    /* off 0x28 size 0x4 */
    u32 anim_fmt;

    /* off 0x2C size 0x4 */
    u32 is_blending;

    /* off 0x30 size 0x4 */
    u32 blend_speed;

    /* off 0x34 size 0x4 */
    NNSG3dAnmObj *blend_anim_obj;

} __attribute__((packed));
_Static_assert(sizeof(Animation) == 0x38, "Animation definition");

/* size 0x74 */
struct StructAD00Sh {
    /* off 0x0 size 0x6C */
    Model strml;

    /* off 0x6C size 0x2 */
    u16 some_val;

    /* off 0x6E size 0x2 */
    u16 sh2;

    /* off 0x70 size 0x2 */
    u16 sh3;

    /* off 0x72 size 0x2 */
    u16 sh4;

} __attribute__((packed));
_Static_assert(sizeof(StructAD00Sh) == 0x74, "StructAD00Sh definition");

/* size 0x130 */
struct StructB488 {
    /* off 0x0 size 0x4 */
    u32 title_menu_skip_intro;

    /* off 0x4 size 0x4 */
    u32 b2;

    /* off 0x8 size 0x4 */
    u32 single_player_menu_target;

    /* off 0xC size 0x4 */
    u32 ghost_receive;

    /* off 0x10 size 0x4 */
    u32 cur_mission_not_beaten;

    /* off 0x14 size 0x4 */
    u32 b6;

    /* off 0x18 size 0x4 */
    u32 b7;

    /* off 0x1C size 0x4 */
    u32 b8;

    /* off 0x20 size 0x30 */
    u32 driver_configs_3x[12];

    /* off 0x50 size 0x4 */
    u32 b888;

    /* off 0x54 size 0x1 */
    u8 b9;

    /* off 0x55 size 0x1 */
    u8 b10;

    /* off 0x56 size 0x1 */
    u8 b11;

    /* off 0x57 size 0x1 */
    u8 b12;

    /* off 0x58 size 0x4 */
    u32 b13;

    /* off 0x5C size 0x14 */
    u32 played_internal_course_ids[5];

    /* off 0x70 size 0x4 */
    u32 b14;

    /* off 0x74 size 0x4 */
    u32 mode_maybe_mount_ma2_flag;

    /* off 0x78 size 0x4 */
    u32 is_dl;

    /* off 0x7C size 0x4 */
    int player_global_rank;

    /* off 0x80 size 0x4 */
    u32 gp_rank;

    /* off 0x84 size 0x4 */
    u32 cup_idx;

    /* off 0x88 size 0x4 */
    u32 cc_type;

    /* off 0x8C size 0x4 */
    u32 is_mirror;

    /* off 0x90 size 0x4 */
    u32 player_character_id;

    /* off 0x94 size 0x4 */
    u32 player_kart_id;

    /* off 0x98 size 0x10 */
    RaceTime times[4];

    /* off 0xA8 size 0x2 */
    u16 player_total_rankpoints;

    /* off 0xAA size 0x2 */
    u16 unk_pad;

    /* off 0xAC size 0x20 */
    u32 racer_character_ids[8];

    /* off 0xCC size 0x20 */
    u32 racer_kart_ids[8];

    /* off 0xEC size 0x20 */
    u8 bs[32];

    /* off 0x10C size 0x20 */
    u32 heyho_palette_rows[8];

    /* off 0x12C size 0x4 */
    u32 bz;

} __attribute__((packed));
_Static_assert(sizeof(StructB488) == 0x130, "StructB488 definition");

/* size 0x400 */
struct Bios_SharedRegion {
    /* off 0x0 size 0x10 */
    u8 boot_check_info[16];

    /* off 0x10 size 0x10 */
    u8 boot_check_info_2[16];

    /* off 0x20 size 0x4 */
    u32 reset_parameter;

    /* off 0x24 size 0x8 */
    u8 padding5[8];

    /* off 0x2C size 0x4 */
    u32 rom_base_offset;

    /* off 0x30 size 0xC */
    u8 cartridge_module_info[12];

    /* off 0x3C size 0x4 */
    u32 vblank_count;

    /* off 0x40 size 0x40 */
    u8 wm_boot_buf[64];

    /* off 0x80 size 0x70 */
    Bios_PersonalData pdata;

    /* off 0xF0 size 0x4 */
    u8 zero_1[4];

    /* off 0xF4 size 0x6 */
    u8 mac_addr[6];

    /* off 0xFA size 0x6 */
    u8 zero_2[6];

    /* off 0x100 size 0x80 */
    u8 nvram_user_info[128];

    /* off 0x180 size 0x20 */
    u8 isd_reserved1[32];

    /* off 0x1A0 size 0x48 */
    u8 arenaInfo[72];

    /* off 0x1E8 size 0x8 */
    u8 real_time_clock[8];

    /* off 0x1F0 size 0x10 */
    u32 dma_clear_buf[4];

    /* off 0x200 size 0x160 */
    Bios_CardHeader rom_header;

    /* off 0x360 size 0x20 */
    u8 isd_reserved_2[32];

    /* off 0x380 size 0x8 */
    u32 pxi_signal_param[2];

    /* off 0x388 size 0x8 */
    u32 fifo_proc_handler_masks[2];

    /* off 0x390 size 0x4 */
    u32 mic_last_address;

    /* off 0x394 size 0x2 */
    u16 mic_sampling_data;

    /* off 0x396 size 0x2 */
    u16 wm_callback_control;

    /* off 0x398 size 0x2 */
    u16 wm_rssi_pool;

    /* off 0x39A size 0x2 */
    u8 pad_3[2];

    /* off 0x39C size 0x4 */
    u32 component_param;

    /* off 0x3A0 size 0x4 */
    Os_ThreadInfo *thread_info_mainp;

    /* off 0x3A4 size 0x4 */
    Os_ThreadInfo *thread_info_subp;

    /* off 0x3A8 size 0x2 */
    u16 buttons_xy;

    /* off 0x3AA size 0x4 */
    u8 touch_panel[4];

    /* off 0x3AE size 0x2 */
    u16 autoload_sync;

    /* off 0x3B0 size 0x8 */
    u32 lock_id_flag_mainp[2];

    /* off 0x3B8 size 0x8 */
    u32 lock_id_flag_subp[2];

    /* off 0x3C0 size 0x8 */
    Os_Lock lock_VRAM_C;

    /* off 0x3C8 size 0x8 */
    Os_Lock lock_VRAM_D;

    /* off 0x3D0 size 0x8 */
    Os_Lock lock_WRAM_block_0;

    /* off 0x3D8 size 0x8 */
    Os_Lock lock_WRAM_block_1;

    /* off 0x3E0 size 0x8 */
    Os_Lock lock_card;

    /* off 0x3E8 size 0x8 */
    Os_Lock unk_lock_cart;

    /* off 0x3F0 size 0x8 */
    Os_Lock lock_init;

    /* off 0x3F8 size 0x2 */
    u16 mmem_checker_mainp;

    /* off 0x3FA size 0x2 */
    u16 mmem_checker_subp;

    /* off 0x3FC size 0x2 */
    u8 pad_4[2];

    /* off 0x3FE size 0x2 */
    u16 command_area;

} __attribute__((packed));
_Static_assert(sizeof(Bios_SharedRegion) == 0x400, "Bios_SharedRegion definition");

/* size 0x4C */
struct NNSG3dResTex_Tex0Block {
    /* off 0x0 size 0x8 */
    CommonBlockHeader hdr;

    /* off 0x8 size 0x4 */
    u32 tex_vram_key;

    /* off 0xC size 0x2 */
    u16 tex_data_size_bs3;

    /* off 0xE size 0x2 */
    u16 tex_dict_offset;

    /* off 0x10 size 0x2 */
    u16 tex_flag;

    /* off 0x12 size 0x2 */
    u16 pad1;

    /* off 0x14 size 0x4 */
    u32 tex_data_offset;

    /* off 0x18 size 0x4 */
    u32 comp_tex_vram_key;

    /* off 0x1C size 0x2 */
    u16 comp_tex_data_size_bs3;

    /* off 0x1E size 0x2 */
    u16 comp_tex_dict_offset_unk;

    /* off 0x20 size 0x2 */
    u16 comp_tex_flag;

    /* off 0x22 size 0x2 */
    u16 pad2;

    /* off 0x24 size 0x4 */
    u32 comp_tex_data_offset;

    /* off 0x28 size 0x4 */
    u32 comp_tex_info_data_offset;

    /* off 0x2C size 0x4 */
    u32 plt_vram_key;

    /* off 0x30 size 0x2 */
    u16 plt_data_size_bs3;

    /* off 0x32 size 0x2 */
    u16 plt_flag;

    /* off 0x34 size 0x2 */
    u16 plt_dict_offset;

    /* off 0x36 size 0x2 */
    u16 pad3;

    /* off 0x38 size 0x4 */
    u32 plt_data_offset;

    /* off 0x3C size 0x10 */
    Dict_Header tex_dict;

} __attribute__((packed));
_Static_assert(sizeof(NNSG3dResTex_Tex0Block) == 0x4C, "NNSG3dResTex_Tex0Block definition");

/* size 0x168 */
struct StructLU {
    /* off 0x0 size 0x140 */
    StructLUMax maxes[4];

    /* off 0x140 size 0x4 */
    u32 player_total_skill_rankpoints;

    /* off 0x144 size 0x10 */
    StructLUEntry maxes2[2];

    /* off 0x154 size 0x10 */
    u32 maxes3[4];

    /* off 0x164 size 0x4 */
    u32 some_flags;

} __attribute__((packed));
_Static_assert(sizeof(StructLU) == 0x168, "StructLU definition");

/* size 0x18 */
union Fs_File_OperationArg {
    /* off 0x0 size 0xC */
    Fs_File_OperationArg_Read read;

    /* off 0x1 size 0xC */
    Fs_File_OperationArg_Write write;

    /* off 0x2 size 0xC */
    Fs_File_OperationArg_SeekDirectory seek_dir;

    /* off 0x3 size 0x18 */
    Fs_File_OperationArg_FindPath find_path;

    /* off 0x4 size 0xC */
    Fs_File_OperationArg_OpenFileRaw open_file_raw;

    /* off 0x5 size 0x8 */
    Fs_File_OperationArg_OpenFileById open_file_by_id;

} __attribute__((packed));
/* size 0x10 */
union Fs_File_Entry {
    /* off 0x0 size 0x10 */
    Fs_File_Entry_File e_file;

    /* off 0x1 size 0x10 */
    Fs_File_Entry_Directory e_dir;

} __attribute__((packed));
/* size 0x194 */
struct StructAED0 {
    /* off 0x0 size 0x20 */
    StructAER *aers_racers[8];

    /* off 0x20 size 0x4 */
    u32 some_kind_racer_count;

    /* off 0x24 size 0x10 */
    u16 aedd1[8];

    /* off 0x34 size 0x10 */
    u16 aedd2[8];

    /* off 0x44 size 0x10 */
    u16 aedd3[8];

    /* off 0x54 size 0x10 */
    u16 aedd4[8];

    /* off 0x64 size 0x10 */
    u16 aedd5[8];

    /* off 0x74 size 0x10 */
    u16 aedd6[8];

    /* off 0x84 size 0x10 */
    u16 aedd7[8];

    /* off 0x94 size 0x10 */
    u16 unk94_some_driver_ids[8];

    /* off 0xA4 size 0x20 */
    u16 aedd[16];

    /* off 0xC4 size 0x20 */
    StructAER *also_aers1[8];

    /* off 0xE4 size 0x20 */
    StructAER *also_aers2[8];

    /* off 0x104 size 0x20 */
    StructAER *also_aers3[8];

    /* off 0x124 size 0x20 */
    u32 player_unk[8];

    /* off 0x144 size 0x20 */
    u32 player_emblem_data_ptrs[8];

    /* off 0x164 size 0x20 */
    u32 player_emblem_palette_data_ptrs[8];

    /* off 0x184 size 0x4 */
    u32 fe1;

    /* off 0x188 size 0x4 */
    u32 fe2;

    /* off 0x18C size 0x4 */
    u32 fe3;

    /* off 0x190 size 0x4 */
    u32 fe4;

} __attribute__((packed));
_Static_assert(sizeof(StructAED0) == 0x194, "StructAED0 definition");

/* size 0x85C */
struct StructStaffRollStuff {
    /* off 0x0 size 0x4 */
    u32 st1;

    /* off 0x4 size 0x4 */
    u32 frame_count_reached_780;

    /* off 0x8 size 0x4 */
    u32 st3;

    /* off 0xC size 0x4 */
    u32 unk_70a;

    /* off 0x10 size 0x4 */
    u32 st5;

    /* off 0x14 size 0x4 */
    u32 unk_ffffffff;

    /* off 0x18 size 0x4 */
    void *staffroll_bmg_str0;

    /* off 0x1C size 0x1 */
    u8 st8;

    /* off 0x1D size 0x3 */
    u8 pad0[3];

    /* off 0x20 size 0x20 */
    G2d_Sprite bg_canvas;

    /* off 0x40 size 0x10 */
    G2d_Text text_canvas;

    /* off 0x50 size 0x800 */
    u8 bg_data_offset[2048];

    /* off 0x850 size 0x1 */
    u8 unkunk;

    /* off 0x851 size 0x3 */
    u8 pad[3];

    /* off 0x854 size 0x4 */
    u32 unk_240;

    /* off 0x858 size 0x4 */
    Mem_HeapHead *alloc_heap_hnd;

} __attribute__((packed));
_Static_assert(sizeof(StructStaffRollStuff) == 0x85C, "StructStaffRollStuff definition");

/* size 0x1A44 */
struct Struct1A44 {
    /* off 0x0 size 0x4 */
    u32 multiplay_error_kind;

    /* off 0x4 size 0x4 */
    u32 maybe_multiplay_error_arg;

    /* off 0x8 size 0x4 */
    void *multiplay_error_str;

    /* off 0xC size 0x4 */
    u32 maybe_has_multiplay_error;

    /* off 0x10 size 0x4 */
    u32 a5;

    /* off 0x14 size 0x20 */
    G2d_Sprite bg_canvas;

    /* off 0x34 size 0x10 */
    G2d_Text text_canvas;

    /* off 0x44 size 0x1400 */
    u32 bg_canvas_tile_data[1280];

    /* off 0x1444 size 0x600 */
    u16 temp_multiplay_error_str_buf[768];

} __attribute__((packed));
_Static_assert(sizeof(Struct1A44) == 0x1A44, "Struct1A44 definition");

/* size 0xE0 */
struct SaveDataGrandPrixCcEntry {
    /* off 0x0 size 0xE0 */
    SaveDataGrandPrixCupRecordEntry cups[8];

} __attribute__((packed));
_Static_assert(sizeof(SaveDataGrandPrixCcEntry) == 0xE0, "SaveDataGrandPrixCcEntry definition");

/* size 0x9 */
struct SaveDataMissionRunLevelEntry {
    /* off 0x0 size 0x9 */
    SaveDataMissionRunLevelStageEntry stage_entries[9];

} __attribute__((packed));
_Static_assert(sizeof(SaveDataMissionRunLevelEntry) == 0x9, "SaveDataMissionRunLevelEntry definition");

/* size 0x8C */
struct DriverStatus {
    /* off 0x0 size 0x4 */
    u32 race_finish_status;

    /* off 0x4 size 0x4 */
    u32 lap_frame_counter;

    /* off 0x8 size 0x18 */
    RaceTime lap_times[6];

    /* off 0x20 size 0x4 */
    RaceTime total_time;

    /* off 0x24 size 0x4 */
    u32 cur_lap;

    /* off 0x28 size 0x4 */
    u32 first_place_time;

    /* off 0x2C size 0x4 */
    u32 total_time_ms;

    /* off 0x30 size 0x4 */
    u32 flags_and_respawn_id;

    /* off 0x34 size 0x2 */
    u16 last_correct_key_point;

    /* off 0x36 size 0x2 */
    u16 cur_key_point;

    /* off 0x38 size 0x2 */
    u16 cur_cpat;

    /* off 0x3A size 0x2 */
    u16 highest_reached_lap;

    /* off 0x3C size 0x2 */
    u16 bits_place_driver_id_unk;

    /* off 0x3E size 0x2 */
    u16 skill_rankpoints;

    /* off 0x40 size 0x4 */
    fx32 cpoi_progress;

    /* off 0x44 size 0x4 */
    fx32 race_progress;

    /* off 0x48 size 0x4 */
    fx32 lap_progress;

    /* off 0x4C size 0x40 */
    u32 cpoi_idx_mask_arr[16];

} __attribute__((packed));
_Static_assert(sizeof(DriverStatus) == 0x8C, "DriverStatus definition");

/* size 0x270 */
struct StructHD {
    /* off 0x0 size 0xC */
    VecFx32 vec_f_val_d_cross_e;

    /* off 0xC size 0xC */
    VecFx32 vec_e_val_a_cross_d;

    /* off 0x18 size 0xC */
    VecFx32 vec_b;

    /* off 0x24 size 0xC */
    VecFx32 vec_c;

    /* off 0x30 size 0x30 */
    Matrix4x3 some_mat4x3;

    /* off 0x60 size 0x8 */
    u32 hds02[2];

    /* off 0x68 size 0x2 */
    u16 cam_fov_begin_sine;

    /* off 0x6A size 0x2 */
    u16 cam_fov_begin_cosine;

    /* off 0x6C size 0x24 */
    u32 hds1a1[9];

    /* off 0x90 size 0xC */
    VecFx32 vec_j;

    /* off 0x9C size 0xC */
    VecFx32 vec_k;

    /* off 0xA8 size 0x18 */
    u32 hds1a2[6];

    /* off 0xC0 size 0xC */
    VecFx32 vec_a;

    /* off 0xCC size 0x28 */
    u32 hds1b[10];

    /* off 0xF4 size 0xC */
    VecFx32 vec_q1;

    /* off 0x100 size 0xC */
    VecFx32 vec_q2;

    /* off 0x10C size 0xC */
    VecFx32 vec_g;

    /* off 0x118 size 0xC */
    VecFx32 vec_h;

    /* off 0x124 size 0xC */
    VecFx32 vec_i;

    /* off 0x130 size 0x1 */
    u8 cam_unk_flag;

    /* off 0x131 size 0x1 */
    u8 hdd2;

    /* off 0x132 size 0x1 */
    u8 hdd3;

    /* off 0x133 size 0x1 */
    u8 hdd4;

    /* off 0x134 size 0xC */
    VecFx32 vec_m;

    /* off 0x140 size 0x18 */
    u32 hds121[6];

    /* off 0x158 size 0x4 */
    u32 valval;

    /* off 0x15C size 0xC */
    VecFx32 vec_d_val_b_minus_c;

    /* off 0x168 size 0x2C */
    u32 hds122[11];

    /* off 0x194 size 0x40 */
    StructVC vc1;

    /* off 0x1D4 size 0x4 */
    u32 h17;

    /* off 0x1D8 size 0x4 */
    u32 h18;

    /* off 0x1DC size 0x4 */
    u32 h19;

    /* off 0x1E0 size 0x4 */
    u32 h20;

    /* off 0x1E4 size 0x4 */
    u32 h21;

    /* off 0x1E8 size 0x4 */
    u32 h22;

    /* off 0x1EC size 0x4 */
    u32 h23;

    /* off 0x1F0 size 0x4 */
    u32 h24;

    /* off 0x1F4 size 0x4 */
    u32 h25;

    /* off 0x1F8 size 0x4 */
    u32 h26;

    /* off 0x1FC size 0x4 */
    u32 h27;

    /* off 0x200 size 0x4 */
    u32 h28;

    /* off 0x204 size 0x4 */
    u32 h29;

    /* off 0x208 size 0x4 */
    u32 h30;

    /* off 0x20C size 0x4 */
    u32 h31;

    /* off 0x210 size 0x4 */
    u32 some_racer_id;

    /* off 0x214 size 0x4 */
    u32 h33;

    /* off 0x218 size 0x4 */
    NkmCAME *indicator_top_scr_came;

    /* off 0x21C size 0x54 */
    u32 hds2[21];

} __attribute__((packed));
_Static_assert(sizeof(StructHD) == 0x270, "StructHD definition");

/* size 0x380 */
struct SaveDataTimeTrialRecordListEntry {
    /* off 0x0 size 0x380 */
    SaveDataTimeTrialCourseRecordEntry course_entries[32];

} __attribute__((packed));
_Static_assert(sizeof(SaveDataTimeTrialRecordListEntry) == 0x380, "SaveDataTimeTrialRecordListEntry definition");

/* size 0x2E0 */
struct StructVA {
    /* off 0x0 size 0x2E0 */
    StructVO vos[23];

} __attribute__((packed));
_Static_assert(sizeof(StructVA) == 0x2E0, "StructVA definition");

/* size 0x800 */
struct StructAN {
    /* off 0x0 size 0xC0 */
    Os_Thread thr;

    /* off 0xC0 size 0x4 */
    StructANN *strann;

    /* off 0xC4 size 0x20 */
    StructANN another;

    /* off 0xE4 size 0x71C */
    u8 thr_stack[1820];

} __attribute__((packed));
_Static_assert(sizeof(StructAN) == 0x800, "StructAN definition");

/* size 0x30 */
struct CharacterKartContextSub54 {
    /* off 0x0 size 0x30 */
    CharacterKartContextSub54Sub0 subs[4];

} __attribute__((packed));
_Static_assert(sizeof(CharacterKartContextSub54) == 0x30, "CharacterKartContextSub54 definition");

/* size 0x404 */
struct OamBuffer {
    /* off 0x0 size 0x400 */
    GXOamAttr oam_attrs[128];

    /* off 0x400 size 0x2 */
    u16 obj_count;

    /* off 0x402 size 0x2 */
    u16 affine_count;

} __attribute__((packed));
_Static_assert(sizeof(OamBuffer) == 0x404, "OamBuffer definition");

/* size 0x1A4 */
struct RaceOptionMenuManager {
    /* off 0x0 size 0x4 */
    u32 menu_on;

    /* off 0x4 size 0x4 */
    u32 maybe_menu_on_2;

    /* off 0x8 size 0x4 */
    u32 ma3;

    /* off 0xC size 0x4 */
    u32 ma4;

    /* off 0x10 size 0x4 */
    u32 a_pressed;

    /* off 0x14 size 0x4 */
    u32 some_a_press_counter;

    /* off 0x18 size 0x4 */
    u32 some_b_press_counter;

    /* off 0x1C size 0x4 */
    u32 ma8;

    /* off 0x20 size 0x4 */
    u32 ma9;

    /* off 0x24 size 0x4 */
    u32 selected_opt_menu_idx;

    /* off 0x28 size 0x4 */
    u32 cur_menu_opt_idx;

    /* off 0x2C size 0x4 */
    u32 ma12;

    /* off 0x30 size 0x4 */
    u32 maybe_menu_on_3;

    /* off 0x34 size 0x4 */
    u32 ma14_counter_upto50;

    /* off 0x38 size 0x70 */
    RaceOptionMenuEntry opt_menus[4];

    /* off 0xA8 size 0x4 */
    G2d_Font *font;

    /* off 0xAC size 0x80 */
    G2d_Sprite bg_canvases[4];

    /* off 0x12C size 0x40 */
    RaceOptionMenuEntryDrawContext opt_menu_draw_ctxs[4];

    /* off 0x16C size 0x4 */
    PaletteBlock *choises_s_b_plt;

    /* off 0x170 size 0x4 */
    CharGraphicsBlock *choises_s_b_ncgr;

    /* off 0x174 size 0x4 */
    void *alloc_ptr_1;

    /* off 0x178 size 0x4 */
    void *alloc_ptr_2;

    /* off 0x17C size 0x10 */
    void *opt_menu_tile_datas[4];

    /* off 0x18C size 0x18 */
    void *choises_s_i_nscrs[6];

} __attribute__((packed));
_Static_assert(sizeof(RaceOptionMenuManager) == 0x1A4, "RaceOptionMenuManager definition");

/* size 0x11C */
struct RanktimeGp {
    /* off 0x0 size 0x4 */
    u32 unk_sig;

    /* off 0x4 size 0x4 */
    u32 unk_file_size;

    /* off 0x8 size 0x2 */
    u16 course_count;

    /* off 0xA size 0x2 */
    u16 delta_factor;

    /* off 0xC size 0x2 */
    u16 first_place_percentage_factor;

    /* off 0xE size 0x2 */
    u16 start_boost_factor;

    /* off 0x10 size 0x2 */
    u16 drift_factor;

    /* off 0x12 size 0x2 */
    u16 item_hit_factor;

    /* off 0x14 size 0x2 */
    u16 offroad_time_factor;

    /* off 0x16 size 0x2 */
    u16 wall_hit_factor;

    /* off 0x18 size 0x2 */
    u16 damage_factor;

    /* off 0x1A size 0x2 */
    u16 respawn_factor;

    /* off 0x1C size 0x100 */
    RanktimeCourseEntry course_entries[32];

} __attribute__((packed));
_Static_assert(sizeof(RanktimeGp) == 0x11C, "RanktimeGp definition");

/* size 0x79C */
struct StructBO {
    /* off 0x0 size 0xC */
    StructBM *race_state_model_bms[3];

    /* off 0xC size 0x4 */
    StructBM *goal_model_bm;

    /* off 0x10 size 0x4 */
    StructBM *win_model_bm;

    /* off 0x14 size 0x4 */
    StructBM *lose_model_bm;

    /* off 0x18 size 0x4 */
    StructBM *complete_model_bm;

    /* off 0x1C size 0x4 */
    StructBM *failed_model_bm;

    /* off 0x20 size 0x4 */
    StructBM *maybe_cur_model_bm;

    /* off 0x24 size 0x6DC */
    u32 sds1[439];

    /* off 0x700 size 0x4 */
    u32 struct_boc_start;

    /* off 0x704 size 0x38 */
    u32 sds2[14];

    /* off 0x73C size 0x4 */
    u32 race_state;

    /* off 0x740 size 0x2 */
    u16 bobo21;

    /* off 0x742 size 0x2 */
    u16 nsbca_anim_frame_count;

    /* off 0x744 size 0x40 */
    Matrix4x4 m3d_rel_mtx;

    /* off 0x784 size 0x2 */
    u16 bebe1;

    /* off 0x786 size 0x2 */
    u16 bebe2;

    /* off 0x788 size 0x4 */
    u32 sds22_1;

    /* off 0x78C size 0x4 */
    u32 maybe_some_flag;

    /* off 0x790 size 0x4 */
    u32 sds22_3;

    /* off 0x794 size 0x4 */
    int (__fastcall *some_fn_ptr)(StructBOA *);

    /* off 0x798 size 0x4 */
    int (__fastcall *some_fn_ptr_2)(StructBOA *);

} __attribute__((packed));
_Static_assert(sizeof(StructBO) == 0x79C, "StructBO definition");

/* size 0x210 */
struct StructPR {
    /* off 0x0 size 0x28 */
    StructPRSub sub1;

    /* off 0x28 size 0x8 */
    u32 unkas[2];

    /* off 0x30 size 0x28 */
    StructPRSub sub2;

    /* off 0x58 size 0x1A0 */
    u8 gap1[416];

    /* off 0x1F8 size 0x2 */
    u16 racer_idx;

    /* off 0x1FA size 0x2 */
    u16 pad;

    /* off 0x1FC size 0x4 */
    DriverContext *entry;

    /* off 0x200 size 0x4 */
    u32 cur_racer_entry_idx;

    /* off 0x204 size 0xC */
    u32 unk[3];

} __attribute__((packed));
_Static_assert(sizeof(StructPR) == 0x210, "StructPR definition");

/* size 0x5C */
struct InputUnit {
    /* off 0x0 size 0x2 */
    u16 down_key_bits;

    /* off 0x2 size 0x2 */
    u16 held_key_bits;

    /* off 0x4 size 0x2 */
    u16 released_keys;

    /* off 0x6 size 0x2 */
    u16 repeated_keys;

    /* off 0x8 size 0x2 */
    u16 repeat_state;

    /* off 0xA size 0x2 */
    u16 repeat_frame_counter;

    /* off 0xC size 0x2 */
    u16 repeat_mask;

    /* off 0xE size 0x2 */
    u16 repeat_first_frame;

    /* off 0x10 size 0x2 */
    u16 repeat_next_frame;

    /* off 0x12 size 0x2 */
    u16 reset_invoked;

    /* off 0x14 size 0x2 */
    u16 unk14;

    /* off 0x16 size 0x2 */
    u16 unk16_pad;

    /* off 0x18 size 0x4 */
    u32 tick_hi;

    /* off 0x1C size 0x4 */
    u32 tick_lo;

    /* off 0x20 size 0x4 */
    u32 unk20;

    /* off 0x24 size 0x4 */
    u32 unk24;

    /* off 0x28 size 0x10 */
    InputRecorder rec;

    /* off 0x38 size 0x4 */
    u32 unk38;

    /* off 0x3C size 0x4 */
    u32 mode;

    /* off 0x40 size 0x2 */
    u16 virtual_pad_keys;

    /* off 0x42 size 0x2 */
    u16 key_mask;

    /* off 0x44 size 0x4 */
    u32 unk44_pad;

    /* off 0x48 size 0x14 */
    InputTouchUnit touch;

} __attribute__((packed));
_Static_assert(sizeof(InputUnit) == 0x5C, "InputUnit definition");

/* size 0x398 */
struct StructCYT {
    /* off 0x0 size 0x398 */
    InputUnit cys[10];

} __attribute__((packed));
_Static_assert(sizeof(StructCYT) == 0x398, "StructCYT definition");

/* size 0x808 */
struct StructKeyboardOam {
    /* off 0x0 size 0x404 */
    OamBuffer top_oam_buf;

    /* off 0x404 size 0x404 */
    OamBuffer bottom_oam_buf;

} __attribute__((packed));
_Static_assert(sizeof(StructKeyboardOam) == 0x808, "StructKeyboardOam definition");

/* size 0x230 */
struct GhostHeaderEx {
    /* off 0x0 size 0x30 */
    GhostHeader header;

    /* off 0x30 size 0x200 */
    u8 emblem[512];

} __attribute__((packed));
_Static_assert(sizeof(GhostHeaderEx) == 0x230, "GhostHeaderEx definition");

/* size 0x100 */
struct StructDCSub {
    /* off 0x0 size 0x40 */
    u32 ss1[16];

    /* off 0x40 size 0x20 */
    StructDCInner inner;

    /* off 0x60 size 0x90 */
    u32 ss2[36];

    /* off 0xF0 size 0xE */
    u8 unk_buf_xF0[14];

    /* off 0xFE size 0x2 */
    u16 unk_xFE;

} __attribute__((packed));
_Static_assert(sizeof(StructDCSub) == 0x100, "StructDCSub definition");

/* size 0x1000 */
struct StaffGhost {
    /* off 0x0 size 0x230 */
    GhostHeaderEx ex;

    /* off 0x230 size 0xDD0 */
    u8 gugugu[3536];

} __attribute__((packed));
_Static_assert(sizeof(StaffGhost) == 0x1000, "StaffGhost definition");

/* size 0xB8 */
struct StructExplosionInstance {
    /* off 0x0 size 0x4 */
    void *_x1;

    /* off 0x4 size 0x4 */
    void *_x2;

    /* off 0x8 size 0x6C */
    Model model;

    /* off 0x74 size 0xC */
    VecFx32 some_vec;

    /* off 0x80 size 0x4 */
    void *man_create_instance_fn;

    /* off 0x84 size 0x4 */
    void *man_update_instance_fn;

    /* off 0x88 size 0x4 */
    u32 maybe_unload_flag;

    /* off 0x8C size 0x4 */
    u32 exp_man_idx;

    /* off 0x90 size 0x4 */
    Animation *nsbca_anim;

    /* off 0x94 size 0x4 */
    Animation *nsbma_anim;

    /* off 0x98 size 0x4 */
    Animation *nsbta_anim;

    /* off 0x9C size 0x4 */
    u32 some_size;

    /* off 0xA0 size 0x4 */
    u32 some_size2;

    /* off 0xA4 size 0x4 */
    u32 some_size3;

    /* off 0xA8 size 0x4 */
    u32 some_counter;

    /* off 0xAC size 0x4 */
    u32 nsbca_anim_frame_count;

    /* off 0xB0 size 0x2 */
    u16 maybe_idx;

    /* off 0xB2 size 0x2 */
    u16 x42;

    /* off 0xB4 size 0x4 */
    u32 x43;

} __attribute__((packed));
_Static_assert(sizeof(StructExplosionInstance) == 0xB8, "StructExplosionInstance definition");

/* size 0x124 */
struct StructTrophyResult {
    /* off 0x0 size 0x2 */
    u16 cup_idx;

    /* off 0x2 size 0x2 */
    u16 player_global_rank;

    /* off 0x4 size 0x4 */
    u32 ggu11;

    /* off 0x8 size 0x4 */
    u32 ggu12;

    /* off 0xC size 0x4 */
    u32 ggu13;

    /* off 0x10 size 0x4 */
    u32 ggu14;

    /* off 0x14 size 0x4 */
    u32 ggu15;

    /* off 0x18 size 0x4 */
    u32 ggu16;

    /* off 0x1C size 0x4 */
    u32 ggu17;

    /* off 0x20 size 0x4 */
    u32 ggu18;

    /* off 0x24 size 0x4 */
    u32 ggu19;

    /* off 0x28 size 0x6C */
    Model model;

    /* off 0x94 size 0x38 */
    Animation anim;

    /* off 0xCC size 0x30 */
    u32 ggu2[12];

    /* off 0xFC size 0x2 */
    u16 val16_1;

    /* off 0xFE size 0x2 */
    u16 val16_2;

    /* off 0x100 size 0x2 */
    u16 val16_3;

    /* off 0x102 size 0x2 */
    u16 val16_4;

    /* off 0x104 size 0x2 */
    u16 val16_5;

    /* off 0x106 size 0x2 */
    u16 val16_6;

    /* off 0x108 size 0x4 */
    u32 val32_1;

    /* off 0x10C size 0x4 */
    u32 val32_2;

    /* off 0x110 size 0x4 */
    u32 val32_3;

    /* off 0x114 size 0x4 */
    u32 val32_4;

    /* off 0x118 size 0xC */
    u32 ggu4[3];

} __attribute__((packed));
_Static_assert(sizeof(StructTrophyResult) == 0x124, "StructTrophyResult definition");

/* size 0x90 */
struct StructAERSub {
    /* off 0x0 size 0x24 */
    StructAERSubSub sub1;

    /* off 0x24 size 0x24 */
    StructAERSubSub sub2;

    /* off 0x48 size 0x24 */
    StructAERSubSub sub3;

    /* off 0x6C size 0x24 */
    StructAERSubSub sub4;

} __attribute__((packed));
_Static_assert(sizeof(StructAERSub) == 0x90, "StructAERSub definition");

/* size 0x90 */
struct KartAIParamEntry {
    /* off 0x0 size 0x90 */
    KartAIParamCcEntry ccs[4];

} __attribute__((packed));
_Static_assert(sizeof(KartAIParamEntry) == 0x90, "KartAIParamEntry definition");

/* size 0xF00 */
struct StructWM {
    /* off 0x0 size 0x4 */
    void *buf1_ptr;

    /* off 0x4 size 0x4 */
    void *buf2_ptr;

    /* off 0x8 size 0x4 */
    u32 unk;

    /* off 0xC size 0x4 */
    WMMessage *msg_ptr;

    /* off 0x10 size 0x4 */
    void *buf3_ptr;

    /* off 0x14 size 0x2 */
    u16 dma_ch;

    /* off 0x16 size 0x2 */
    u16 w2;

    /* off 0x18 size 0x1E8 */
    u32 wmx1[122];

    /* off 0x200 size 0x300 */
    u32 buf1[192];

    /* off 0x500 size 0x800 */
    u32 buf2[512];

    /* off 0xD00 size 0x100 */
    WMMessage msg;

    /* off 0xE00 size 0x100 */
    u32 buf3[64];

} __attribute__((packed));
_Static_assert(sizeof(StructWM) == 0xF00, "StructWM definition");

/* size 0xF4 */
struct StructCourseHolder {
    /* off 0x0 size 0x4 */
    Model *course_model;

    /* off 0x4 size 0x4 */
    Model *course_model_V;

    /* off 0x8 size 0x38 */
    Animation course_model_anim_nsbtp;

    /* off 0x40 size 0x38 */
    Animation course_model_anim_nsbta;

    /* off 0x78 size 0x38 */
    Animation course_model_V_anim_nsbta;

    /* off 0xB0 size 0x44 */
    u32 data[17];

} __attribute__((packed));
_Static_assert(sizeof(StructCourseHolder) == 0xF4, "StructCourseHolder definition");

/* size 0x14 */
struct SequenceHandle {
    /* off 0x0 size 0xC */
    SequenceLoadInfo load_info;

    /* off 0xC size 0x4 */
    void *nns_snd_handle;

    /* off 0x10 size 0x4 */
    SequenceHeapState *heap_state;

} __attribute__((packed));
_Static_assert(sizeof(SequenceHandle) == 0x14, "SequenceHandle definition");

/* size 0x6C */
struct DriverSub450 {
    /* off 0x0 size 0x4 */
    u32 unk0;

    /* off 0x4 size 0x1 */
    u8 unk4;

    /* off 0x5 size 0x3 */
    u8 unk5[3];

    /* off 0x8 size 0x4 */
    fx32 unk8;

    /* off 0xC size 0x4 */
    i32 unkC;

    /* off 0x10 size 0x4 */
    i32 unk10;

    /* off 0x14 size 0x4 */
    i32 unk14;

    /* off 0x18 size 0x4 */
    fx32 unk18;

    /* off 0x1C size 0x4 */
    fx32 unk1C_somefx_over_max_speed;

    /* off 0x20 size 0x4 */
    fx32 unk20_somefx_over_max_speed;

    /* off 0x24 size 0x4 */
    fx32 unk24_somefx_over_max_speed;

    /* off 0x28 size 0x4 */
    i32 prev_lap_progress;

    /* off 0x2C size 0x1 */
    u8 kaidan_sfx_alternate_counter;

    /* off 0x2D size 0x3 */
    u8 unk2D_pad[3];

    /* off 0x30 size 0x4 */
    i32 unk30;

    /* off 0x34 size 0x4 */
    i32 unk34;

    /* off 0x38 size 0x4 */
    i32 sfx_id;

    /* off 0x3C size 0x4 */
    int (__cdecl *compute_pitch_offset_fn)(SfxEmitterParamsEx *);

    /* off 0x40 size 0x28 */
    DriverSub450Sub40 todo_unk40;

    /* off 0x68 size 0x4 */
    i32 unk68;

} __attribute__((packed));
_Static_assert(sizeof(DriverSub450) == 0x6C, "DriverSub450 definition");

/* size 0x2E */
struct CharacterKartColors {
    /* off 0x0 size 0x2 */
    GXRgb diffuse;

    /* off 0x2 size 0x2 */
    GXRgb emission;

    /* off 0x4 size 0x2 */
    GXRgb ambient;

    /* off 0x6 size 0x2 */
    u16 diffR;

    /* off 0x8 size 0x2 */
    u16 diffG;

    /* off 0xA size 0x2 */
    u16 diffB;

    /* off 0xC size 0x2 */
    i16 diffRDelta;

    /* off 0xE size 0x2 */
    i16 diffGDelta;

    /* off 0x10 size 0x2 */
    i16 diffBDelta;

    /* off 0x12 size 0x2 */
    u16 emiR;

    /* off 0x14 size 0x2 */
    u16 emiG;

    /* off 0x16 size 0x2 */
    u16 emiB;

    /* off 0x18 size 0x2 */
    i16 emiRDelta;

    /* off 0x1A size 0x2 */
    i16 emiGDelta;

    /* off 0x1C size 0x2 */
    i16 emiBDelta;

    /* off 0x1E size 0x2 */
    u16 ambiR;

    /* off 0x20 size 0x2 */
    u16 ambiG;

    /* off 0x22 size 0x2 */
    u16 amibB;

    /* off 0x24 size 0x2 */
    i16 amibRDelta;

    /* off 0x26 size 0x2 */
    i16 ambiGDelta;

    /* off 0x28 size 0x2 */
    i16 ambiBDelta;

    /* off 0x2A size 0x2 */
    fx16 progress;

    /* off 0x2C size 0x2 */
    u16 unk2C;

} __attribute__((packed));
_Static_assert(sizeof(CharacterKartColors) == 0x2E, "CharacterKartColors definition");

/* size 0x1200 */
struct SaveDataSection_DownloadGhost {
    /* off 0x0 size 0x230 */
    GhostHeaderEx dg_header_ex;

    /* off 0x230 size 0x200 */
    u8 emblem_data[512];

    /* off 0x430 size 0xDCC */
    InputRecord input_rec;

    /* off 0x11FC size 0x4 */
    u32 unk11FC;

} __attribute__((packed));
_Static_assert(sizeof(SaveDataSection_DownloadGhost) == 0x1200, "SaveDataSection_DownloadGhost definition");

/* size 0x48 */
struct Fs_File {
    /* off 0x0 size 0x8 */
    Fs_FileList file_list;

    /* off 0x8 size 0x4 */
    Fs_Archive *arc;

    /* off 0xC size 0x4 */
    u32 flags;

    /* off 0x10 size 0x4 */
    u32 op_id;

    /* off 0x14 size 0x4 */
    u32 op_res;

    /* off 0x18 size 0x8 */
    Os_ThreadQueue op_thr_list;

    /* off 0x20 size 0x10 */
    Fs_File_Entry entry;

    /* off 0x30 size 0x18 */
    Fs_File_OperationArg arg;

} __attribute__((packed));
_Static_assert(sizeof(Fs_File) == 0x48, "Fs_File definition");

/* size 0x7C */
struct SystemContext {
    /* off 0x0 size 0x4 */
    u32 unk_maybe_wifi_val_force_disable_ja_if_2;

    /* off 0x4 size 0x4 */
    u32 system_lang;

    /* off 0x8 size 0x14 */
    SequenceHandle seq_handle;

    /* off 0x1C size 0x4 */
    u32 flags;

    /* off 0x20 size 0x4 */
    u32 ovl_state;

    /* off 0x24 size 0x4 */
    Mem_HeapHead *dtcm_mem_frame_heap;

    /* off 0x28 size 0x2 */
    u16 unk28;

    /* off 0x2A size 0x14 */
    u16 user_name[10];

    /* off 0x3E size 0x2 */
    u16 user_name_len;

    /* off 0x40 size 0x1 */
    u8 system_theme;

    /* off 0x41 size 0x3 */
    u8 unk41_pad[3];

    /* off 0x44 size 0x4 */
    u32 activated_race_menu_option;

    /* off 0x48 size 0x4 */
    u32 backlight_pm_switch_top;

    /* off 0x4C size 0x4 */
    u32 backlight_pm_switch_bottom;

    /* off 0x50 size 0x2 */
    u16 unk50_flags;

    /* off 0x52 size 0x2 */
    u16 unk52;

    /* off 0x54 size 0x4 */
    u32 unk54;

    /* off 0x58 size 0x4 */
    u32 unk58;

    /* off 0x5C size 0x4 */
    u32 unk5C;

    /* off 0x60 size 0x18 */
    MATHRandContext32 rand_ctx;

    /* off 0x78 size 0x4 */
    u32 unk78;

} __attribute__((packed));
_Static_assert(sizeof(SystemContext) == 0x7C, "SystemContext definition");

/* size 0x38 */
struct Mem_HeapHead {
    /* off 0x0 size 0x4 */
    u32 magic;

    /* off 0x4 size 0x4 */
    Mem_HeapHead *some_head;

    /* off 0x8 size 0x4 */
    void *some_tail;

    /* off 0xC size 0xC */
    NNSFndList child_heap_head_list;

    /* off 0x18 size 0x8 */
    Mem_MemoryRegion heap_region;

    /* off 0x20 size 0x4 */
    u32 option;

    /* off 0x24 size 0x14 */
    Mem_CommonHeapHead common;

} __attribute__((packed));
_Static_assert(sizeof(Mem_HeapHead) == 0x38, "Mem_HeapHead definition");

/* size 0xDC */
struct DisplayConfig {
    /* off 0x0 size 0x28 */
    DisplayBaseConfig base_cfg;

    /* off 0x28 size 0x44 */
    DisplayEngineConfig top_engine_cfg;

    /* off 0x6C size 0x4 */
    Display3DConfig *cfg_3d;

    /* off 0x70 size 0x44 */
    DisplayEngineConfig bottom_engine_cfg;

    /* off 0xB4 size 0x4 */
    u32 unkB4;

    /* off 0xB8 size 0x4 */
    void (*vblank_fn)(void);

    /* off 0xBC size 0x4 */
    u32 frame_start_time_lo;

    /* off 0xC0 size 0x4 */
    u32 frame_start_time_hi;

    /* off 0xC4 size 0x4 */
    u32 vblank_time_lo;

    /* off 0xC8 size 0x4 */
    u32 vblank_time_hi;

    /* off 0xCC size 0x4 */
    u32 render_duration;

    /* off 0xD0 size 0x4 */
    u32 last_total_duration;

    /* off 0xD4 size 0x4 */
    u32 last_render_duration;

    /* off 0xD8 size 0x1 */
    u8 flags;

    /* off 0xD9 size 0x3 */
    u8 unkD9_pad[3];

} __attribute__((packed));
_Static_assert(sizeof(DisplayConfig) == 0xDC, "DisplayConfig definition");

/* size 0x1C */
union File_OperationContext {
    /* off 0x0 size 0x1C */
    File_OperationContext_Op01 rw;

    /* off 0x1 size 0x1C */
    File_OperationContext_Op2 seek_dir;

    /* off 0x2 size 0x1C */
    File_OperationContext_Op3 read_dir;

    /* off 0x3 size 0x1C */
    File_OperationContext_Op5 get_path;

    /* off 0x4 size 0x1C */
    File_OperationContext_Op6 open_by_fat;

    /* off 0x5 size 0x1C */
    File_OperationContext_Op7 open_raw;

} __attribute__((packed));
/* size 0xE00 */
struct SaveDataSection_PersonalGhost {
    /* off 0x0 size 0x230 */
    GhostHeaderEx pg_header_ex;

    /* off 0x230 size 0xBD0 */
    u32 unk230[756];

} __attribute__((packed));
_Static_assert(sizeof(SaveDataSection_PersonalGhost) == 0xE00, "SaveDataSection_PersonalGhost definition");

/* size 0x400 */
struct SaveDataSection_GrandPrix {
    /* off 0x0 size 0x4 */
    u32 magic_NKGP;

    /* off 0x4 size 0x380 */
    SaveDataGrandPrixCcEntry entries[4];

    /* off 0x384 size 0x7C */
    u32 unk384[31];

} __attribute__((packed));
_Static_assert(sizeof(SaveDataSection_GrandPrix) == 0x400, "SaveDataSection_GrandPrix definition");

/* size 0x100 */
struct SaveDataSection_MissionRun {
    /* off 0x0 size 0x4 */
    u32 magic_NKMR;

    /* off 0x4 size 0x3F */
    SaveDataMissionRunLevelEntry levels[7];

    /* off 0x43 size 0xBD */
    u8 nkmrs[189];

} __attribute__((packed));
_Static_assert(sizeof(SaveDataSection_MissionRun) == 0x100, "SaveDataSection_MissionRun definition");

/* size 0xB0 */
struct OverlayManager {
    /* off 0x0 size 0x4 */
    u32 cur_ovl_kind;

    /* off 0x4 size 0x4 */
    u32 status;

    /* off 0x8 size 0x24 */
    OverlayEntry ovls[3];

    /* off 0x2C size 0x2C */
    Fs_OverlayInfo ovl_info;

    /* off 0x58 size 0x48 */
    Fs_File ovl_file;

    /* off 0xA0 size 0x4 */
    Mem_HeapHead *ovl_frm_heap;

    /* off 0xA4 size 0x4 */
    Mem_HeapHead *ovl_exp_heap;

    /* off 0xA8 size 0x4 */
    u32 ovl_region_start;

    /* off 0xAC size 0x4 */
    u32 ovl_region_end;

} __attribute__((packed));
_Static_assert(sizeof(OverlayManager) == 0xB0, "OverlayManager definition");

/* size 0x524 */
struct RaceStatus {
    /* off 0x0 size 0x4 */
    u32 time_frame_counter;

    /* off 0x4 size 0x4 */
    u32 time_running;

    /* off 0x8 size 0x4 */
    RaceTime lap_timer;

    /* off 0xC size 0x2 */
    u16 ranktime_gp_val;

    /* off 0xE size 0x2 */
    u16 finished_driver_count;

    /* off 0x10 size 0x2 */
    u16 unk10_some_driver_idx;

    /* off 0x12 size 0x2 */
    u16 unk12_pad;

    /* off 0x14 size 0x460 */
    DriverStatus drivers[8];

    /* off 0x474 size 0x8 */
    u8 place_driver_ids[8];

    /* off 0x47C size 0x18 */
    MATHRandContext32 safe_rng;

    /* off 0x494 size 0x4 */
    u32 rng_seed;

    /* off 0x498 size 0x18 */
    MATHRandContext32 random_rng;

    /* off 0x4B0 size 0x18 */
    MATHRandContext32 stable_rng;

    /* off 0x4C8 size 0x4 */
    RanktimeGp *ranktimeGP_rtt_ptr;

    /* off 0x4CC size 0x4 */
    u32 race_ended;

    /* off 0x4D0 size 0x4 */
    u32 intro_in_fadeout;

    /* off 0x4D4 size 0x4 */
    u32 *cpoi_key_point_progress;

    /* off 0x4D8 size 0x4 */
    u32 unk4D8;

    /* off 0x4DC size 0x4 */
    void *rankpoint_rpt_ptr;

    /* off 0x4E0 size 0x4 */
    u32 mission_result;

    /* off 0x4E4 size 0x4 */
    u32 one_over_cpat_segment_count;

    /* off 0x4E8 size 0x4 */
    u32 one_over_lap_count;

    /* off 0x4EC size 0x4 */
    u32 use_time_limit;

    /* off 0x4F0 size 0x4 */
    u32 unk_uncontrollable;

    /* off 0x4F4 size 0x4 */
    u32 time_limit;

    /* off 0x4F8 size 0x1 */
    u8 unk4F8;

    /* off 0x4F9 size 0x1 */
    u8 unk4F9_pad;

    /* off 0x4FA size 0x2 */
    u16 mission_win_delay_counter;

    /* off 0x4FC size 0x2 */
    u16 mission_lose_delay_counter;

    /* off 0x4FE size 0x2 */
    u16 unk4FE_pad;

    /* off 0x500 size 0x24 */
    SkillRankpoints rankpoints;

} __attribute__((packed));
_Static_assert(sizeof(RaceStatus) == 0x524, "RaceStatus definition");

/* size 0x60 */
struct StructRT {
    /* off 0x0 size 0xC */
    NNSFndList maybe_loaded_exp_instance_list;

    /* off 0xC size 0x3C */
    NNSFndList exp_instance_ptr_lists[5];

    /* off 0x48 size 0x14 */
    StructExplosionInstance **exp_kind_instance_list[5];

    /* off 0x5C size 0x2 */
    u16 some_count_up_to_13;

    /* off 0x5E size 0x2 */
    u16 unk2;

} __attribute__((packed));
_Static_assert(sizeof(StructRT) == 0x60, "StructRT definition");

/* size 0x80C */
struct StructN {
    /* off 0x0 size 0x404 */
    OamBuffer top_oam_buf;

    /* off 0x404 size 0x404 */
    OamBuffer bottom_oam_buf;

    /* off 0x808 size 0x4 */
    u32 race_mode;

} __attribute__((packed));
_Static_assert(sizeof(StructN) == 0x80C, "StructN definition");

/* size 0x8BC */
struct TitleContext {
    /* off 0x0 size 0x4 */
    u32 frame_counter;

    /* off 0x4 size 0x4 */
    u32 is_changing_state;

    /* off 0x8 size 0x4 */
    u32 prev_state;

    /* off 0xC size 0x4 */
    u32 cur_state;

    /* off 0x10 size 0x4 */
    u32 next_state;

    /* off 0x14 size 0x38 */
    u32 some_fn_list[14];

    /* off 0x4C size 0x4 */
    u32 u0;

    /* off 0x50 size 0x4 */
    u32 title_menu_skip_intro;

    /* off 0x54 size 0x4 */
    u32 u2;

    /* off 0x58 size 0x4 */
    u32 u3;

    /* off 0x5C size 0x4 */
    u32 u4;

    /* off 0x60 size 0x2 */
    u16 u51;

    /* off 0x62 size 0x2 */
    u16 u52;

    /* off 0x64 size 0x4 */
    u32 some_evab_coef;

    /* off 0x68 size 0x4 */
    void *some_ptr;

    /* off 0x6C size 0x4 */
    void *title_s_bncl_ptr;

    /* off 0x70 size 0x4 */
    void *title_s_bnbl_ptr;

    /* off 0x74 size 0x4 */
    void *title_s_bnll_ptr;

    /* off 0x78 size 0x4 */
    PaletteBlock *title_m_b_nclr;

    /* off 0x7C size 0x4 */
    CharGraphicsBlock *title_m_b_ncgr;

    /* off 0x80 size 0x4 */
    PaletteBlock *title_s_b_nclr;

    /* off 0x84 size 0x4 */
    CharGraphicsBlock *title_s_b_ncgr;

    /* off 0x88 size 0x4 */
    void *title_m1_eu_nscr;

    /* off 0x8C size 0x4 */
    void *title_m2_nscr;

    /* off 0x90 size 0x4 */
    void *title_s_bg_nscr;

    /* off 0x94 size 0x4 */
    u32 unk94_pad;

    /* off 0x98 size 0x4 */
    u32 unk98_pad;

    /* off 0x9C size 0x4 */
    u32 unk9C_pad;

    /* off 0xA0 size 0x4 */
    PaletteBlock *title_s_o_nclr;

    /* off 0xA4 size 0x4 */
    CharGraphicsBlock *title_s_nce_ncgr;

    /* off 0xA8 size 0x4 */
    CellBank *title_s_nce_ncer;

    /* off 0xAC size 0x4 */
    u32 hs14;

    /* off 0xB0 size 0x404 */
    OamBuffer top_oam_buf;

    /* off 0x4B4 size 0x404 */
    OamBuffer bottom_oam_buf;

    /* off 0x8B8 size 0x4 */
    StructKTB *kart_appear_table_ptr;

} __attribute__((packed));
_Static_assert(sizeof(TitleContext) == 0x8BC, "TitleContext definition");

/* size 0x144 */
struct StructAD00 {
    /* off 0x0 size 0x4 */
    CharacterKartContext *driver_character_karts;

    /* off 0x4 size 0x4 */
    KartCrsmat *kart_kartcrsmat_bin_ptr;

    /* off 0x8 size 0x2 */
    u16 racer_count;

    /* off 0xA size 0x2 */
    u16 a32;

    /* off 0xC size 0x4 */
    u32 a4;

    /* off 0x10 size 0x4 */
    void *kart_a_plt_data_offset;

    /* off 0x14 size 0x4 */
    void *heyho_color_plt_data_offset;

    /* off 0x18 size 0x10 */
    u16 heyho_palette_rows[8];

    /* off 0x28 size 0x4 */
    void *player_face_anim_nsbtp_ptr;

    /* off 0x2C size 0x6C */
    Model killer_item_mdl;

    /* off 0x98 size 0x74 */
    StructAD00Sh some_ad00sh;

    /* off 0x10C size 0x38 */
    Animation killer_item_anim;

} __attribute__((packed));
_Static_assert(sizeof(StructAD00) == 0x144, "StructAD00 definition");

/* size 0xB4 */
struct CharacterKartContext {
    /* off 0x0 size 0x4 */
    u32 char_idx;

    /* off 0x4 size 0x4 */
    u32 kart_idx;

    /* off 0x8 size 0x4 */
    Animation *character_nsbca_anim;

    /* off 0xC size 0x4 */
    Animation *character_nsbtp_anim;

    /* off 0x10 size 0x4 */
    Model *character_model;

    /* off 0x14 size 0x4 */
    Model *kart_model;

    /* off 0x18 size 0x4 */
    Model *kart_tire_model;

    /* off 0x1C size 0x4 */
    Model *kart_shadow_model;

    /* off 0x20 size 0x4 */
    KartOffsetDataEntry *kart_off_data;

    /* off 0x24 size 0x1C */
    CharacterKartContextSub24 unk24_anim_rel;

    /* off 0x40 size 0x14 */
    LightInfo light;

    /* off 0x54 size 0x4 */
    CharacterKartContextSub54 *unk54;

    /* off 0x58 size 0x4 */
    u32 is_kart_invisible;

    /* off 0x5C size 0x4 */
    u32 is_character_invisible;

    /* off 0x60 size 0x4 */
    u32 use_separate_tires;

    /* off 0x64 size 0x4 */
    u32 in_star_toon_mode;

    /* off 0x68 size 0x2 */
    u16 kart_idx_mod_3;

    /* off 0x6A size 0x2E */
    CharacterKartColors colors;

    /* off 0x98 size 0x14 */
    Animator unk98_maybe_kill_rel_anim;

    /* off 0xAC size 0x4 */
    u32 nsbtp_anim_disabled;

    /* off 0xB0 size 0x4 */
    u32 unkB0_do_patch_rob_palette;

} __attribute__((packed));
_Static_assert(sizeof(CharacterKartContext) == 0xB4, "CharacterKartContext definition");

/* size 0x960 */
struct StructB43C {
    /* off 0x0 size 0x4 */
    u32 unk0_some_counter;

    /* off 0x4 size 0x4 */
    u32 p2;

    /* off 0x8 size 0x4 */
    u32 p3;

    /* off 0xC size 0x4 */
    u32 fn_list_idx;

    /* off 0x10 size 0x4 */
    u32 p5;

    /* off 0x14 size 0xF0 */
    u32 fn_ptr_list[60];

    /* off 0x104 size 0x4 */
    u32 p6;

    /* off 0x108 size 0x404 */
    OamBuffer top_oam_buf;

    /* off 0x50C size 0x404 */
    OamBuffer bottom_oam_buf;

    /* off 0x910 size 0x4 */
    PaletteBlock *common_single_play_select_mode_m_o_NCLR;

    /* off 0x914 size 0x4 */
    CharGraphicsBlock *single_play_select_mode_m_nce_ncgr;

    /* off 0x918 size 0x4 */
    void *single_play_select_mode_m_nce_ncer;

    /* off 0x91C size 0x4 */
    u32 uwunk;

    /* off 0x920 size 0x4 */
    PaletteBlock *single_play_select_mode_s_o_NCLR;

    /* off 0x924 size 0x4 */
    CharGraphicsBlock *single_play_select_mode_s_nce_ncgr;

    /* off 0x928 size 0x4 */
    void *single_play_select_mode_s_nce_ncer;

    /* off 0x92C size 0x4 */
    u32 p7;

    /* off 0x930 size 0x4 */
    u32 p8;

    /* off 0x934 size 0x4 */
    u32 p9;

    /* off 0x938 size 0x4 */
    u32 p10;

    /* off 0x93C size 0x4 */
    u32 p11;

    /* off 0x940 size 0x4 */
    void *single_play_select_mode_m_bncl;

    /* off 0x944 size 0x4 */
    u32 p12;

    /* off 0x948 size 0x4 */
    u32 p13;

    /* off 0x94C size 0x4 */
    void *single_play_select_mode_s_bncl;

    /* off 0x950 size 0x4 */
    void *single_play_select_mode_s_bnbl;

    /* off 0x954 size 0x4 */
    StructKTB *kart_appear_table_ptr;

    /* off 0x958 size 0x4 */
    u32 maybe_flag1_oam_rel;

    /* off 0x95C size 0x4 */
    u32 maybe_flag2_oam_rel;

} __attribute__((packed));
_Static_assert(sizeof(StructB43C) == 0x960, "StructB43C definition");

/* size 0x914 */
struct StructB350 {
    /* off 0x0 size 0x4 */
    StructT5 *t5;

    /* off 0x4 size 0x404 */
    OamBuffer oam_buf_1;

    /* off 0x408 size 0x404 */
    OamBuffer oam_buf_2;

    /* off 0x80C size 0x4 */
    PaletteBlock *race_m_b_plt;

    /* off 0x810 size 0x4 */
    u32 h4;

    /* off 0x814 size 0x4 */
    CharGraphicsBlock *race_m_b_ncgr;

    /* off 0x818 size 0x4 */
    u32 h5;

    /* off 0x81C size 0x4 */
    void *race_m_pause_nscr;

    /* off 0x820 size 0x4 */
    void *race_m_goal_nscr;

    /* off 0x824 size 0x30 */
    u32 hhh1[12];

    /* off 0x854 size 0x4 */
    u32 unk_maybe_time_s;

    /* off 0x858 size 0x64 */
    u32 hhh2[25];

    /* off 0x8BC size 0x20 */
    u32 some_racer_flags[8];

    /* off 0x8DC size 0x2C */
    u32 hhh[11];

    /* off 0x908 size 0x4 */
    u32 some_flag_x;

    /* off 0x90C size 0x4 */
    u32 hh2;

    /* off 0x910 size 0x4 */
    u32 cur_mission_beaten;

} __attribute__((packed));
_Static_assert(sizeof(StructB350) == 0x914, "StructB350 definition");

/* size 0x1600 */
struct SaveDataSection_TimeTrial {
    /* off 0x0 size 0x4 */
    u32 magic_NKTA;

    /* off 0x4 size 0x1180 */
    SaveDataTimeTrialRecordListEntry records[5];

    /* off 0x1184 size 0x380 */
    SaveDataTimeTrialRecordListEntry record_best_lap;

    /* off 0x1504 size 0xFC */
    u32 unk1504[63];

} __attribute__((packed));
_Static_assert(sizeof(SaveDataSection_TimeTrial) == 0x1600, "SaveDataSection_TimeTrial definition");

/* size 0x90 */
struct Sound_Sdat {
    /* off 0x0 size 0x30 */
    Sound_SdatHeader header;

    /* off 0x30 size 0x4 */
    u32 owns_file;

    /* off 0x34 size 0x48 */
    Fs_File file;

    /* off 0x7C size 0x8 */
    Fs_FileId file_id;

    /* off 0x84 size 0x4 */
    Sound_FatBlockHeader *fat_block_sptr;

    /* off 0x88 size 0x4 */
    void *symb_block_sptr;

    /* off 0x8C size 0x4 */
    Sound_InfoBlockHeader *info_block_sptr;

} __attribute__((packed));
_Static_assert(sizeof(Sound_Sdat) == 0x90, "Sound_Sdat definition");

/* size 0xA84 */
struct MountManager {
    /* off 0x0 size 0x70 */
    MountArchiveEntry mnt_MAR_MainRace;

    /* off 0x70 size 0x70 */
    MountArchiveEntry mnt_MA2_Main2D;

    /* off 0xE0 size 0x70 */
    MountArchiveEntry mnt_M2L_Main2D_loc;

    /* off 0x150 size 0x70 */
    MountArchiveEntry mnt_CRS_course;

    /* off 0x1C0 size 0x70 */
    MountArchiveEntry mnt_UNK_Sound;

    /* off 0x230 size 0x70 */
    MountArchiveEntry mnt_UNK_Scene;

    /* off 0x2A0 size 0x70 */
    MountArchiveEntry mnt_KM1_KartModelMainA;

    /* off 0x310 size 0x70 */
    MountArchiveEntry mnt_KM2_KartModelMainB;

    /* off 0x380 size 0x70 */
    MountArchiveEntry mnt_KSB_KartModelSub;

    /* off 0x3F0 size 0x70 */
    MountArchiveEntry mnt_UNK_LOC;

    /* off 0x460 size 0x70 */
    MountArchiveEntry mnt_UNK_KartModelMenu;

    /* off 0x4D0 size 0x70 */
    MountArchiveEntry mnt_R2D_RaceScene;

    /* off 0x540 size 0x70 */
    MountArchiveEntry mnt_R2L_RaceScene_loc;

    /* off 0x5B0 size 0x70 */
    MountArchiveEntry mnt_CST_courseTex;

    /* off 0x620 size 0x70 */
    MountArchiveEntry mnt_CKS_CharacterKartSelect;

    /* off 0x690 size 0x70 */
    MountArchiveEntry mnt_CKL_CharacterKartSelect_loc;

    /* off 0x700 size 0x70 */
    MountArchiveEntry mnt_GE2_GeneralMenu;

    /* off 0x770 size 0x70 */
    MountArchiveEntry mnt_G2L_GeneralMenu_loc;

    /* off 0x7E0 size 0x70 */
    MountArchiveEntry mnt_UNK_MainEffect;

    /* off 0x850 size 0x70 */
    MountArchiveEntry mnt_S2D_Static2D;

    /* off 0x8C0 size 0x4 */
    u32 rom_fat_fnt_size;

    /* off 0x8C4 size 0x4 */
    void *rom_fat_fnt_alloc_buf;

    /* off 0x8C8 size 0xA0 */
    MountArchiveLoader loader;

    /* off 0x968 size 0x48 */
    Fs_File some_file;

    /* off 0x9B0 size 0xC0 */
    MountData mount_datas[16];

    /* off 0xA70 size 0x4 */
    u32 cur_course_id;

    /* off 0xA74 size 0x4 */
    u32 cur_race_mode;

    /* off 0xA78 size 0x4 */
    Mem_HeapHead *heap1;

    /* off 0xA7C size 0x4 */
    Mem_HeapHead *heap2;

    /* off 0xA80 size 0x4 */
    Mem_HeapHead *heap3;

} __attribute__((packed));
_Static_assert(sizeof(MountManager) == 0xA84, "MountManager definition");

/* size 0x5A8 */
struct DriverContext {
    /* off 0x0 size 0x44 */
    SfxEmitter sfx;

    /* off 0x44 size 0x4 */
    u32 flags_a;

    /* off 0x48 size 0x4 */
    u32 flags_b;

    /* off 0x4C size 0x4 */
    u32 flags_c;

    /* off 0x50 size 0xC */
    VecFx32 direction;

    /* off 0x5C size 0xC */
    VecFx32 drive_direction;

    /* off 0x68 size 0xC */
    VecFx32 speed;

    /* off 0x74 size 0x2 */
    u16 driver_id;

    /* off 0x76 size 0x2 */
    u16 input_unit_id;

    /* off 0x78 size 0x4 */
    u32 unk78_another_input_unit_id;

    /* off 0x7C size 0x4 */
    u32 flags_d;

    /* off 0x80 size 0xC */
    VecFx32 position;

    /* off 0x8C size 0xC */
    VecFx32 last_position;

    /* off 0x98 size 0xC */
    VecFx32 kart_tires_position;

    /* off 0xA4 size 0xC */
    VecFx32 delta_position;

    /* off 0xB0 size 0xC */
    VecFx32 delta_position_normalized;

    /* off 0xBC size 0xC */
    VecFx32 scale;

    /* off 0xC8 size 0x4 */
    fx32 unkC8;

    /* off 0xCC size 0x4 */
    fx32 target_max_speed;

    /* off 0xD0 size 0x4 */
    fx32 max_speed;

    /* off 0xD4 size 0x4 */
    u32 unkD4;

    /* off 0xD8 size 0x4 */
    fx32 slipstream_speed_multiplier;

    /* off 0xDC size 0x4 */
    fx32 speed_multiplier;

    /* off 0xE0 size 0x10 */
    Quaternion rotation;

    /* off 0xF0 size 0x10 */
    Quaternion unkF0;

    /* off 0x100 size 0x10 */
    Quaternion unk100;

    /* off 0x110 size 0x10 */
    Quaternion unk110_like_rotation;

    /* off 0x120 size 0x30 */
    Matrix4x3 main_mtx;

    /* off 0x150 size 0x30 */
    Matrix4x3 unk150_like_main_mtx;

    /* off 0x180 size 0x4 */
    u32 collision_reaction;

    /* off 0x184 size 0x30 */
    Matrix4x3 unk184;

    /* off 0x1B4 size 0x4 */
    Matrix4x3 *char_kart_mtx;

    /* off 0x1B8 size 0xC */
    VecFx32 collision_pos;

    /* off 0x1C4 size 0xC */
    VecFx32 prev_collision_pos;

    /* off 0x1D0 size 0x4 */
    fx32 kart_collision_sphere_size;

    /* off 0x1D4 size 0x4 */
    fx32 kart_collision_z_offset;

    /* off 0x1D8 size 0xC */
    VecFx32 net_collision_pos;

    /* off 0x1E4 size 0xC */
    VecFx32 last_net_collision_pos;

    /* off 0x1F0 size 0xC */
    VecFx32 collision_pos_2;

    /* off 0x1FC size 0xC */
    VecFx32 unk1FC;

    /* off 0x208 size 0x4 */
    DriverContextSub208 *unk208;

    /* off 0x20C size 0x24 */
    void *fn_ptr_arr[9];

    /* off 0x230 size 0x4 */
    void *unk230_fn_ptr;

    /* off 0x234 size 0x2 */
    u16 x_rot;

    /* off 0x236 size 0x2 */
    u16 y_rot;

    /* off 0x238 size 0x2 */
    u16 boost_timer;

    /* off 0x23A size 0x2 */
    u16 unk23A;

    /* off 0x23C size 0x2 */
    u16 drift_boost_counter;

    /* off 0x23E size 0x2 */
    u16 unk23E;

    /* off 0x240 size 0x4 */
    u32 speed_minus_dir_multiplier;

    /* off 0x244 size 0xC */
    VecFx32 up_direction;

    /* off 0x250 size 0xC */
    VecFx32 unk250;

    /* off 0x25C size 0xC */
    VecFx32 speed_y;

    /* off 0x268 size 0xC */
    VecFx32 falls_water_forward;

    /* off 0x274 size 0x4 */
    fx32 falls_water_strength;

    /* off 0x278 size 0xC */
    VecFx32 forward_direction;

    /* off 0x284 size 0xC */
    VecFx32 jump_drift_up;

    /* off 0x290 size 0xC */
    VecFx32 jump_drift_forward;

    /* off 0x29C size 0x4 */
    u32 collision_mode;

    /* off 0x2A0 size 0x4 */
    fx32 max_speed_fraction;

    /* off 0x2A4 size 0x4 */
    fx32 delta_pos_magnitude;

    /* off 0x2A8 size 0x4 */
    fx32 speed_val;

    /* off 0x2AC size 0x4 */
    fx32 unk2AC;

    /* off 0x2B0 size 0x2 */
    u16 driver_hit_check_mask;

    /* off 0x2B2 size 0x2 */
    u16 driver_hit_mask;

    /* off 0x2B4 size 0x2 */
    u16 last_driver_hit_mask;

    /* off 0x2B6 size 0x2 */
    u16 unk2B6;

    /* off 0x2B8 size 0x4 */
    u32 unk2B8;

    /* off 0x2BC size 0x4 */
    u32 unk2BC;

    /* off 0x2C0 size 0x2 */
    u16 unk2C0;

    /* off 0x2C2 size 0x2 */
    u16 unk2C2;

    /* off 0x2C4 size 0x4 */
    fx32 left_right_dir;

    /* off 0x2C8 size 0x2 */
    u16 collision_entry_id_1;

    /* off 0x2CA size 0x2 */
    u16 collision_entry_id_2;

    /* off 0x2CC size 0x4 */
    KartPhysicalParam *kart_phys_param;

    /* off 0x2D0 size 0x4 */
    CharacterPhysicalParam *char_phys_param;

    /* off 0x2D4 size 0x4 */
    u32 turn_amount;

    /* off 0x2D8 size 0xC */
    VecFx32 unk2D8;

    /* off 0x2E4 size 0xC */
    VecFx32 unk2E4;

    /* off 0x2F0 size 0xC */
    VecFx32 unk2F0;

    /* off 0x2FC size 0x4 */
    i32 drift_left_right_count;

    /* off 0x300 size 0x2 */
    u16 drift_left_count;

    /* off 0x302 size 0x2 */
    u16 drift_right_count;

    /* off 0x304 size 0x4 */
    u16 *drift_dir_1_count_ref;

    /* off 0x308 size 0x4 */
    u16 *drift_dir_2_count_ref;

    /* off 0x30C size 0x4 */
    i32 drift_left_right_timeout;

    /* off 0x310 size 0x4 */
    EnemyState *enemy_state;

    /* off 0x314 size 0x2 */
    u16 unk314;

    /* off 0x316 size 0x2 */
    u16 unk316;

    /* off 0x318 size 0x4 */
    u32 unk318;

    /* off 0x31C size 0xC */
    VecFx32 unk31C;

    /* off 0x328 size 0xC */
    VecFx32 unk328;

    /* off 0x334 size 0x4 */
    u32 unk334;

    /* off 0x338 size 0x2 */
    u16 unk338;

    /* off 0x33A size 0x2 */
    u16 unk33A;

    /* off 0x33C size 0x4 */
    u32 unk33C;

    /* off 0x340 size 0x4 */
    fx32 unk340;

    /* off 0x344 size 0x4 */
    u32 unk344;

    /* off 0x348 size 0x4 */
    u32 unk348;

    /* off 0x34C size 0x10 */
    Quaternion unk34C;

    /* off 0x35C size 0x2 */
    i16 collision_reaction_counter;

    /* off 0x35E size 0x2 */
    u16 unk35E;

    /* off 0x360 size 0x4 */
    fx32 unk360;

    /* off 0x364 size 0x2 */
    u16 spin_out_angle;

    /* off 0x366 size 0x2 */
    u16 spin_out_spin_count;

    /* off 0x368 size 0x4 */
    fx32 spin_out_progress;

    /* off 0x36C size 0x4 */
    u32 spin_out_speed;

    /* off 0x370 size 0x2 */
    u16 unk370;

    /* off 0x372 size 0x2 */
    u16 unk372;

    /* off 0x374 size 0xC */
    VecFx32 unk374;

    /* off 0x380 size 0x4 */
    u32 unk380;

    /* off 0x384 size 0x2 */
    u16 ghost_flicker_phase;

    /* off 0x386 size 0x2 */
    i16 wall_rot_y_speed;

    /* off 0x388 size 0x2 */
    i16 drift_rot_y;

    /* off 0x38A size 0x2 */
    fx16 extra_drift;

    /* off 0x38C size 0x4 */
    fx32 unk38C;

    /* off 0x390 size 0x4 */
    u8 unk390[4];

    /* off 0x394 size 0x4 */
    u32 unk394;

    /* off 0x398 size 0x4 */
    fx32 unk398;

    /* off 0x39C size 0x4 */
    fx32 unk39C;

    /* off 0x3A0 size 0x4 */
    fx32 unk3A0;

    /* off 0x3A4 size 0x2 */
    u16 tire_rot_x;

    /* off 0x3A6 size 0x2 */
    u16 unk3A6;

    /* off 0x3A8 size 0x4 */
    i32 unk3A8;

    /* off 0x3AC size 0x2 */
    u16 respawn_count;

    /* off 0x3AE size 0x2 */
    u16 unk3AE;

    /* off 0x3B0 size 0xC */
    VecFx32 unk3B0;

    /* off 0x3BC size 0x2 */
    u16 unk3BC;

    /* off 0x3BE size 0x2 */
    i16 unk3BE;

    /* off 0x3C0 size 0x2 */
    i16 pre_respawn_count;

    /* off 0x3C2 size 0x2 */
    u16 unk3C2;

    /* off 0x3C4 size 0x4 */
    u32 respawn_id;

    /* off 0x3C8 size 0x2 */
    i16 kill_timer;

    /* off 0x3CA size 0x2 */
    u16 unk3CA_pad;

    /* off 0x3CC size 0x4 */
    u32 voice_id;

    /* off 0x3D0 size 0x2 */
    i16 kartABC;

    /* off 0x3D2 size 0x2 */
    i16 unk3D2;

    /* off 0x3D4 size 0x2 */
    i16 unk3D4;

    /* off 0x3D6 size 0x2 */
    u16 unk3D6;

    /* off 0x3D8 size 0x4 */
    i32 place;

    /* off 0x3DC size 0x4 */
    u32 collision_type;

    /* off 0x3E0 size 0x4 */
    u32 floor_collision_type;

    /* off 0x3E4 size 0x4 */
    u32 floor_collision_variant;

    /* off 0x3E8 size 0x2 */
    i16 unk3E8_y_angle_incr;

    /* off 0x3EA size 0x2 */
    u16 unk3EA_pad;

    /* off 0x3EC size 0x4 */
    u32 y_rot_speed_target;

    /* off 0x3F0 size 0x4 */
    u32 y_rot_speed;

    /* off 0x3F4 size 0x4 */
    fx32 unk3F4;

    /* off 0x3F8 size 0x4 */
    fx32 unk3F8;

    /* off 0x3FC size 0x2 */
    u16 unk3FC;

    /* off 0x3FE size 0x2 */
    u16 unk3FE_some_counter;

    /* off 0x400 size 0x2 */
    u16 unk400_max_val_for_unk3FE;

    /* off 0x402 size 0x2 */
    u16 unk402;

    /* off 0x404 size 0x4 */
    fx32 unk404;

    /* off 0x408 size 0x4 */
    u32 unk408;

    /* off 0x40C size 0x4 */
    u32 respawn_start_frame;

    /* off 0x410 size 0x4 */
    u32 respawn_a_press_frame;

    /* off 0x414 size 0x4 */
    fx32 unk414;

    /* off 0x418 size 0x4 */
    fx32 unk418;

    /* off 0x41C size 0xC */
    VecFx32 grow_back_scale;

    /* off 0x428 size 0xC */
    VecFx32 thunder_scale;

    /* off 0x434 size 0x4 */
    fx32 dossun_y_scale;

    /* off 0x438 size 0x8 */
    void *map_obj_hit_list[2];

    /* off 0x440 size 0x4 */
    u16 map_obj_hit_sfx_timeout[2];

    /* off 0x444 size 0x8 */
    u32 map_obj_hit_emitted_sfx[2];

    /* off 0x44C size 0x4 */
    void *smash_dossun_map_obj;

    /* off 0x450 size 0x6C */
    DriverSub450 unk450;

    /* off 0x4BC size 0x4 */
    fx32 unk4BC;

    /* off 0x4C0 size 0x4 */
    u32 collision_flags_map_2d_shadow;

    /* off 0x4C4 size 0x4 */
    u32 jump_pad_speed;

    /* off 0x4C8 size 0x4 */
    fx32 unk4C8;

    /* off 0x4CC size 0x4 */
    u32 unk4CC;

    /* off 0x4D0 size 0x4 */
    u32 unk4D0_some_counter;

    /* off 0x4D4 size 0x4 */
    fx32 pre_start_engine_power;

    /* off 0x4D8 size 0x2 */
    i16 falls_water_dest_id;

    /* off 0x4DA size 0x2 */
    i16 wall_touch_timeout;

    /* off 0x4DC size 0x2 */
    i16 floor_touch_timeout;

    /* off 0x4DE size 0x2 */
    i16 unk4DE;

    /* off 0x4E0 size 0x2 */
    i16 unk4E0;

    /* off 0x4E2 size 0x2 */
    u16 unk4E2;

    /* off 0x4E4 size 0x2 */
    u16 unk4E4;

    /* off 0x4E6 size 0x2 */
    u16 unk4E6;

    /* off 0x4E8 size 0x4 */
    fx32 unk4E8;

    /* off 0x4EC size 0x4 */
    fx32 unk4EC;

    /* off 0x4F0 size 0xC */
    VecFx32 unk4F0_maybe_pre_start_engine_scale;

    /* off 0x4FC size 0x2 */
    u16 unk4FC;

    /* off 0x4FE size 0x2 */
    u16 unk4FE;

    /* off 0x500 size 0x4 */
    fx32 water_depth;

    /* off 0x504 size 0x2 */
    u16 unk504;

    /* off 0x506 size 0x2 */
    u16 unk506_like_unk504;

    /* off 0x508 size 0x4 */
    VecFx32 *unk508_some_position_ref_sfx_rel;

    /* off 0x50C size 0x4 */
    Quaternion *unk50C_unk110_ref;

    /* off 0x510 size 0x4 */
    VecFx32 *unk510_position_ref;

    /* off 0x514 size 0x4 */
    DriverNetworkState *net_state;

    /* off 0x518 size 0x1C */
    SfxEmitterParamsEx unk518;

    /* off 0x534 size 0x4 */
    VecFx32 *unk534_like_unk508;

    /* off 0x538 size 0x58 */
    DriverTimerState timers;

    /* off 0x590 size 0x4 */
    CharacterKartContext *char_kart;

    /* off 0x594 size 0x4 */
    fx32 unk594;

    /* off 0x598 size 0x2 */
    i16 unk598;

    /* off 0x59A size 0x2 */
    u16 unk59A_pad;

    /* off 0x59C size 0x4 */
    u32 unk59C;

    /* off 0x5A0 size 0x2 */
    u16 unk5A0;

    /* off 0x5A2 size 0x2 */
    u8 unk5A2_pad[2];

    /* off 0x5A4 size 0x4 */
    fx32 unk5A4;

} __attribute__((packed));
_Static_assert(sizeof(DriverContext) == 0x5A8, "DriverContext definition");

/* size 0x400 */
struct StructDC {
    /* off 0x0 size 0x200 */
    StructDCSub subs[2];

    /* off 0x200 size 0x100 */
    u8 unk_hash_x200[256];

    /* off 0x300 size 0x100 */
    u8 unk_x300[256];

} __attribute__((packed));
_Static_assert(sizeof(StructDC) == 0x400, "StructDC definition");

/* size 0xB8 */
struct StructCESub {
    /* off 0x0 size 0xB4 */
    CharacterKartContext ad00sub;

    /* off 0xB4 size 0x4 */
    NNSG3dResTex_Tex0Block *some_tex0;

} __attribute__((packed));
_Static_assert(sizeof(StructCESub) == 0xB8, "StructCESub definition");

/* size 0x2D40 */
struct DriverList {
    /* off 0x0 size 0x2D40 */
    DriverContext drivers[8];

} __attribute__((packed));
_Static_assert(sizeof(DriverList) == 0x2D40, "DriverList definition");

/* size 0x26C */
struct StructCE {
    /* off 0x0 size 0x18 */
    u32 ces00[6];

    /* off 0x18 size 0x4 */
    void *charmenuparam_ptr;

    /* off 0x1C size 0x4 */
    void *kartmenuparam_ptr;

    /* off 0x20 size 0x4 */
    StructCESub *some_cesub_ptr;

    /* off 0x24 size 0x34 */
    StructCE0 strce0;

    /* off 0x58 size 0x170 */
    StructCESub cesubs[2];

    /* off 0x1C8 size 0x4 */
    void *kartoffsetdata_bin;

    /* off 0x1CC size 0x4 */
    Model *kart_select_mdl;

    /* off 0x1D0 size 0x4 */
    u32 cea;

    /* off 0x1D4 size 0x4 */
    NNSG3dResTex_Tex0Block *some_tex0_block;

    /* off 0x1D8 size 0x4 */
    u32 cec;

    /* off 0x1DC size 0x4 */
    u32 ced;

    /* off 0x1E0 size 0x4 */
    u32 kart_appear_not_loaded;

    /* off 0x1E4 size 0x10 */
    u32 ces21[4];

    /* off 0x1F4 size 0x68 */
    StructCESex sexes[2];

    /* off 0x25C size 0x1 */
    u8 ces211;

    /* off 0x25D size 0x1 */
    u8 ces212;

    /* off 0x25E size 0x1 */
    u8 ces213;

    /* off 0x25F size 0x1 */
    u8 ces214;

    /* off 0x260 size 0x4 */
    u32 ces22;

    /* off 0x264 size 0x2 */
    u16 cey;

    /* off 0x266 size 0x2 */
    u16 some_cesex_idx;

    /* off 0x268 size 0x4 */
    void *kart_appear_ktbl_ptr;

} __attribute__((packed));
_Static_assert(sizeof(StructCE) == 0x26C, "StructCE definition");

#endif // MKDS_RE_TYPES_GEN_H
