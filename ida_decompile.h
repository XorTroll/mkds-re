/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library '0201_E_1.ARM9'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct Os_Thread;
struct Fs_File;
struct Fs_Archive;
struct Os_ThreadQueue;
struct Mem_HeapHead;
struct StructW_Sub;
struct Mem_ExpHeapMemoryBlockHead;
struct VStruct;
struct Mem_FrameHeapState;
struct StructN;
struct Os_Alarm;
struct StructMKDSSV;
struct StructNKFL;
struct StructNKEM;
struct StructNKPG;
struct StructNKGP;
struct StructNKTA;
struct StructNKMR;
struct Card_Command;
struct NFTR_FNIFBlock;
struct StructBin;
struct StructCESub;
struct StructML;
struct StructYE;
struct StructFX;
struct NkmOBJI;
struct NkmKTPJ;
struct NkmPATH;
struct NkmPOIT;
struct NkmSTAG;
struct NkmKTPS;
struct NkmKTPC;
struct NkmKTPM;
struct NkmCPOI;
struct NkmCPAT;
struct NkmIPOI;
struct NkmIPAT;
struct NkmEPOI;
struct NkmEPAT;
struct NkmAREA;
struct NkmCAME;
struct NkmPathEntry;
struct NkmIpatEntry;
struct StructMapObjectSub;
struct StructAM;
struct KartOffsetDataEntry;
struct StructAD00Sh;
struct Tex0Block;
struct StructARSub;
struct StructPEP;
struct Struct59C4;
struct Struct59C4Sub;

/* 1 */
union __attribute__((aligned(8))) __n64
{
  unsigned __int64 n64_u64[1];
  unsigned __int32 n64_u32[2];
  unsigned __int16 n64_u16[4];
  unsigned __int8 n64_u8[8];
  __int64 n64_i64[1];
  __int32 n64_i32[2];
  __int16 n64_i16[4];
  __int8 n64_i8[8];
  float n64_f32[2];
  double n64_f64[1];
};

/* 2 */
union __attribute__((aligned(8))) __n128
{
  unsigned __int64 n128_u64[2];
  unsigned __int32 n128_u32[4];
  unsigned __int16 n128_u16[8];
  unsigned __int8 n128_u8[16];
  __int64 n128_i64[2];
  __int32 n128_i32[4];
  __int16 n128_i16[8];
  __int8 n128_i8[16];
  float n128_f32[4];
  double n128_f64[2];
};

/* 3 */
typedef __n64 int8x8_t;

/* 4 */
typedef __n64 uint8x8_t;

/* 5 */
typedef __n64 int16x4_t;

/* 6 */
typedef __n64 int32x2_t;

/* 7 */
typedef __n64 uint16x4_t;

/* 8 */
typedef __n64 uint32x2_t;

/* 9 */
typedef __n128 int8x16_t;

/* 10 */
typedef __n128 int16x8_t;

/* 11 */
typedef __n128 int32x4_t;

/* 12 */
typedef __n128 int64x2_t;

/* 13 */
typedef __n128 uint8x16_t;

/* 14 */
typedef __n128 uint16x8_t;

/* 15 */
typedef __n128 uint32x4_t;

/* 16 */
typedef __n128 uint64x2_t;

/* 17 */
typedef __n64 poly8x8_t;

/* 18 */
typedef __n64 poly16x4_t;

/* 19 */
typedef __n128 poly16x8_t;

/* 20 */
typedef __n128 poly8x16_t;

/* 21 */
typedef __n64 float32x2_t;

/* 22 */
typedef __n128 float32x4_t;

/* 23 */
typedef __n128 float64x2_t;

/* 24 */
typedef __n128 poly128_t;

/* 25 */
typedef void **va_list;

/* 26 */
typedef int BOOL;

/* 27 */
typedef int uint8_t;

/* 28 */
typedef unsigned __int8 u8;

/* 29 */
typedef unsigned int u32;

/* 30 */
typedef unsigned __int16 u16;

/* 31 */
typedef _QWORD u64;

/* 32 */
struct CommonHeader
{
  u32 magic;
  u16 byte_order;
  u16 version;
  u32 total_size;
  u16 header_size;
  u16 block_count;
};

/* 86 */
struct __attribute__((aligned(4))) Arm_MathContext
{
  u32 div_numer_param;
  u32 div_numer_param_l;
  u32 div_denom_param;
  u32 div_denom_param_2;
  u32 sqrt_param;
  u32 sqrt_param_2;
  u16 divcnt_val;
  u16 sqrtcnt;
};

/* 230 */
struct Arm_Context
{
  u32 cpsr;
  u32 r[13];
  u32 sp;
  u32 lr;
  u32 pc_p4;
  u32 sp_svc;
  Arm_MathContext math_ctx;
};

/* 49 */
struct Os_ThreadQueue
{
  Os_Thread *prev_thr;
  Os_Thread *next_thr;
};

/* 34 */
struct Os_Thread
{
  Arm_Context ctx;
  Arm_MathContext strl;
  u32 state;
  Os_Thread *next_thr_1;
  u32 id;
  u32 priority;
  u32 unk_profiler;
  Os_ThreadQueue *some_tlst_ref;
  Os_Thread *prev_thr;
  Os_Thread *next_thr;
  VStruct *vstr_3;
  VStruct *vstr_tail;
  VStruct *vstr_head;
  void *stack_start_ptr;
  void *stack_end_ptr;
  u32 stack_warning_offset;
  Os_ThreadQueue join_queue;
  void *specific[3];
  Os_Alarm *alarm_for_sleep;
  void (__cdecl *dtor_fn)(void *);
  u8 unk[8];
};

/* 85 */
struct VStruct
{
  Os_ThreadQueue tlst;
  Os_Thread *appended_thr;
  u32 some_counter;
  VStruct *maybe_prev_vstr;
  VStruct *maybe_next_vstr;
};

/* 127 */
struct Os_Alarm
{
  void (__fastcall *handler_fn)(void *);
  void *handler_arg;
  u32 tag;
  u32 fire_tick;
  u32 fire_tick_2;
  Os_Alarm *alarm_prev;
  Os_Alarm *alarm_next;
  u32 period_l;
  u32 period_h;
  u32 start;
  u32 start_2;
  u32 unk;
};

/* 254 */
struct $250D9DDDAF67C278613528F64A85437D
{
  Fs_File *prev_file;
  Fs_File *next_file;
};

/* 255 */
typedef struct $250D9DDDAF67C278613528F64A85437D Fs_FileList;

/* 266 */
struct Fs_File_Entry_File
{
  u32 fat_entry_idx;
  u32 start_offset;
  u32 end_offset;
  u32 cur_offset;
};

/* 256 */
struct $87FF991CC4B5CE0C73C531EF9B62847E
{
  Fs_Archive *arc;
  u16 unk1;
  u16 unk2;
  u32 unk3;
};

/* 257 */
typedef struct $87FF991CC4B5CE0C73C531EF9B62847E Fs_DirectoryPosition;

/* 267 */
struct Fs_File_Entry_Directory
{
  Fs_DirectoryPosition dir_pos;
  u32 par;
};

/* 265 */
union Fs_File_Entry
{
  Fs_File_Entry_File e_file;
  Fs_File_Entry_Directory e_dir;
};

/* 259 */
struct Fs_File_OperationArg_Read
{
  void *ptr;
  u32 a;
  u32 b;
};

/* 260 */
struct Fs_File_OperationArg_Write
{
  void *ptr;
  u32 a;
  u32 b;
};

/* 262 */
struct Fs_File_OperationArg_SeekDirectory
{
  Fs_DirectoryPosition dir_pos;
};

/* 258 */
struct Fs_File_OperationArg_FindPath
{
  Fs_DirectoryPosition dir_pos;
  const char *path;
  u32 is_dir;
  void *out_file_dir_ptr;
};

/* 263 */
struct Fs_File_OperationArg_OpenFileRaw
{
  u32 start_offset;
  u32 end_offset;
  u32 fat_entry_idx;
};

/* 46 */
struct Fs_FileId
{
  Fs_Archive *arc;
  u32 fat_entry_idx;
};

/* 264 */
struct Fs_File_OperationArg_OpenFileById
{
  Fs_FileId id;
};

/* 261 */
union Fs_File_OperationArg
{
  Fs_File_OperationArg_Read read;
  Fs_File_OperationArg_Write write;
  Fs_File_OperationArg_SeekDirectory seek_dir;
  Fs_File_OperationArg_FindPath find_path;
  Fs_File_OperationArg_OpenFileRaw open_file_raw;
  Fs_File_OperationArg_OpenFileById open_file_by_id;
};

/* 35 */
struct Fs_File
{
  Fs_FileList file_list;
  Fs_Archive *arc;
  u32 file_flags;
  u32 op_id;
  u32 op_res;
  Os_ThreadQueue op_thr_list;
  Fs_File_Entry entry;
  Fs_File_OperationArg arg;
};

/* 38 */
struct Fs_Archive
{
  u32 name_packed;
  Fs_Archive *next_arc;
  Fs_Archive *prev_arc;
  Os_ThreadQueue sync_queue;
  Os_ThreadQueue status_queue;
  u32 flags;
  Fs_FileList file_list;
  void *fimg_data_start;
  void *fat_start_ptr_rel;
  u32 fat_size;
  void *fnt_start_ptr_rel;
  u32 fnt_size;
  void *fat_start_ptr_rel_bak;
  void *fnt_start_ptr_rel_bak;
  void *used_read_buf;
  int (__fastcall *read_fn)(Fs_Archive *, void *, void *, int);
  int (__fastcall *write_fn)(Fs_Archive *, void *, void *, int);
  int (__fastcall *fat_fnt_fn)(Fs_Archive *, void *, void *, int);
  int (__fastcall *custom_op_handler)(Fs_File *, int);
  u32 custom_op_mask;
};

/* 36 */
struct MemFRMHeapSub
{
  __attribute__((aligned(1))) u8 bb[10];
};

/* 79 */
struct Mem_MemoryRegion
{
  void *start;
  void *end;
};

/* 37 */
struct Mem_FrameHeapHead
{
  Mem_MemoryRegion cur_heap_region;
  Mem_FrameHeapState *cur_state;
};

/* 87 */
struct Mem_FrameHeapState
{
  u32 id;
  Mem_MemoryRegion heap_region;
  Mem_FrameHeapState *next_state;
};

/* 43 */
struct Fs_OverlayInfo
{
  u32 id;
  void *ram_addr;
  u32 ram_size;
  u32 bss_size;
  void (**init_fns_start)(void);
  void (**init_fns_end)(void);
  u32 fat_entry_idx;
  u32 compressed_size_and_flag;
  u32 processor;
  u32 file_start_offset;
  u32 file_size;
};

/* 44 */
struct GammaFuncsStruct
{
  int (__fastcall *fn1)(int, int, int, int, int, int);
  int (__fastcall *fn2)(int, int, int, int, int, int);
  int (__fastcall *fn3)(int, int, int, int, int, int);
  int (__fastcall *fn4)(int, int, int, int, int, int);
  int (__fastcall *fn5)(int, int, int, int, int, int);
  int (__fastcall *fn6)(int, int, int, int, int, int);
};

/* 45 */
struct SigmaStruct
{
  Fs_Archive *some_unkss;
  u32 some_fat_entry_idx;
  void *sub_table_abs_offset;
};

/* 48 */
struct BetaStruct
{
  Fs_File *some_file;
  u32 *fimg_data_start;
  u32 fat_start_ptr_rel;
  u32 fat_size;
  u32 fnt_start_ptr_rel;
  u32 fnt_size;
};

/* 50 */
struct StructG
{
  _WORD g1;
  _WORD maybe_prev_keys;
  _WORD g3;
  _WORD keys_repeat;
  u16 g5;
  u16 counter;
  _WORD maybe_keys_old;
  u16 count_max_2;
  u16 count_max;
  u16 last_time_diff;
  _WORD do_check_if_30c;
  _WORD g12pad;
  _QWORD time_val;
  u32 some_flag;
  u32 g15;
};

/* 51 */
struct ExecutionContext
{
  u32 unk_unused;
  void (__fastcall *exec_fn_ptr)(void *);
  void (__cdecl *unused_fn)();
  Mem_HeapHead *cur_heap_hnd;
  ExecutionContext *prev_active_ctx;
};

/* 81 */
struct IntrusiveListWrapper
{
  void *item_list_head;
  void *item_list_tail;
  _WORD item_count;
  _WORD item_head_tail_offset;
};

/* 96 */
struct Mem_ExpHeapMemoryBlockList
{
  Mem_ExpHeapMemoryBlockHead *list_head;
  Mem_ExpHeapMemoryBlockHead *list_tail;
};

/* 63 */
struct Mem_ExpHeapHead
{
  Mem_ExpHeapMemoryBlockList free_list;
  Mem_ExpHeapMemoryBlockList used_list;
  _WORD group_id;
  _WORD alloc_mode;
};

/* 97 */
union Mem_CommonHeapHead
{
  Mem_ExpHeapHead exp_heap_head;
  Mem_FrameHeapHead frm_heap_head;
};

/* 52 */
struct Mem_HeapHead
{
  u32 magic;
  Mem_HeapHead *some_head;
  void *some_tail;
  IntrusiveListWrapper child_heap_head_list;
  Mem_MemoryRegion heap_region;
  u32 option;
  Mem_CommonHeapHead common;
};

/* 78 */
struct Mem_ExpHeapMemoryBlockHead
{
  _WORD magic;
  _WORD attrs;
  u32 block_size;
  Mem_ExpHeapMemoryBlockHead *prev_block;
  Mem_ExpHeapMemoryBlockHead *next_block;
};

/* 53 */
struct CarcNames
{
  u32 magic;
  char names8[14][8];
  char names12[19][12];
  char names16[37][16];
  char names20[4][20];
  char names24[2][24];
};

/* 58 */
struct StructR
{
  u32 a;
  u32 like_a;
  u16 cur_menu_exec_fn_idx;
  u16 unk;
  void *some_alloc_ptr;
};

/* 59 */
struct Vector3
{
  u32 x;
  u32 y;
  u32 z;
};

/* 60 */
typedef __int16 i16;

/* 61 */
struct StructP
{
  u32 force_disable_ja_if_2;
  u32 system_lang;
  u32 y3;
  u32 y4;
  u32 y5;
  u32 y6;
  u32 y7;
  u32 some_flags;
  u32 maybe_2_if_dwc;
  Mem_HeapHead *dtcm_mem_frame_heap;
  _WORD y111;
  _WORD user_name[10];
  u16 user_name_len;
  _BYTE system_theme;
  _BYTE y172;
  _BYTE y173;
  _BYTE y174;
  u32 y18;
  u32 some_vval_1;
  u32 some_vval_2;
  u16 y211;
  u16 y212;
  u32 y22;
  u32 y23;
  u32 y24;
  u32 some_time_val_pack;
  u32 y26;
  u32 weird_val1;
  u32 weird_val2;
  u32 weird_val3;
  u32 y30;
  u32 y31;
};

/* 67 */
struct CommonBlockHeader
{
  u32 block_magic;
  u32 block_size;
};

/* 64 */
struct NARC_FATBlock
{
  CommonBlockHeader hdr;
  u16 file_count;
  u16 res;
};

/* 65 */
struct NARC_FNTFIMGBlock
{
  u32 magic;
  u32 block_size;
};

/* 66 */
struct StructH
{
  u32 unkh[22];
};

/* 68 */
struct BMG_Header
{
  u64 magic;
  u32 total_size;
  u32 block_count;
  u8 encoding;
  u8 pad[15];
};

/* 69 */
struct ArchiveMountEntry
{
  Fs_Archive arc;
  void *narc_raw_ptr;
  void *fat_block_ptr;
  void *fimg_data_start;
  int loaded;
  void *narc_dec_ptr;
};

/* 70 */
struct StructC_C_Rename
{
  u32 frm_heap_hnd;
  void *some_ptr;
  u32 some_flags;
};

/* 71 */
struct PaletteBlock
{
  u32 color_depth_bpp;
  u32 zero;
  u32 palette_data_size;
  void *palette_data_offset;
};

/* 72 */
struct CharGraphicsBlock
{
  _WORD tile_data_size_kb;
  _WORD unk_20;
  u32 color_bpp;
  _WORD zero_1;
  _WORD zero_2;
  u32 zero_3;
  u32 tile_data_size;
  void *tile_data_offset;
};

/* 73 */
struct ArchiveMountContext
{
  char mount_path[128];
  void *enc_ptr;
  void *dec_buf;
  void *some_buf;
  u32 cur_mount_idx;
  u32 alloc_from_tail;
  u32 is_enc;
  u32 c39;
  u32 c40;
};

/* 74 */
struct __attribute__((aligned(4))) StructX
{
  u32 dec_buf;
  u32 dec_size;
  _WORD x3;
  _BYTE x4;
  _BYTE x5;
  _BYTE x6;
  _BYTE x7;
  _BYTE x8;
  _BYTE x9;
};

/* 75 */
struct StructA
{
  u8 unk[6];
};

/* 229 */
struct StructWef
{
  _WORD bg_prio;
  _WORD bg_enable_mosaic;
  _WORD bg_scr_size;
  _WORD bg_color_plt;
  _WORD bg_scr_base_block;
  _WORD bg_char_base_block;
  _WORD bg_ext_plt_slot;
  _WORD bgcnt_val;
};

/* 124 */
struct StructW1
{
  StructWef bg0;
  StructWef bg1;
  u32 w12;
  _WORD w2s[6];
  u32 w13;
  _WORD w3s[6];
  u16 dispcnt_bit_4;
  u16 dispcnt_bits_5_6;
};

/* 76 */
struct StructW
{
  _WORD some_count;
  u16 dispcnt_screen_display_bg_bits_top;
  u16 dispcnt_screen_display_bg_bits_sub;
  u16 dispcnt_display_mode;
  u16 dispcnt_bg_mode;
  u16 dispcnt_bg_3d;
  u16 dispcnt_sub_bg_mode;
  _WORD wd31;
  _WORD wd32;
  _WORD wd33;
  _WORD wd34;
  _WORD wd35;
  _WORD wd36;
  _WORD wd37;
  _WORD wd38;
  _WORD wd39;
  _WORD wd3a;
  _WORD wd3b;
  _WORD wd3c;
  _WORD some_vram_mask;
  StructW1 w1_top;
  StructW_Sub *wsub;
  StructW1 w1_sub;
  u32 w13;
  void (*some_fn)(void);
  u32 time_val_l1;
  u32 time_val_h1;
  u32 time_val_l2;
  u32 time_val_h2;
  _BYTE unk[16];
};

/* 77 */
struct StructW_Sub
{
  _WORD clear_clr_and_alpha;
  u8 swap_bufs_translucent_poly_y_sort_manual;
  u8 swap_bufs_depth_buffering;
  u8 unk[4];
};

/* 80 */
struct Mem_HeapHead_Frame
{
  u32 magic;
  u32 h1;
  u32 h2;
  u32 h3;
  u32 h4;
  u32 h5;
  void *heap_start;
  void *heap_end;
  u32 option;
  Mem_FrameHeapHead frm_heap_head;
};

/* 82 */
struct GlobalHeapHolder
{
  u32 maybe_some_fn;
  void *some_ptr_2000000;
  void *ram_start_addr;
  Mem_HeapHead *global_mem_heap;
  char *str_main_proc;
};

/* 83 */
struct File_FatEntry
{
  u32 fimg_rel_offset;
  u32 file_size;
};

/* 84 */
struct Os_ThreadInfo
{
  u16 needs_rescheduling;
  u16 irq_depth;
  Os_Thread *cur_thr;
  Os_Thread *prio_thr_list;
  void (__fastcall *thread_switch_fn)(Os_Thread *, Os_Thread *);
};

/* 88 */
struct IntrusiveListNode
{
  void *item_prev;
  void *item_next;
};

/* 89 */
struct GhostHeader
{
  u32 d1;
  u32 d2;
  u32 d3;
  u8 data[548];
};

/* 90 */
struct StructZ
{
  StructMKDSSV *str_mkdssv;
  StructNKEM *str_nkem;
  StructNKGP *str_nkgp;
  StructNKTA *str_nkta;
  StructNKMR *str_nkmr;
  StructNKPG *str_nkpg;
  u32 some_ptr_1000;
  u32 some_file_read_buf_1000;
  StructNKFL *str_nkfl;
  u32 some_ptr_b00;
  _BYTE some_flags_11;
  _BYTE some_flags_12;
  _WORD some_flags_2;
  u32 z5;
  u32 z6;
  u32 z7;
  u32 z8;
  u32 z9;
  void *at_fn_obj_ptr;
  u32 maybe_flags;
};

/* 158 */
struct __attribute__((packed)) StructIU
{
  u32 iu1;
  _QWORD iu2;
};

/* 129 */
struct StructMKDSSV
{
  u32 magic_mkds;
  u32 magic_sv10;
  u32 magic_nksy;
  u16 user_name[10];
  u8 fl1;
  u8 fl2;
  u8 some_flags;
  u8 fl4;
  u16 some_size;
  u16 uunk;
  u8 some_flag;
  u8 unu[7];
  u8 mala;
  u8 some_flags_2;
  u8 m3;
  u8 m4;
  u8 unkarr32[11];
  int some_idx;
  u8 unkarr41[8];
  StructIU some_iu;
  u8 unkarr42[168];
};

/* 131 */
struct StructNKEM
{
  u32 magic;
  u32 ses[191];
};

/* 133 */
struct StructNKGP
{
  u32 magic_nkgp;
  u32 nkgps[255];
};

/* 134 */
struct StructNKTA
{
  u32 magic_nkta;
  u32 nktas[1407];
};

/* 135 */
struct StructNKMR
{
  u32 magic_nkmr;
  u32 nkmrs[63];
};

/* 132 */
struct StructNKPG
{
  u32 magic_nkpg;
  u32 some_flags;
  u32 another_flags;
  u32 like_unkarr[5];
  u32 sms1[4];
  u32 some_buf[883];
  u32 sms[1];
};

/* 138 */
struct StructOI
{
  u16 oi1;
  u16 oi2;
  u16 oi3;
  u16 oi4;
  u16 oi5;
  u16 oi6;
  u16 oi7;
  u8 oi8[20];
  u16 some_flags;
};

/* 130 */
struct StructNKFL
{
  u32 magic_nkfl;
  StructOI ois[60];
  StructIU ius[60];
  u32 other2[47];
};

/* 91 */
struct GhostHolder
{
  GhostHeader headers[32];
};

/* 92 */
struct File_FntEntry
{
  u32 sub_table_offset;
  _WORD first_file_idx;
  _WORD dir_count_or_parent_dir;
};

/* 93 */
struct Fs_SyncReader
{
  Fs_Archive *arc;
  void *read_buf;
  u32 u3;
  u32 u4;
  u32 u5;
  u32 u6;
};

/* 94 */
struct File_ProcessedFntEntry
{
  Fs_Archive *some_buf_start;
  _WORD entry_id_1;
  _WORD entry_id_2;
  u32 s3;
  u32 is_dir;
  u32 name_len;
  char name_ptr[128];
};

/* 149 */
struct NFTR
{
  NFTR_FNIFBlock *fnif_data;
  u32 fn_ptr;
  u16 nf31;
  u16 nf32;
};

/* 95 */
struct Struct2D
{
  void *search_icon_00_bncl_ptr;
  void *search_icon_layout_00_bncl_ptr;
  CharGraphicsBlock *search_icon_00_nce_ncgr;
  void *search_icon_00_nce_ncer;
  PaletteBlock *search_icon_00_o_nclr;
  NFTR mbchild_nftr;
  void *mbchild_bmg_ptr;
  CharGraphicsBlock *multi_download_00_b_ncgr;
  PaletteBlock *multi_download_00_b_nclr;
};

/* 150 */
struct NFTR_FNIFBlock
{
  u8 unk_zero1;
  u8 height;
  u16 unk_zero3;
  u8 unk_zero4;
  u8 width;
  u8 width2;
  u8 encoding;
  u32 offset_charglyph_p8;
  u32 offset_charwidth_p8;
  u32 offset_charmap1_p8;
};

/* 99 */
struct File_OperationContext::Op01
{
  u32 unk_ff_op7;
  int start_offset;
  int end_offset;
  u32 cur_offset;
  void *read_ptr;
  u32 actual_rw_len;
  u32 size;
};

/* 104 */
struct File_OperationContext::Op2_1
{
  Fs_Archive *some_unks;
  _WORD in_fnt_idx;
  _WORD some_file_idx;
  void *sub_table_abs_offset;
  u32 parent_dir_id;
};

/* 105 */
struct File_OperationContext::Op2_2
{
  Fs_Archive *arc;
  _WORD in_fnt_idx;
  _WORD in_file_idx;
  void *sub_table_abs_offset;
};

/* 103 */
struct File_OperationContext::Op2
{
  struct File_OperationContext::Op2_1 p1;
  struct File_OperationContext::Op2_2 p2;
};

/* 106 */
struct File_OperationContext::Op3
{
  u32 p30;
  _WORD some_entry_id;
  _WORD cur_file_id_counter;
  void *some_read_buf;
  u32 a3;
  File_ProcessedFntEntry *fnt_entry_p;
  int skip_name_read;
  u32 a6;
};

/* 108 */
struct File_OperationContext::Op5_1
{
  u32 p50;
  _WORD some_entry_id;
  _WORD a6112;
  u32 a612;
  u32 a613;
};

/* 109 */
struct File_OperationContext::Op5_2
{
  char *some_str;
  u32 a622;
  _WORD some_len;
  _WORD some_entry_id;
};

/* 107 */
struct File_OperationContext::Op5
{
  struct File_OperationContext::Op5_1 p1;
  struct File_OperationContext::Op5_2 p2;
};

/* 102 */
struct File_OperationContext::Op6
{
  u32 op60;
  u32 op61;
  u32 op62;
  u32 op63;
  Fs_Archive *some_unks;
  u32 fat_entry_idx;
  u32 op66;
};

/* 112 */
struct File_OperationContext::Op7
{
  u32 op70;
  u32 op71;
  u32 op72;
  u32 op73;
  void *start_offset;
  void *end_offset;
  u32 unk_ff;
};

/* 101 */
union __attribute__((aligned(4))) File_OperationContext
{
  struct File_OperationContext::Op01 rw;
  struct File_OperationContext::Op2 seek_dir;
  struct File_OperationContext::Op3 read_dir;
  struct File_OperationContext::Op5 get_path;
  struct File_OperationContext::Op6 open_by_fat;
  struct File_OperationContext::Op7 open_raw;
};

/* 110 */
struct ScreenBrightnessContext
{
  _WORD maybe_state;
  _WORD maybe_init;
  _WORD brightness_modded;
  _WORD brightness_mod_val;
  u16 brightness;
};

/* 111 */
struct Arc_Struct1
{
  u32 next_mount_idx;
  u32 arc2;
  u32 arc3;
  u32 arc4;
  u32 arc5;
  u32 arc6;
};

/* 114 */
struct Os_PersonalData
{
  _BYTE lang;
  _BYTE theme;
  _BYTE birthday_month;
  _BYTE birthday_day;
  _WORD name[10];
  _WORD name_len;
  _WORD msg[26];
  _WORD msg_len;
};

/* 179 */
struct __attribute__((packed)) PersonalDataPacked
{
  unsigned __int32 language : 3;
  unsigned __int32 gbaScreen : 1;
  unsigned __int32 defaultBrightness : 2;
  unsigned __int32 autoMode : 1;
  unsigned __int32 RESERVED5 : 2;
  unsigned __int32 settingsLost : 1;
  unsigned __int32 RESERVED6 : 6;
};

/* 115 */
struct Bios_PersonalData
{
  u8 reserved[2];
  u8 theme;
  u8 birth_month;
  u8 birth_day;
  u8 unk;
  _WORD name[10];
  u16 name_len;
  _WORD msg[26];
  u16 msg_len;
  u8 alarm_h;
  u8 alarm_min;
  u8 reserved_2[4];
  _WORD calx1;
  _WORD caly1;
  u8 calx1_px;
  u8 caly1_px;
  _WORD calx2;
  _WORD caly2;
  u8 calx2_px;
  u8 caly2_px;
  PersonalDataPacked datapack;
  u8 reserved_3[2];
  u32 rtc_offset;
  u8 reserved_4[4];
};

/* 116 */
struct Os_Lock
{
  u32 lock_flag;
  u16 owner_id;
  u16 ext;
};

/* 147 */
struct StructEK
{
  PaletteBlock *some_plt;
  CharGraphicsBlock *some_char;
  void *some_scrn;
};

/* 120 */
struct StructE7
{
  void **maybe_fn_list;
  u32 some_counter;
  u32 fn_arg;
  _WORD e741;
  _WORD some_fn_idx;
  _WORD other_maybe_next_fn_idx;
  _WORD needs_run_fn_1_other_idx;
};

/* 117 */
struct StructE
{
  StructEK ek1;
  StructEK ek2;
  StructE7 e7;
  u32 maybe_flags;
  u32 e13;
  u32 e14;
  void *some_bmg_buf;
};

/* 118 */
struct StructQ
{
  u32 has_global_f;
  u32 q2;
  u32 q3;
  u32 qs[513];
  u32 qx;
};

/* 119 */
struct StructF
{
  u32 fs[2206];
};

/* 189 */
struct StructTK
{
  u16 user_name[10];
  u32 arr[128];
  u8 some_flag;
  u8 pad;
  u16 some_size;
  StructIU iu;
  u32 mkdssv_fl1;
  u8 some_flag_2;
  u8 unk[3];
  u32 yuyu3;
  u32 yuyu4;
  u32 yuyu5;
  u32 yuyu6;
  u32 yuyu7;
  u32 yuyu8;
};

/* 121 */
struct __attribute__((aligned(32))) StructO
{
  Mem_HeapHead *heap;
  void *some_alloc_ptr;
  StructE7 q7;
  u32 os1[131];
  StructTK tks[4];
  u32 os21[881];
  u32 osso;
  u32 osos;
  u32 ososos;
  u32 os22[58];
  StructIU ius[60];
  u32 os3[156];
  u32 some_val_1;
  u32 oh;
  u32 og;
  u32 of;
  u32 oe;
  u32 od;
  u32 oc;
  u32 ob;
  u32 oa;
  u8 ooonk1;
  u8 some_idx_mask;
  u8 ooonk3;
  u8 ooonk4;
};

/* 154 */
struct PlayerGfxData
{
  CharGraphicsBlock *nce_ncgr;
  PaletteBlock *plt_data;
  void *nce_ncer;
  void *bncl_data;
  u32 unk_3;
  void *bnll_data;
  u32 unk_5;
};

/* 123 */
struct StructM
{
  PlayerGfxData player;
  PlayerGfxData player2;
  StructN *strn_or_nj;
  u32 m16;
  u32 m17;
  u32 m18;
  u32 flags_or_size;
  void *common_bmg_ptr;
  void *secret_bmg_ptr;
  u32 m22;
  u32 some_flags;
  u32 m24;
};

/* 213 */
struct StructNJ
{
  u8 buf[1024];
  u16 unk1;
  u16 unk2;
};

/* 125 */
struct StructN
{
  StructNJ nj1;
  StructNJ nj2;
  u32 like_co_mode;
};

/* 126 */
struct StructV
{
  u32 vs[7];
  void *some_scrn_ptr;
  u32 unk1[10];
  PlayerGfxData player1;
  PlayerGfxData player2;
  PlayerGfxData player_gfx_l;
  PlayerGfxData player_gfx_m;
  u32 vs21[2];
  PaletteBlock *player_shy_l;
  PaletteBlock *player_shy_m;
  void *common_bmg_ptr;
  u32 vs22[6];
  u32 vs2[28];
};

/* 128 */
struct StructAT
{
  void (__cdecl *fn_ptr_array[10])();
  u8 some_fn_ptr_idx;
  u8 maybe_pad[3];
  Os_Thread thread;
  u8 unk[8];
  void *thread_stack_ptr;
  u32 has_fn_to_run;
};

/* 136 */
struct StructSX
{
  u32 sx1;
  u32 some_val;
  u32 bak_lock_id;
  u32 some_flag_call_some_fn;
  u32 some_flag_maybe_fn_running;
  u32 flag_c;
  u32 offset_2;
  u32 sxx1;
  void *some_ptr_a;
  u32 sxx3;
  void *ptr_a;
  u32 offset_a;
  u32 size_a;
  u32 sxx7;
  u32 flag_b;
  u32 sxx9;
  void *ptr_b;
  u32 offset_b;
  u32 size_b;
  u32 sxx13;
  u32 flag_b;
  u32 flag_a;
  u32 sxx16;
  u32 some_val_m1;
  void *maybe_copy_data_buf;
  void *ptr_byte;
  void *some_ptr;
  u32 sx5;
};

/* 137 */
struct Card_Context
{
  Card_Command *cmd;
  u32 command;
  u32 some_card_lock_id;
  u32 some_counter;
  Os_ThreadQueue lock_queue;
  u32 lock_target;
  u32 src;
  void *dst;
  u32 len;
  u32 dma_channel;
  u32 req_type;
  u32 req_retry_count;
  u32 req_mode;
  void (__fastcall *dma_fn)(void *);
  void *dma_fn_arg;
  void (__fastcall *task_fn)(Card_Context *);
  Os_Thread thr;
  Os_Thread *thr_ref;
  u32 thr_prio;
  Os_ThreadQueue busy_queue;
  u32 status;
  u32 unk1;
  u32 unk2;
  u8 bak_cache_page_buf[256];
};

/* 139 */
struct Card_Command
{
  u32 result;
  u32 sa2;
  u32 sa3;
  u32 some_ptr_1;
  u32 some_ptr_2;
  u32 some_copy_size;
  u32 sa7;
  u32 sa8;
  u32 sa9;
  u32 sa10;
  u32 sa11;
  u32 sa12;
  u32 sa13;
  u32 sa14;
  u32 sa15;
  u32 sa16;
};

/* 140 */
struct StructTM
{
  u32 maybe_handler;
  u32 unk;
  u32 maybe_init;
};

/* 141 */
struct StructMTM
{
  StructTM timer0;
  StructTM timer1;
  StructTM timer2;
  StructTM timer3;
};

/* 142 */
struct CardHeaderStart
{
  char gameTitle[12];
  char gameCode[4];
  char makercode[2];
  u8 unitCode;
  u8 deviceType;
  u8 deviceSize;
  u8 reserved1[9];
  u8 romversion;
  u8 flags;
  u32 arm9romOffset;
  void *arm9executeAddress;
  void *arm9destination;
  u32 arm9binarySize;
  u32 arm7romOffset;
  void *arm7executeAddress;
  void *arm7destination;
  u32 arm7binarySize;
  u32 fntOffset;
  u32 fntSize;
  u32 fatOffset;
  u32 fatSize;
  u32 arm9overlaySource;
  u32 arm9overlaySize;
  u32 arm7overlaySource;
  u32 arm7overlaySize;
};

/* 143 */
struct StructCH
{
  u32 ch1;
  u32 ch2;
  u32 ch3;
  u32 ch4;
  u32 ch5;
  u32 arm9_ovl_size;
  u32 ch7;
  u32 arm7_ovl_size;
};

/* 144 */
struct StructZE
{
  u32 ze1;
  u32 ze2;
  u32 ze3;
  u32 ze4;
  u32 ze5;
  void *ptr0_f00;
  void *ptr1_40;
  void *ptr2_20;
  void *ptr3_44;
  void *ptr4_c0;
  void *ptr5_c0;
  void *ptr6_400;
  u32 size_1c0;
  void *ptr7_1c0;
  u32 size_400;
  void *ptr8_400;
  void *ptr9_18;
  u32 zeus1[17];
  u8 zes[8];
  u32 zeus2[241];
  u16 zee1;
  u8 zee2;
  u8 zee3;
  u32 zef;
  u32 zeus31[1132];
  StructE7 *some_e7;
  u32 ze9;
  u32 ze10;
  u32 ze11;
  u32 ze12;
  u32 ze13;
  u32 ze14;
  u32 ptr_sz_16c;
  u32 zey;
  u32 ptrs_sz_12[8];
  u32 zd1;
  u32 zd2;
  StructBin *some_bin_ptr;
  void *ptr_size_bin_p0;
  void *ptr_size_a;
  u32 size_a;
  Mem_HeapHead *some_hnd;
  void *ptr_size_4c0;
  u32 zd9;
  u32 zd10;
  u32 zd11;
  u32 zd12;
  u32 zd13;
  u32 zd14;
  u32 zd15;
  u32 zd16;
  u32 bin_size_p0;
  u32 zeus32[496];
  u16 zeus4[86];
};

/* 167 */
struct StructBin
{
  u32 b1;
  u32 b2;
  u32 b3;
  u32 b4;
  u32 b5;
  u32 b6;
  u32 b7;
  u32 b8;
  u32 b9;
  u32 b10;
  u32 b11;
  u32 b12;
  u32 b13;
  u32 b14;
  u32 b15;
  u32 b16;
  u32 bins[138];
};

/* 145 */
struct StructDW
{
  u32 dwc[8];
};

/* 146 */
struct CardHeader
{
  CardHeaderStart start_h;
  u32 cardControl13;
  u32 cardControlBF;
  u32 bannerOffset;
  u16 secureCRC16;
  u16 readTimeout;
  u32 unknownRAM1;
  u32 unknownRAM2;
  u32 bfPrime1;
  u32 bfPrime2;
  u32 romSize;
  u32 headerSize;
  u32 zeros88[14];
  u8 gbaLogo[156];
  u16 logoCRC16;
  u16 headerCRC16;
};

/* 148 */
struct StructNB
{
  u32 nbas[557];
};

/* 153 */
struct StructJT
{
  u32 init_global_f;
  NFTR *loaded_font_1;
  u32 jt3;
  u32 jt4;
  u32 jt5;
  u32 init_global_nb;
  NFTR *loaded_font_2;
  u32 init_some_obj;
  u32 init_sth;
  u32 jt10;
  u32 jt11;
  u32 jt12;
};

/* 155 */
struct StructKT
{
  u16 prev_fn_t_idx;
  u16 cur_fn_t_idx;
  u16 next_fn_t_idx;
};

/* 156 */
struct StructKC
{
  void (__fastcall *fn0)(StructKT *);
  void (__fastcall *fn1)(StructKT *, u32);
  void (__fastcall *fn2)(StructKT *);
  void (__fastcall *fn3)(StructKT *, u32);
  u32 kc5;
  u32 kc6;
  u16 some_brightness_mod;
  u16 other_brightness;
  u32 kc8;
};

/* 157 */
struct StructPK
{
  StructYE *strye;
  StructFX *strfx;
  GhostHolder *ghost_holder;
  u32 pk4;
  u32 pk5;
};

/* 185 */
struct StructYH
{
  u32 ys[12];
};

/* 186 */
struct StructYE
{
  StructYH yhs[32];
};

/* 187 */
struct StructFY
{
  u32 fs[140];
};

/* 188 */
struct StructFX
{
  StructFY fys[10];
};

/* 159 */
struct StructCA
{
  u32 cas1[48];
  u32 cas2[12];
  u32 ca3;
  void *mission_mr_buf;
  u32 mission_mr_buf_p8;
  u8 ca411;
  u8 ca412;
  u8 ca413;
  u8 ca414;
  u32 ca5;
  u32 ca6;
  u32 ca7;
  u32 ca8;
};

/* 180 */
struct StructCOI
{
  u32 ci1;
  u32 ci2;
  u32 ci3;
  u32 ci4;
  u32 ci5;
  u32 ci6;
  u16 *str16;
  u32 ci8;
  u32 ci9;
  u32 ci10;
  u32 ci11;
  u32 ci12;
};

/* 238 */
struct StructCOSub
{
  u32 cus[12];
};

/* 160 */
struct StructCO
{
  u32 maybe_kart_idx;
  u32 c2;
  u32 maybe_cur_mode_2_battle_4_mission;
  u32 some_strw_rel_idx_0_6;
  StructCO *c5;
  u32 c6;
  u32 c7;
  u32 c8;
  u32 cos1[9];
  u32 some_flahs;
  u32 some_nkm_mission_path_start;
  u32 co1;
  u32 co2;
  u8 some_bmg_idx_ref;
  u8 co32;
  u8 co33;
  u8 co34;
  u8 is_teams;
  u8 cos1992;
  u8 cos1993;
  u8 cos1994;
  u32 cos200;
  u8 cos201;
  u8 cos202;
  u8 other_char_idx;
  u8 some_char_idx;
  u32 cos2x;
  u32 *cos22;
  u32 cos23;
  StructCOI cois[8];
  u32 cos3[8];
  u8 unk_2c[44];
  StructCOSub cosubs[8];
  u32 uuu[5];
  u8 some_count;
  u8 aa2;
  u8 aa3;
  u8 aa4;
  u8 aa51;
  u8 aa52;
  u8 aa53;
  u8 aa54;
  u32 aa6;
  u32 ptr_sz_21;
  u32 ksks[8];
};

/* 161 */
struct StructRE
{
  u8 unk[4];
  u8 flags;
  u8 unk2;
  _WORD re2[2];
};

/* 162 */
struct StructLU
{
  u16 lu11;
  u8 lu121;
  u8 lu122;
  u8 lu211;
  u8 lu212;
  u16 lu22;
  u8 lu311;
  u8 lu312;
  u32 q;
  u16 lu34;
  u32 lus[75];
  u32 l4;
  u32 l5;
  u32 l6;
  u32 l7;
  u32 l8;
  u32 l9;
  u32 l10;
  u32 l11;
  u32 l12;
  u32 some_flags;
};

/* 251 */
struct OverlayHolder
{
  u32 ovl_idx;
  u32 unk1;
  u32 unk2;
};

/* 163 */
struct StructGY
{
  u32 cur_ovl_h_idx;
  u32 maybe_status;
  OverlayHolder ovls[3];
  Fs_OverlayInfo ovl_info;
  Fs_File ovl_file;
  Mem_HeapHead *some_heap_hnd;
  Mem_HeapHead *some_heap_hnd_maybe_mission;
  u32 gy2;
};

/* 164 */
struct DTCMRegion
{
  Os_ThreadQueue irq_tlst;
  void *irq_handlers[22];
  u32 shs[712];
  u8 stack_2[10240];
  u8 irq_stack[3072];
  u32 stack_p_c00;
  u32 sh30;
  u32 sh29;
  u32 sh28;
  u32 sh27;
  u32 sh26;
  u32 sh25;
  u32 sh24;
  u32 sh23;
  u32 sh22;
  u32 sh21;
  u32 sh20;
  u32 sh19;
  u32 sh18;
  u32 sh17;
  u32 sh16;
  u32 some_sp_related;
  u32 sh15;
  u32 sh14;
  u32 sh13;
  u32 sh12;
  u32 sh11;
  u32 sh10;
  u32 sh9;
  u32 sh8;
  u32 sh7;
  u32 sh6;
  u32 sh5;
  u32 sh4;
  u32 sh3;
  u32 irq_flags;
  u32 sh1;
};

/* 165 */
struct Fs_OverlayTable
{
  void *ptr;
  u32 size;
};

/* 166 */
struct Crt0_StartContext
{
  u32 mem_copy_infos_start;
  u32 mem_copy_infos_end;
  u32 mem_copy_src_addr;
  void *maybe_bss_start;
  void *maybe_bss_end;
  void *some_code_ptr_end;
};

/* 168 */
struct StructMV
{
  u32 mw1;
  u32 mw2;
  u16 mw31;
  u8 mw32;
  u8 mw33;
  u16 mw41;
  u16 mw42;
  u16 mw51;
  u16 mw52;
  u32 mw6;
  u32 mvs1[14];
  u32 mm1;
  u32 mm2;
  u32 mm3;
  u32 objs_sz_23[277];
  u32 mv21;
  u32 mv22;
  u32 mv23;
  u32 mv24;
  u32 mv25;
  u32 mv26;
  void *ranktimeGP_rtt_ptr;
  u32 mv28_maybe_some_flag;
  u32 mv29;
  void *some_alloc_ptr;
  u32 mv2;
  void *rankpoint_rpt_ptr;
  u32 mv4;
  u32 mv5;
  u32 mv6;
  u32 mv7;
  u32 mv8;
  u32 mv9;
  u32 mv10;
  u32 mv11;
  u32 mv12;
  u32 mv13;
  u32 mv14;
  u32 mv15;
  u32 mv16;
  u32 mv17;
  u32 mv18;
  u32 mv19;
  u32 mv20;
};

/* 169 */
struct StructPE
{
  NkmOBJI *obji_ptr;
  NkmOBJI *obji_count;
  NkmPATH *path_ptr;
  u16 path_count;
  u16 pad2;
  NkmPOIT *poit_ptr;
  u16 poit_count;
  u16 pad3;
  NkmSTAG *stag_ptr;
  NkmKTPS *ktps_ptr;
  u16 ktps_count;
  u16 pad4;
  NkmKTPJ *ktpj_ptr;
  u16 ktpj_count;
  u16 pad5;
  u32 xa;
  u32 xb;
  NkmKTPC *ktpc_ptr;
  u16 ktpc_count;
  u16 pad6;
  NkmKTPM *ktpm_ptr;
  u16 ktpm_count;
  u16 pad7;
  NkmCPOI *cpoi_ptr;
  u16 cpoi_count;
  u16 pad8;
  NkmCPAT *cpat_ptr;
  u16 cpat_count;
  u16 pad9;
  NkmIPOI *ipoi_ptr;
  u16 ipoi_count;
  u16 pad10;
  NkmIPAT *ipat_ptr;
  u16 ipat_count;
  u16 pad11;
  NkmEPOI *epoi_ptr;
  u16 epoi_count;
  u16 pad12;
  NkmEPAT *epat_ptr;
  u16 epat_count;
  u16 pad13;
  NkmAREA *area_ptr;
  u16 area_count;
  u16 pad14;
  NkmCAME *came_ptr;
  u32 came_count;
  NkmEPOI *epoi_ptr_2;
  u16 epoi_count_2;
  u16 pad15;
  NkmEPAT *epat_ptr_2;
  u16 epat_count_2;
  u16 pad16;
  NkmPathEntry *path_entries;
  u16 valid_cpoi_count;
  u16 some_cpat_point_end;
  u16 min_cpat_section_order_a;
  u16 pad17;
  u32 pe9;
  u32 pe8;
  u32 pe7;
  NkmIpatEntry *ipat_entries;
  u32 pe5;
  u32 pe4;
  u32 pe3;
  u32 pe2;
  u32 pe1;
  NkmCAME *indicator_top_scr_came;
  NkmCAME *indicator_sub_scr_came;
  NkmCAME *cam_type6;
  NkmCAME *battle_mode_cam;
  NkmCAME *mission_finish_cam;
  StructPEP *nkm_area3_ptrs[8];
  u32 a1;
  u16 *some_cannon_table;
  u16 a21;
  u16 area_type4_count;
  u32 total_cpat_distance;
  u32 rel_total_distance;
  u16 nkm_version;
  u8 a52;
  u8 area_type2_count;
};

/* 190 */
struct NkmOBJI
{
  Vector3 pos_v;
  Vector3 rot_v;
  Vector3 scale_v;
  u16 obj_id;
  u16 route_id;
  u32 obj_params[4];
  u32 show_in_time_trails;
};

/* 192 */
struct NkmPATH
{
  u8 route_id;
  u8 route_loop_flag;
  u16 poit_count;
};

/* 193 */
struct NkmPOIT
{
  Vector3 pos_v;
  u8 point_idx;
  u8 unk1;
  __int16 duration;
  u32 unk2;
};

/* 194 */
struct NkmSTAG
{
  u16 track_id;
  u16 lap_count;
  u8 unk1;
  u8 fog_flag;
  u8 fog_table_gen_mode;
  u8 fog_slope;
  u8 unk2[8];
  u32 fog_distance;
  u16 fog_color;
  u16 fog_alpha;
  u16 kcl_color_1;
  u16 kcl_color_2;
  u16 kcl_color_3;
  u16 kcl_color_4;
  u8 unk3[8];
};

/* 195 */
struct NkmKTPS
{
  Vector3 pos_v;
  Vector3 rot_v;
  u16 unk_pad;
  u16 start_pos_idx;
};

/* 191 */
struct NkmKTPJ
{
  Vector3 pos_v;
  Vector3 rot_v;
  u16 enemy_pos_id;
  u16 item_pos_id;
  u32 respawn_id;
};

/* 196 */
struct NkmKTPC
{
  Vector3 pos_v;
  Vector3 rot_v;
  u16 unk;
  u16 cannon_idx;
};

/* 197 */
struct NkmKTPM
{
  Vector3 pos_v;
  Vector3 rot_v;
  u16 unk_pad;
  u16 idx;
};

/* 199 */
struct Vector2
{
  u32 x;
  u32 y;
};

/* 198 */
struct NkmCPOI
{
  Vector2 pos_v;
  Vector2 pos_v_2;
  u32 sinus;
  u32 cosinus;
  u32 distance;
  u16 section_data_1;
  u16 section_data_2;
  __int16 key_id;
  u8 respawn_id;
  u8 unk;
};

/* 200 */
struct NkmCPAT
{
  u16 point_start;
  u16 point_len;
  u8 next_group[3];
  u8 prev_group[3];
  u8 section_order_a;
  u8 section_order_b;
};

/* 201 */
struct NkmIPOI
{
  Vector3 pos_v;
  u32 scale;
  u32 unk_ver_post_33;
};

/* 202 */
struct NkmIPAT
{
  u16 point_start;
  u16 point_len;
  u8 next_group[3];
  u8 prev_group[3];
  u16 section_order;
};

/* 203 */
struct NkmEPOI
{
  Vector3 pos_v;
  u32 scale;
  u16 drifting;
  u16 unk1;
  u32 unk2;
};

/* 204 */
struct NkmEPAT
{
  u16 point_start;
  u16 point_len;
  u8 next_group[3];
  u8 prev_group[3];
  u16 section_order;
};

/* 205 */
struct NkmAREA
{
  Vector3 pos_v;
  Vector3 len_v;
  Vector3 unk_v;
  Vector3 unk_v2;
  Vector3 unk_v3;
  u16 some_area3_idx;
  u16 unk2;
  u16 unk3;
  u8 unk4;
  u8 cam_id;
  u8 area_type;
  __attribute__((packed)) __attribute__((aligned(1))) u16 unk5;
  u8 unk6;
};

/* 206 */
struct NkmCAME
{
  Vector3 pos1_v;
  Vector3 rot_v;
  Vector3 pos2_v;
  Vector3 pos3_v;
  u16 fov_begin;
  u16 fov_begin_sine;
  u16 fov_begin_cosine;
  u16 fov_end;
  u16 fov_end_sine;
  u16 fov_end_cosine;
  u16 cam_zoom;
  u16 cam_type;
  u16 linked_route;
  u16 route_speed;
  u16 point_speed;
  u16 cam_duration;
  u16 next_cam;
  u8 intro_pan_1st_cam_indicator;
  u8 unk;
};

/* 207 */
struct NkmPathEntry
{
  NkmPATH *path_ptr;
  NkmPOIT *poits_ptr;
};

/* 208 */
struct NkmIpatEntry
{
  u32 t1;
  NkmIpatEntry *another_entry;
  u32 t3;
  NkmIpatEntry *some_entry;
  u32 t5;
  u32 t6;
  NkmIPOI *ipoi_ptr;
  u32 ipoi_scale;
  u8 ipoi_unk_v_p_33;
  u8 t92;
  u8 t93;
  u8 t94;
  u16 t101;
  u16 some_count;
};

/* 252 */
struct StructPEP
{
  NkmAREA *nkm_area;
  StructPEP *next_pep;
};

/* 170 */
struct StructRT
{
  IntrusiveListWrapper some_lst;
  IntrusiveListWrapper ptr_lsts[5];
  void *some_ptrs[5];
  u16 some_count_up_to_D;
  u16 unk2;
};

/* 221 */
struct StructNASub
{
  u32 ns1;
  u32 ns2;
  void *nsbmd_ptr;
  Tex0Block *tex0_block;
};

/* 171 */
struct StructNA
{
  u16 na1_maybe_nsbmd;
  u16 na2;
  u32 na3_maybe_nsbca;
  u32 na4_maybe_nsbma;
  u32 na5;
  u32 na6;
  u32 na7;
  u32 na8;
  StructNASub sub;
};

/* 245 */
struct Dict
{
  u8 rev;
  u8 entry_count;
  u16 header_size;
  u16 sub_h_size;
  u16 entries_off_rel_to_sub_h;
  u32 unk_const;
};

/* 236 */
struct Tex0Block
{
  CommonBlockHeader hdr;
  u32 tex_vram_key;
  u16 tex_data_size_bs3;
  u16 tex_dict_offset;
  u16 tex_flag;
  u16 pad1;
  u32 tex_data_offset;
  u32 comp_tex_vram_key;
  u16 comp_tex_data_size_bs3;
  u16 comp_tex_dict_offset_unk;
  u16 comp_tex_flag;
  u16 pad2;
  u32 comp_tex_data_offset;
  u32 comp_tex_info_data_offset;
  u32 plt_vram_key;
  u16 plt_data_size_bs3;
  u16 plt_flag;
  u16 plt_dict_offset;
  u16 pad3;
  u32 plt_data_offset;
  Dict tex_dict;
};

/* 172 */
struct StructHN
{
  u16 h1;
  u16 h2;
  u16 h3;
  u16 h4;
  u16 h5;
  u16 h6;
  u16 h7;
  u16 h8;
};

/* 173 */
struct StructDP
{
  u32 dp1;
  u32 dp2;
  u32 dp3;
};

/* 174 */
struct FFData
{
  u32 chip_id_1;
  u32 chip_id_2;
  u16 card_header_crc;
  u16 card_secure_area_crc;
  u16 card_header_bad_crc;
  u16 card_secure_area_bad_crc;
  u16 arm7_bios_crc;
  u16 secure_disable;
  u16 sio_debug_exists;
  u8 unk_rtc_status;
  u8 rand_8bit;
  u8 unk[24];
  u16 unk_gba_card_val;
  u8 unk_gba_card_val_2[3];
  u8 unk_flags;
  u16 gba_card_maker_code;
  u32 gba_card_game_code;
  u32 frame_counter;
  u16 boot_indicator;
  u8 unused[62];
  Bios_PersonalData pla;
};

/* 175 */
struct Card_RomContext
{
  void (__fastcall *read_fn)(Card_RomContext *);
  u32 romctrl_val;
  void *cache_page;
  u32 unk1;
  u32 unk2;
  u32 unk3;
  u32 unk4;
  u32 unk5;
  u8 cache_buf[512];
};

/* 176 */
struct Crt0_RegionCopyInfo
{
  void *dst_addr;
  u32 dst_copy_size;
  u32 dst_rem_zero_size;
};

/* 177 */
struct DmaIrqEntry
{
  u32 handler_fn;
  u32 b;
  u32 fn_arg;
};

/* 178 */
struct DmaIrqHolder
{
  DmaIrqEntry entries[4];
};

/* 181 */
struct StructStaffRoll
{
  u32 some_counter;
  PaletteBlock *ending_st_roll_m_o_00_nclr;
  CharGraphicsBlock *ending_st_roll_m_o_00_nce_ncgr;
  u32 ending_st_roll_m_o_00_nce_ncer_related;
  u32 oam_top_data[256];
  u16 some_oam_idx;
  u16 unk4;
};

/* 224 */
struct StructAD00Sub
{
  u32 char_idx;
  u32 kart_idx;
  StructAM *emblem_anims;
  StructAM *player_face_anim;
  StructML *emblem_ml_p;
  StructML *character_kart_mdl;
  StructML *kart_tire_ml;
  StructAD00Sh *unk_shadow_model;
  KartOffsetDataEntry *kart_off_data;
  u32 ss[36];
};

/* 183 */
struct StructCESub
{
  StructAD00Sub ad00sub;
  Tex0Block *some_tex0;
};

/* 212 */
struct StructCESex
{
  void *heap_head_mem;
  Mem_HeapHead *heap_head;
  void *another_nsbmd_ptr;
  void *another_nsbtx_ptr;
  CommonHeader *nsbtx_ptr;
  void *another_nsbca_ptr;
  void *some_nsbmd_ptr;
  void *some_nsbtx_ptr;
  void *xtra_nsbmd_ptr;
  void *xtra_nsbtx_ptr;
  u32 se11;
  u32 se12;
  u16 some_counter;
  u16 se132;
};

/* 182 */
struct StructCE
{
  u32 ces00[6];
  void *charmenuparam_ptr;
  void *kartmenuparam_ptr;
  StructCESub *some_cep;
  u32 ces0[11];
  u32 bg0_hofs_vofs;
  u32 bb;
  StructCESub cesubs[2];
  void *kartoffsetdata_bin;
  StructML *kart_select_mdl;
  u32 cea;
  Tex0Block *some_tex0_block;
  u32 cec;
  u32 ced;
  u32 kart_appear_not_loaded;
  u32 ces21[4];
  StructCESex sexes[2];
  u32 ces2[2];
  u16 cey;
  u16 some_cesex_idx;
  void *kart_appear_ktbl_ptr;
};

/* 225 */
struct StructAM
{
  u16 am111;
  u16 am112;
  u32 am2;
  u32 am3;
  u32 am4;
  u32 am5;
  StructML *strml_p;
  u16 load_count;
  u16 some_loaded_anim_idx;
  u32 *ptr32_1;
  u32 *ptr32_2;
  u32 am10;
  u32 anim_fmt;
  u32 am12;
  u32 am13;
  u32 anim_ptr32;
};

/* 184 */
struct StructML
{
  u32 some_flags;
  u32 m2;
  u32 m3;
  u32 m4;
  u32 m5;
  u32 m6;
  u32 m7;
  u32 m8;
  u32 some_fn_ptr;
  u8 m211;
  u8 m212;
  u16 m22;
  u32 mdls[13];
  StructNASub nasub;
};

/* 227 */
struct StructAD00Sh
{
  StructML strml;
  u16 some_val;
  u16 sh2;
  u16 sh3;
  u16 sh4;
};

/* 226 */
struct KartOffsetDataEntry
{
  char tire_base_name[12];
  u32 zz[53];
};

/* 209 */
struct StructTD
{
  u32 tds[18];
};

/* 210 */
struct StructTest
{
  char str[24][19];
};

/* 211 */
struct StructZM
{
  void *thr_stack;
  Os_Thread thr_yet_yet_yet;
  Os_ThreadQueue some_tlst;
  u32 some_fn;
  u32 z2;
  u32 z3;
  u32 some_fn_2;
  u32 z5;
  u32 z6;
  void (*some_fn_3)(void);
  u32 zs[15];
};

/* 214 */
struct StructHU
{
  u32 some_counter;
  u32 h0;
  u32 h1;
  u32 some_fn_pair_idx;
  u32 h3;
  u32 some_fn_list[14];
  u32 u0;
  u32 some_flag;
  u32 u2;
  u32 u3;
  u32 u4;
  u32 u5;
  u32 some_evab_coef;
  void *some_ptr;
  void *title_s_bncl;
  void *title_s_bnbl;
  void *title_s_bnll;
  PaletteBlock *title_m_b_nclr;
  CharGraphicsBlock *title_m_b_ncgr;
  PaletteBlock *title_s_b_nclr;
  CharGraphicsBlock *title_s_b_ncgr;
  void *title_m1_eu_nscr;
  void *title_m2_nscr;
  void *title_s_bg_nscr;
  u32 hs8;
  u32 hs9;
  u32 hs10;
  PaletteBlock *title_s_o_nclr;
  CharGraphicsBlock *title_s_nce_ncgr;
  void *title_s_nce_ncer;
  u32 hs14;
  StructNJ nj1;
  StructNJ nj2;
  u32 unk;
};

/* 215 */
struct StructAA
{
  StructE7 stre7;
  u32 as0[197];
  u32 p0[48];
  u32 p1[192];
  u32 as[27];
  void *ptr_sz_6c;
  u32 b;
  u32 c;
};

/* 216 */
struct KclHeader
{
  u32 vertex_offset;
  u32 normal_offset;
  u32 plane_offset;
  u32 octree_offset;
  u32 unk;
  Vector3 octree_top_left;
  u32 x_mask;
  u32 y_mask;
  u32 z_mask;
  u32 coord_shift;
  u32 y_shift;
  u32 z_shift;
  u32 unk2;
};

/* 217 */
struct Struct33
{
  u32 some_counter;
  PaletteBlock *race_start_gp_m_o_nclr;
  CharGraphicsBlock *race_start_gp_m_o_ncgr;
  u32 a4;
  u32 a5;
  u32 a6;
  u32 top_oam_data[256];
  u32 unk;
};

/* 218 */
struct StructMapObject
{
  u32 mo1;
  u32 mo2;
  u32 mo3;
  StructMapObjectSub *strsub;
  StructML *some_strml;
  u32 mo6;
  void *nsbmd_ptr;
  StructAM *nsbca_anim;
  StructAM *nsbtp_anim;
  u32 mo10;
  StructAM *nsbta_anim;
};

/* 219 */
struct StructMapObjectSub
{
  u32 s1;
  u32 s2;
  u32 s3;
  u32 s4;
  u32 s5;
  u32 s6;
  u32 s7;
  u32 s8;
  u32 s9;
  StructAD00Sh *s10;
  StructAM *s11;
};

/* 220 */
struct StructAA04
{
  u32 aa1;
  u32 *sub_oam_data_ptr;
  u16 some_flags;
  u8 aa321;
  u8 aa322;
  u32 aa4;
};

/* 222 */
struct StructB4A4
{
  u32 bs[1559];
};

/* 223 */
struct StructAD00
{
  StructAD00Sub *subs;
  void *kart_kartcrsmat_bin_ptr;
  u16 some_count;
  u16 a32;
  u32 a4;
  void *kart_a_plt_data_offset;
  void *heyho_color_plt_data_offset;
  u16 a7[8];
  void *player_face_anim_nsbtp_ptr;
  StructML killer_item_mdl;
  StructAD00Sh some_ad00sh;
  StructAM killer_item_anim;
};

/* 228 */
struct StructB488
{
  u32 b1;
  u32 b2;
  u32 b3;
  u32 b4;
  u32 b5;
  u32 b6;
  u32 b7;
  u32 b8;
  u32 bs0[13];
  u8 b9;
  u8 b10;
  u8 b11;
  u8 b12;
  u32 b13;
  u32 bs1[5];
  u32 b14;
  u32 mode_mount_ma2_if_1;
  u32 is_dl;
  u32 some_idx;
  u32 b16;
  u32 maybe_cup_idx;
  u32 maybe_current_track;
  u32 b17;
  u32 b18;
  u32 b19;
  u32 bs2[4];
  u32 bs[24];
  u32 bx;
  u32 ba[8];
  u32 bz;
};

/* 231 */
struct Os_AlarmQueue
{
  Os_Alarm *prev_alarm;
  Os_Alarm *next_alarm;
};

/* 232 */
struct Arm_ExceptionContext
{
  Arm_Context base_ctx;
  u32 cp15;
  u32 spsr;
  u32 exinfo;
  u32 debug[4];
};

/* 233 */
struct Bios_SharedRegion
{
  u8 bootCheckInfo[32];
  u32 resetParameter;
  u8 padding5[8];
  u32 romBaseOffset;
  u8 cartridgeModuleInfo[12];
  u32 vblankCount;
  u8 wmBootBuf[64];
  Bios_PersonalData pdata;
  u8 zero[16];
  u8 nvramUserInfo[128];
  u8 isd_reserved1[32];
  u8 arenaInfo[72];
  u8 real_time_clock[8];
  u32 dmaClearBuf[4];
  CardHeader rom_header;
  u8 isd_reserved2[32];
  u32 pxiSignalParam[2];
  u32 fifo_proc_handler_masks[2];
  u32 mic_last_address;
  u16 mic_sampling_data;
  u16 wm_callback_control;
  u16 wm_rssi_pool;
  u8 padding3[2];
  u32 component_param;
  Os_ThreadInfo *threadinfo_mainp;
  Os_ThreadInfo *threadinfo_subp;
  u16 button_XY;
  u8 touch_panel[4];
  u16 autoloadSync;
  u32 lockIDFlag_mainp[2];
  u32 lockIDFlag_subp[2];
  Os_Lock lock_VRAM_C;
  Os_Lock lock_VRAM_D;
  Os_Lock lock_WRAM_BLOCK0;
  Os_Lock lock_WRAM_BLOCK1;
  Os_Lock lock_CARD;
  Os_Lock lock_CARTRIDGE;
  Os_Lock lock_INIT;
  u16 mmem_checker_mainp;
  u16 mmem_checker_subp;
  u8 padding4[2];
  u16 command_area;
};

/* 235 */
struct Gfx_State
{
  u16 lcdc;
  u16 bg;
  u16 obj;
  u16 arm7;
  u16 tex;
  u16 texPltt;
  u16 clrImg;
  u16 bgExtPltt;
  u16 objExtPltt;
  u16 sub_bg;
  u16 sub_obj;
  u16 sub_bgExtPltt;
  u16 sub_objExtPltt;
};

/* 237 */
struct NsbtxHeader
{
  CommonHeader hdr;
  u32 tex0_offset;
};

/* 239 */
struct NsbcaHeader
{
  CommonHeader hdr;
  u32 jnt0_offset;
};

/* 240 */
struct Jnt0Block
{
  CommonBlockHeader hdr;
};

/* 241 */
struct SoundContext
{
  Mem_HeapHead_Frame *heap;
  IntrusiveListWrapper some_lst_of_lsts;
};

/* 242 */
struct StructNS
{
  IntrusiveListWrapper wrap;
  u32 n1;
  u32 n2;
};

/* 243 */
struct StructTP
{
  u32 err_handler_fn;
  u16 tps1[6];
  Struct59C4 *str59c4;
  u32 t3;
  u32 t4;
  u32 t5;
  u32 t6;
  u32 t7;
  u32 t8;
  u32 t9;
  u16 taps1;
  u16 taps2;
  u16 flags_1;
  u16 flags_2;
};

/* 272 */
struct Struct59C4
{
  u32 gag1;
  u32 gag2;
  u32 gag3;
  u32 gag4;
  u32 gag5;
  u32 gag6;
  u32 gag7;
  u32 gag8;
  u32 gag9;
  u32 gag10;
  u16 gag111;
  u16 gag112;
  u16 gag121;
  u16 gag122;
  u32 some_flags;
  u32 gag14;
  u32 gag15;
  Struct59C4Sub *sub;
};

/* 274 */
struct Struct59C4Sub
{
  u32 unk[256];
  u32 shd1;
  Struct59C4Sub *own_ptr;
  u32 maybe_size;
  u32 shd4;
  u32 shd5;
  u32 shd6;
  u32 shd7;
  u32 some_counter_upto_30;
};

/* 244 */
struct CalibrationData
{
  u16 c1;
  u16 c2;
  u16 x1_x2_px_div_x100;
  u16 c4;
};

/* 246 */
struct Mdl0Block
{
  CommonBlockHeader hdr;
  Dict dict;
};

/* 247 */
struct Mdl0ModelEntry
{
  u32 model_size;
  u32 extra_model_data_offset;
  u32 tex_pal_offset;
  u32 display_list_start;
  u32 display_list_end;
  u8 unk1;
  u8 unk2;
  u8 unk3;
  u8 obj_count;
  u8 mat_count;
  u8 pol_count;
  u32 unk4;
  u16 vtx_count;
  u16 srf_count;
  u16 trg_count;
  u16 quad_count;
  u16 bounding_box_xyz_whd[6];
  u32 rt_use_data_unk[2];
  Dict obj_dict;
};

/* 248 */
struct StructAR
{
  StructARSub *area_type_5_ptrs;
  u16 area_type_5_count;
  u16 unk;
};

/* 249 */
struct StructARSub
{
  u16 ar_idx;
  u16 a2;
  u32 b;
  u8 c1;
  u8 c2;
  u8 c3;
  u8 c4;
};

/* 250 */
struct Os_RtcContext
{
  u32 r1;
  void (__fastcall *err_fn_ptr)(int, u32);
  u32 ptr32;
  u32 r4;
  u32 r5;
  u32 r6;
  u32 r7;
  u32 fn_ptr_2;
  u32 maybe_some_res;
};

/* 253 */
struct StructB43C
{
  u32 p1;
  u32 p2;
  u32 p3;
  u32 p4;
  u32 p5;
  u32 arr32_60[60];
  u32 p6;
  StructNJ nj1;
  StructNJ nj2;
  PaletteBlock *common_single_play_select_mode_m_o_NCLR;
  CharGraphicsBlock *single_play_select_mode_m_nce_ncgr;
  void *single_play_select_mode_m_nce_ncer;
  u32 uwunk;
  PaletteBlock *single_play_select_mode_s_o_NCLR;
  CharGraphicsBlock *single_play_select_mode_s_nce_ncgr;
  void *single_play_select_mode_s_nce_ncer;
  u32 p7;
  u32 p8;
  u32 p9;
  u32 p10;
  u32 p11;
  void *single_play_select_mode_m_bncl;
  u32 p12;
  u32 p13;
  void *single_play_select_mode_s_bncl;
  void *single_play_select_mode_s_bnbl;
  u32 p14;
  u32 p15;
  u32 p16;
};

/* 268 */
struct StructFET
{
  u8 gaga[152];
};

/* 269 */
struct StructFAT
{
  StructFET *fet_lst;
  u64 *u64_lst;
  u32 gigi;
  u32 kartphysicalparam_ptr;
  u32 charphysicalparam_ptr;
};

/* 270 */
struct StructAED0
{
  u32 fefe[101];
};

/* 271 */
struct StructB3F0
{
  u32 beb[7];
};

/* 273 */
struct Struct5624
{
  u16 a11;
  u16 a12;
  u16 xflags;
  u16 a22;
  u32 a3;
  u32 a4;
};

/* 275 */
struct StructTEQ
{
  void *ptr;
  u32 size;
  u16 some_idx;
  u16 some_idx_2;
  u16 some_count;
  u16 unk4;
  u32 maybe_total_len;
};

/* 277 */
struct StructSTFSub
{
  u32 s1;
  u32 s2;
  u32 s3;
  u8 s4;
  u8 s4unk[3];
  u32 s5;
  void *fn_1;
  void *fn_2;
  void *fn_3;
};

/* 276 */
struct StructSTF
{
  u32 st1;
  u32 st2;
  u32 st3;
  u32 unk_70a;
  u32 st5;
  u32 unk_ffffffff;
  void *staffroll_bmg_str0;
  u8 st8;
  u8 pad0[3];
  StructSTFSub sub;
  StructSTFSub *sub_ref;
  NFTR *load_font_2;
  u32 stq3;
  u32 stq4;
  u8 some_buf[2048];
  u8 unkunk;
  u8 pad[3];
  u32 unk_240;
  Mem_HeapHead *alloc_heap_hnd;
};

/* 278 */
struct StructB350
{
  u32 h1;
  u32 h2;
  u32 hs[579];
};

/* 279 */
struct StructB358
{
  u32 b1;
  u32 b2;
  u32 b3;
};

/* 280 */
struct Os_CartridgeModuleInfo
{
  u16 eew;
  u8 ugu[10];
};

/* 281 */
struct StructB3EC
{
  u32 b1;
  u32 b2;
  u32 b3;
  u32 b4;
  u32 b5;
};

/* 282 */
struct Struct1A44
{
  u32 some_mode;
  u32 a2;
  u32 some_bmg_str;
  u32 a4;
  u32 a5;
  StructSTFSub ssub;
  u32 a6;
  NFTR *some_font_ptr;
  u32 a8;
  u32 a9;
  u32 some_tile_data[1280];
  u32 ass2[384];
};

/* 283 */
struct StructTEQSub
{
  u32 some_offset;
  u32 some_ptr;
  u32 t3;
  u32 some_len;
};

/* 284 */
struct StructKEY
{
  StructSTFSub *some_stfsub_ptr;
  NFTR *some_font_ptr;
  u32 some_flag_jp;
  u32 k4;
};

